-- MySQL dump 10.13  Distrib 5.1.73, for redhat-linux-gnu (x86_64)
--
-- Host: localhost    Database: firekylin
-- ------------------------------------------------------
-- Server version	5.1.73

/*!40101 SET @OLD_CHARACTER_SET_CLIENT=@@CHARACTER_SET_CLIENT */;
/*!40101 SET @OLD_CHARACTER_SET_RESULTS=@@CHARACTER_SET_RESULTS */;
/*!40101 SET @OLD_COLLATION_CONNECTION=@@COLLATION_CONNECTION */;
/*!40101 SET NAMES utf8 */;
/*!40103 SET @OLD_TIME_ZONE=@@TIME_ZONE */;
/*!40103 SET TIME_ZONE='+00:00' */;
/*!40014 SET @OLD_UNIQUE_CHECKS=@@UNIQUE_CHECKS, UNIQUE_CHECKS=0 */;
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;
/*!40101 SET @OLD_SQL_MODE=@@SQL_MODE, SQL_MODE='NO_AUTO_VALUE_ON_ZERO' */;
/*!40111 SET @OLD_SQL_NOTES=@@SQL_NOTES, SQL_NOTES=0 */;

--
-- Table structure for table `fk_cate`
--

DROP TABLE IF EXISTS `fk_cate`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `fk_cate` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL,
  `pid` int(11) NOT NULL DEFAULT '0',
  `pathname` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `fk_cate`
--

LOCK TABLES `fk_cate` WRITE;
/*!40000 ALTER TABLE `fk_cate` DISABLE KEYS */;
/*!40000 ALTER TABLE `fk_cate` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `fk_options`
--

DROP TABLE IF EXISTS `fk_options`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `fk_options` (
  `key` varchar(255) NOT NULL DEFAULT '',
  `value` text,
  `desc` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`key`),
  UNIQUE KEY `key` (`key`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `fk_options`
--

LOCK TABLES `fk_options` WRITE;
/*!40000 ALTER TABLE `fk_options` DISABLE KEYS */;
INSERT INTO `fk_options` VALUES ('analyze_code','','统计代码，可以添加百度统计、Google 统计等'),('comment','{\"type\":\"duoshuo\",\"name\":\"westpsk\"}','评论类型'),('description','A Simple & Fast Node Bloging Platform Base On ThinkJS 2.0 & ReactJS & ES6/7','网站描述'),('favicon_url','/static/upload/201607/favicon.png','favicon'),('github_blog','welefen/blog','GitHub blog 地址，如果填了则同步到 GitHub 上'),('github_url','https://github.com/westpsk','GitHub 地址'),('image_upload',NULL,'图片存放的位置，默认存在放网站上。也可以选择放在七牛或者又拍云等地方'),('keywords','ivan blog fe','网站关键字'),('logo_url','/static/upload/201606/favicon.jpg','logo 地址'),('miitbeian','www','网站备案号'),('num_per_page','10','文章一页显示的条数'),('password_salt','firekylin','密码 salt，网站安装的时候随机生成一个'),('push','0','是否允许推送'),('push_sites','','推送网站列表'),('site_url','http://westpsk.com','网站地址'),('theme','firekylin','主题名称'),('title','ivan','网站标题'),('twitter_url','','微博地址'),('two_factor_auth','','是否开启二步验证');
/*!40000 ALTER TABLE `fk_options` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `fk_post`
--

DROP TABLE IF EXISTS `fk_post`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `fk_post` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `user_id` int(10) unsigned NOT NULL,
  `type` tinyint(11) NOT NULL DEFAULT '0' COMMENT '0 为文章，1 为页面',
  `status` tinyint(11) NOT NULL DEFAULT '0' COMMENT '0 为草稿，1 为待审核，2 为已拒绝，3 为已经发布',
  `title` varchar(255) NOT NULL,
  `pathname` varchar(255) NOT NULL DEFAULT '' COMMENT 'URL 的 pathname',
  `summary` longtext NOT NULL COMMENT '摘要',
  `markdown_content` longtext NOT NULL,
  `content` longtext CHARACTER SET utf8 COLLATE utf8_bin NOT NULL,
  `allow_comment` tinyint(11) NOT NULL DEFAULT '1' COMMENT '1 为允许， 0 为不允许',
  `create_time` datetime DEFAULT NULL,
  `update_time` datetime NOT NULL,
  `is_public` tinyint(11) NOT NULL DEFAULT '1' COMMENT '1 为公开，0 为不公开',
  `comment_num` int(11) NOT NULL DEFAULT '0',
  `options` text COMMENT '一些选项，JSON 结构',
  PRIMARY KEY (`id`),
  KEY `create_time` (`create_time`)
) ENGINE=InnoDB AUTO_INCREMENT=10562 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `fk_post`
--

LOCK TABLES `fk_post` WRITE;
/*!40000 ALTER TABLE `fk_post` DISABLE KEYS */;
INSERT INTO `fk_post` VALUES (4,22,0,3,'使用css border三角形.','csshack','<p>css border实现</p>\n<p>一个div或者元素的border并不是我们直观意义上的一条有高度的线，而是一个等高梯形或者三角形（宽高为0时），可以看一下效果：</p>\n<p>div定义：</p>\n<p><code>&lt;div class=&quot;arrow1&quot;&gt;&lt;/div&gt;</code></p>\n<p>css:</p>\n<pre><code class=\"hljs lang-css\"><span class=\"hljs-selector-class\">.arrow1</span>{\n    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">0px</span>;\n    <span class=\"hljs-attribute\">height</span>:<span class=\"hljs-number\">0px</span>;\n    <span class=\"hljs-attribute\">border-width</span>: <span class=\"hljs-number\">30px</span>;\n    <span class=\"hljs-attribute\">border-style</span>: solid;\n    <span class=\"hljs-attribute\">border-color</span>: <span class=\"hljs-number\">#007998</span> <span class=\"hljs-number\">#47A447</span> <span class=\"hljs-number\">#3C6AB9</span> <span class=\"hljs-number\">#D2322D</span>;\n}\n</code></pre><p><img src=\"http://7xvbqa.com1.z0.glb.clouddn.com/qiniu/1465813119718.png\" width=\"63\"/></p>\n<p>可以看到每一个方向的border都是一个三角形，那么我们只需把对应方向剩余其他方向的border设置为透明或者隐藏掉就可以得到任何方向的一个三角形了。如果我们想得到一个下拉图标，我们可以将border的左右和下边框改为透明，css改动如下：</p>\n<pre><code class=\"hljs lang-css\"><span class=\"hljs-selector-class\">.arrow1</span>{\n    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">0px</span>;\n    <span class=\"hljs-attribute\">height</span>:<span class=\"hljs-number\">0px</span>;\n    <span class=\"hljs-attribute\">border-width</span>: <span class=\"hljs-number\">30px</span>;\n    <span class=\"hljs-attribute\">border-style</span>: solid;\n    <span class=\"hljs-attribute\">border-color</span>: <span class=\"hljs-number\">#007998</span> transparent transparent transparent;\n}\n</code></pre><p><img src=\"http://7xvbqa.com1.z0.glb.clouddn.com/qiniu/1465813165829.png\" width=\"64\"/></p>\n<blockquote>\n<p>注：transparent 属性用来在 background 中将 background-color 选项设置为背景颜色透明</p>\n</blockquote>\n<p>bingo!就是我们想要的效果，但是在ie6下杯具鸟！\n长长的大黑框，让人无法直视，这是因为ie6不支持transparent 透明属性，这时候我们可以将对应区域的border的样式设置为dashed，dashed在边框宽度很大时，会隐藏掉。css修改如下：</p>\n<pre><code class=\"hljs lang-css\"><span class=\"hljs-selector-class\">.arrow1</span>{\n        <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">0px</span>;\n        <span class=\"hljs-attribute\">height</span>:<span class=\"hljs-number\">0px</span>;\n        <span class=\"hljs-attribute\">border-width</span>: <span class=\"hljs-number\">30px</span>;\n        <span class=\"hljs-attribute\">border-style</span>: solid dashed dashed;\n        <span class=\"hljs-attribute\">border-color</span>: <span class=\"hljs-number\">#007998</span> transparent transparent transparent;\n}\n</code></pre><p>嗯，IE6上显示正常</p>\n<p><img src=\"http://7xvbqa.com1.z0.glb.clouddn.com/qiniu/1465813211197.png\" width=\"36\"/></p>\n<p>但是，到此仍没有结束，我们设置个阴影来查看下最终生成的效果：\n但是，到此仍没有结束，我们设置个阴影来查看下最终生成的效果：\n<img src=\"http://7xvbqa.com1.z0.glb.clouddn.com/qiniu/1465813226319.png\" width=\"37\"/></p>\n<p>即便是我们看到的已经生成一个我们需要的三角形，但是三角形的占用高度仍是原高度，这会导致在和其他元素使用时，造成上移的效果。此时，我们需要把下边框的高度设置为0：</p>\n<pre><code class=\"hljs lang-css\"><span class=\"hljs-selector-class\">.arrow1</span>{\n        <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">0px</span>;\n        <span class=\"hljs-attribute\">height</span>:<span class=\"hljs-number\">0px</span>;\n        <span class=\"hljs-attribute\">border-width</span>: <span class=\"hljs-number\">30px</span> <span class=\"hljs-number\">30px</span> <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-attribute\">border-style</span>: solid dashed dashed;\n        <span class=\"hljs-attribute\">border-color</span>: <span class=\"hljs-number\">#007998</span> transparent transparent transparent;\n}\n</code></pre><p><img src=\"http://7xvbqa.com1.z0.glb.clouddn.com/qiniu/1465813245239.png\" width=\"37\"/></p>\n<p>似乎仍是不太友好，在使用时我们仍需要修改对应的颜色，能不能根据父元素设定的颜色，显示对应的颜色呢？我们需要把<code>border-color</code>修改下：</p>\n<pre><code class=\"lang-arrow1{\">    width: 0px;\n    height:0px;\n    line-height: 0px;\n    border-width: 30px 30px 0;\n    border-style: solid dashed dashed dashed;\n    border-left-color: transparent;\n    border-right-color: transparent;\n}\n</code></pre>\n<p>效果（使用当前字体颜色）：\n<img src=\"http://7xvbqa.com1.z0.glb.clouddn.com/qiniu/1465813266754.png\" width=\"38\"/>\n当然除了利用css border生成外，我们还可以使用特殊字符◇叠加定位来生成，也可以使用css3的旋转来生成（ie6下需要hack处理）。利用border是一种常用而且简单兼容的方式。</p>\n','css border实现\n\n一个div或者元素的border并不是我们直观意义上的一条有高度的线，而是一个等高梯形或者三角形（宽高为0时），可以看一下效果：\n\ndiv定义：\n\n```<div class=\"arrow1\"></div>```\n\ncss:\n\n```\n.arrow1{\n    width: 0px;\n    height:0px;\n    border-width: 30px;\n    border-style: solid;\n    border-color: #007998 #47A447 #3C6AB9 #D2322D;\n}\n```\n\n<img src=\"http://7xvbqa.com1.z0.glb.clouddn.com/qiniu/1465813119718.png\" width=\"63\"/>\n\n可以看到每一个方向的border都是一个三角形，那么我们只需把对应方向剩余其他方向的border设置为透明或者隐藏掉就可以得到任何方向的一个三角形了。如果我们想得到一个下拉图标，我们可以将border的左右和下边框改为透明，css改动如下：\n\n```\n.arrow1{\n    width: 0px;\n    height:0px;\n    border-width: 30px;\n    border-style: solid;\n    border-color: #007998 transparent transparent transparent;\n}\n```\n\n<img src=\"http://7xvbqa.com1.z0.glb.clouddn.com/qiniu/1465813165829.png\" width=\"64\"/>\n\n>注：transparent 属性用来在 background 中将 background-color 选项设置为背景颜色透明\n\nbingo!就是我们想要的效果，但是在ie6下杯具鸟！\n长长的大黑框，让人无法直视，这是因为ie6不支持transparent 透明属性，这时候我们可以将对应区域的border的样式设置为dashed，dashed在边框宽度很大时，会隐藏掉。css修改如下：\n```\n.arrow1{\n        width: 0px;\n        height:0px;\n        border-width: 30px;\n        border-style: solid dashed dashed;\n        border-color: #007998 transparent transparent transparent;\n}\n```\n\n嗯，IE6上显示正常\n\n<img src=\"http://7xvbqa.com1.z0.glb.clouddn.com/qiniu/1465813211197.png\" width=\"36\"/>\n\n但是，到此仍没有结束，我们设置个阴影来查看下最终生成的效果：\n但是，到此仍没有结束，我们设置个阴影来查看下最终生成的效果：\n<img src=\"http://7xvbqa.com1.z0.glb.clouddn.com/qiniu/1465813226319.png\" width=\"37\"/>\n\n即便是我们看到的已经生成一个我们需要的三角形，但是三角形的占用高度仍是原高度，这会导致在和其他元素使用时，造成上移的效果。此时，我们需要把下边框的高度设置为0：\n```\n.arrow1{\n        width: 0px;\n        height:0px;\n        border-width: 30px 30px 0;\n        border-style: solid dashed dashed;\n        border-color: #007998 transparent transparent transparent;\n}\n```\n<img src=\"http://7xvbqa.com1.z0.glb.clouddn.com/qiniu/1465813245239.png\" width=\"37\"/>\n\n似乎仍是不太友好，在使用时我们仍需要修改对应的颜色，能不能根据父元素设定的颜色，显示对应的颜色呢？我们需要把`border-color`修改下：\n\n```.arrow1{\n    width: 0px;\n    height:0px;\n    line-height: 0px;\n    border-width: 30px 30px 0;\n    border-style: solid dashed dashed dashed;\n    border-left-color: transparent;\n    border-right-color: transparent;\n}\n```\n\n效果（使用当前字体颜色）：\n<img src=\"http://7xvbqa.com1.z0.glb.clouddn.com/qiniu/1465813266754.png\" width=\"38\"/>\n当然除了利用css border生成外，我们还可以使用特殊字符◇叠加定位来生成，也可以使用css3的旋转来生成（ie6下需要hack处理）。利用border是一种常用而且简单兼容的方式。','<p>css border实现</p>\n<p>一个div或者元素的border并不是我们直观意义上的一条有高度的线，而是一个等高梯形或者三角形（宽高为0时），可以看一下效果：</p>\n<p>div定义：</p>\n<p><code>&lt;div class=&quot;arrow1&quot;&gt;&lt;/div&gt;</code></p>\n<p>css:</p>\n<pre><code class=\"hljs lang-css\"><span class=\"hljs-selector-class\">.arrow1</span>{\n    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">0px</span>;\n    <span class=\"hljs-attribute\">height</span>:<span class=\"hljs-number\">0px</span>;\n    <span class=\"hljs-attribute\">border-width</span>: <span class=\"hljs-number\">30px</span>;\n    <span class=\"hljs-attribute\">border-style</span>: solid;\n    <span class=\"hljs-attribute\">border-color</span>: <span class=\"hljs-number\">#007998</span> <span class=\"hljs-number\">#47A447</span> <span class=\"hljs-number\">#3C6AB9</span> <span class=\"hljs-number\">#D2322D</span>;\n}\n</code></pre><p><img src=\"http://7xvbqa.com1.z0.glb.clouddn.com/qiniu/1465813119718.png\" width=\"63\"/></p>\n<p>可以看到每一个方向的border都是一个三角形，那么我们只需把对应方向剩余其他方向的border设置为透明或者隐藏掉就可以得到任何方向的一个三角形了。如果我们想得到一个下拉图标，我们可以将border的左右和下边框改为透明，css改动如下：</p>\n<pre><code class=\"hljs lang-css\"><span class=\"hljs-selector-class\">.arrow1</span>{\n    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">0px</span>;\n    <span class=\"hljs-attribute\">height</span>:<span class=\"hljs-number\">0px</span>;\n    <span class=\"hljs-attribute\">border-width</span>: <span class=\"hljs-number\">30px</span>;\n    <span class=\"hljs-attribute\">border-style</span>: solid;\n    <span class=\"hljs-attribute\">border-color</span>: <span class=\"hljs-number\">#007998</span> transparent transparent transparent;\n}\n</code></pre><p><img src=\"http://7xvbqa.com1.z0.glb.clouddn.com/qiniu/1465813165829.png\" width=\"64\"/></p>\n<blockquote>\n<p>注：transparent 属性用来在 background 中将 background-color 选项设置为背景颜色透明</p>\n</blockquote>\n<p>bingo!就是我们想要的效果，但是在ie6下杯具鸟！\n长长的大黑框，让人无法直视，这是因为ie6不支持transparent 透明属性，这时候我们可以将对应区域的border的样式设置为dashed，dashed在边框宽度很大时，会隐藏掉。css修改如下：</p>\n<pre><code class=\"hljs lang-css\"><span class=\"hljs-selector-class\">.arrow1</span>{\n        <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">0px</span>;\n        <span class=\"hljs-attribute\">height</span>:<span class=\"hljs-number\">0px</span>;\n        <span class=\"hljs-attribute\">border-width</span>: <span class=\"hljs-number\">30px</span>;\n        <span class=\"hljs-attribute\">border-style</span>: solid dashed dashed;\n        <span class=\"hljs-attribute\">border-color</span>: <span class=\"hljs-number\">#007998</span> transparent transparent transparent;\n}\n</code></pre><p>嗯，IE6上显示正常</p>\n<p><img src=\"http://7xvbqa.com1.z0.glb.clouddn.com/qiniu/1465813211197.png\" width=\"36\"/></p>\n<p>但是，到此仍没有结束，我们设置个阴影来查看下最终生成的效果：\n但是，到此仍没有结束，我们设置个阴影来查看下最终生成的效果：\n<img src=\"http://7xvbqa.com1.z0.glb.clouddn.com/qiniu/1465813226319.png\" width=\"37\"/></p>\n<p>即便是我们看到的已经生成一个我们需要的三角形，但是三角形的占用高度仍是原高度，这会导致在和其他元素使用时，造成上移的效果。此时，我们需要把下边框的高度设置为0：</p>\n<pre><code class=\"hljs lang-css\"><span class=\"hljs-selector-class\">.arrow1</span>{\n        <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">0px</span>;\n        <span class=\"hljs-attribute\">height</span>:<span class=\"hljs-number\">0px</span>;\n        <span class=\"hljs-attribute\">border-width</span>: <span class=\"hljs-number\">30px</span> <span class=\"hljs-number\">30px</span> <span class=\"hljs-number\">0</span>;\n        <span class=\"hljs-attribute\">border-style</span>: solid dashed dashed;\n        <span class=\"hljs-attribute\">border-color</span>: <span class=\"hljs-number\">#007998</span> transparent transparent transparent;\n}\n</code></pre><p><img src=\"http://7xvbqa.com1.z0.glb.clouddn.com/qiniu/1465813245239.png\" width=\"37\"/></p>\n<p>似乎仍是不太友好，在使用时我们仍需要修改对应的颜色，能不能根据父元素设定的颜色，显示对应的颜色呢？我们需要把<code>border-color</code>修改下：</p>\n<pre><code class=\"lang-arrow1{\">    width: 0px;\n    height:0px;\n    line-height: 0px;\n    border-width: 30px 30px 0;\n    border-style: solid dashed dashed dashed;\n    border-left-color: transparent;\n    border-right-color: transparent;\n}\n</code></pre>\n<p>效果（使用当前字体颜色）：\n<img src=\"http://7xvbqa.com1.z0.glb.clouddn.com/qiniu/1465813266754.png\" width=\"38\"/>\n当然除了利用css border生成外，我们还可以使用特殊字符◇叠加定位来生成，也可以使用css3的旋转来生成（ie6下需要hack处理）。利用border是一种常用而且简单兼容的方式。</p>\n',1,'2016-06-13 06:35:39','2016-06-13 07:17:19',1,0,'\"{\\\"push_sites\\\":[]}\"'),(10544,21,0,3,'实用css实现全兼容tooltip提示框','csstooltip','<h2 id=\"-\">基本原理</h2>\n<p>先设定一个背景色的普通div盒子，然后使用上篇post得到的三角型图标，把div盒子设置为相对定位模式，三角型图标设置为绝对定位，位置相对于div盒子，调整到合适的位置。这样就得到一个基本的tooltip，但是没有边框看起来总是不舒服，我们可以给div盒子设置一个边框，这没什么难度，但是三角形图标如何设置边框呢？这里我们通过一个取巧的方式，让两个不同颜色的三角形图标叠加，并且位置错开1px，这样底层三角形top border被遮盖，只露出左右border部分，叠加在一起我们就得到一个看似带边框的三角形图标。</p>\n<p>step by step</p>\n<ol>\n<li><p>先定义一个相对定位的盒子div</p>\n<pre><code class=\"hljs lang-javascript\">&lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">\"tooltips\"</span>&gt;<span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n</code></pre><p>使用css实现</p>\n<pre><code class=\"hljs lang-css\"><span class=\"hljs-selector-class\">.tooltips</span>{\n<span class=\"hljs-attribute\">position</span>:relative;\n<span class=\"hljs-attribute\">width</span>:<span class=\"hljs-number\">300px</span>;\n<span class=\"hljs-attribute\">height</span>:<span class=\"hljs-number\">80px</span>;\n<span class=\"hljs-attribute\">line-height</span>:<span class=\"hljs-number\">60px</span>;\n<span class=\"hljs-attribute\">background</span>:<span class=\"hljs-number\">#D7E7FC</span>;\n<span class=\"hljs-attribute\">border-radius</span>:<span class=\"hljs-number\">4px</span>;\n}\n</code></pre><p>效果：\n￼<img src=\"http://7xvbqa.com1.z0.glb.clouddn.com/qiniu/1466147682748.png\" width=\"189\"/></p>\n</li>\n<li><p>接下来利用上篇post的知识我们给div盒子添加一个三角型图标：</p>\n</li>\n</ol>\n<pre><code class=\"hljs lang-applescript\">&lt;<span class=\"hljs-keyword\">div</span> <span class=\"hljs-built_in\">class</span>=<span class=\"hljs-string\">\"tooltips\"</span>&gt;\n    &lt;<span class=\"hljs-keyword\">div</span> <span class=\"hljs-built_in\">class</span>=<span class=\"hljs-string\">\"arrow \"</span>&gt;&lt;/<span class=\"hljs-keyword\">div</span>&gt;\n&lt;/<span class=\"hljs-keyword\">div</span>&gt;\n</code></pre><p>三角形图标css:</p>\n<pre><code class=\"hljs lang-css\"><span class=\"hljs-selector-class\">.arrow</span>{\n    <span class=\"hljs-attribute\">position</span>:absolute;\n    <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#D7E7FC</span>;\n    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-attribute\">height</span>:<span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-attribute\">line-height</span>: <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-attribute\">border-width</span>: <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">20px</span> <span class=\"hljs-number\">15px</span>;\n    <span class=\"hljs-attribute\">border-style</span>: dashed dashed solid dashed;\n    <span class=\"hljs-attribute\">border-left-color</span>: transparent;\n    <span class=\"hljs-attribute\">border-right-color</span>: transparent;\n    <span class=\"hljs-attribute\">bottom</span>: -<span class=\"hljs-number\">20px</span>;\n    <span class=\"hljs-attribute\">right</span>: <span class=\"hljs-number\">50%</span>;\n}\n</code></pre><p>￼<img src=\"http://7xvbqa.com1.z0.glb.clouddn.com/qiniu/1466147720772.png\" width=\"183\"/></p>\n<p>初具雏形，甚至可以拿来直接用了，但是如果tooltip背景色和目标背景色重合，那么我么就很难分辨出来了，所以我们需要给它定义个border。</p>\n<ol>\n<li>添加border\ncss:</li>\n</ol>\n<pre><code class=\"hljs lang-css\"><span class=\"hljs-selector-class\">.tooltips</span>{\n    <span class=\"hljs-attribute\">position</span>:relative;\n    <span class=\"hljs-attribute\">width</span>:<span class=\"hljs-number\">300px</span>;\n    <span class=\"hljs-attribute\">height</span>:<span class=\"hljs-number\">80px</span>;\n    <span class=\"hljs-attribute\">line-height</span>:<span class=\"hljs-number\">60px</span>;\n    <span class=\"hljs-attribute\">background</span>:<span class=\"hljs-number\">#D7E7FC</span>;\n    <span class=\"hljs-attribute\">border</span>:<span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#A5C4EC</span>;\n    <span class=\"hljs-attribute\">border-radius</span>:<span class=\"hljs-number\">4px</span>;\n}\n</code></pre><p>￼<img src=\"http://7xvbqa.com1.z0.glb.clouddn.com/qiniu/1466147742384.png\" width=\"186\"/></p>\n<p>盒子有了边框效果，但是下面的小三角还没有被“保护”起来，这对于处女座来说简直是不能容忍的！</p>\n<ol>\n<li>给“小三角穿上松紧带”</li>\n</ol>\n<p>前面在讲解原理时我们已经说过，需要使用两个三角形叠加的方式，首先我们定义两个三角形的div，一个背景色和盒子的边框颜色相同，一个背景色和盒子的背景色一致：</p>\n<pre><code class=\"hljs lang-applescript\">&lt;<span class=\"hljs-keyword\">div</span> <span class=\"hljs-built_in\">class</span>=<span class=\"hljs-string\">\"tooltips\"</span>&gt;\n    &lt;<span class=\"hljs-keyword\">div</span> <span class=\"hljs-built_in\">class</span>=<span class=\"hljs-string\">\"arrow arrow-border\"</span>&gt;&lt;/<span class=\"hljs-keyword\">div</span>&gt;\n    &lt;<span class=\"hljs-keyword\">div</span> <span class=\"hljs-built_in\">class</span>=<span class=\"hljs-string\">\"arrow arrow-bg\"</span>&gt;&lt;/<span class=\"hljs-keyword\">div</span>&gt;\n&lt;/<span class=\"hljs-keyword\">div</span>&gt;\n</code></pre><p>css定义如下：</p>\n<pre><code class=\"hljs lang-css\"><span class=\"hljs-selector-class\">.arrow</span>{\n    <span class=\"hljs-attribute\">position</span>:absolute;\n    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">0px</span>;\n    <span class=\"hljs-attribute\">height</span>:<span class=\"hljs-number\">0px</span>;\n    <span class=\"hljs-attribute\">line-height</span>: <span class=\"hljs-number\">0px</span>;\n    <span class=\"hljs-attribute\">border-width</span>: <span class=\"hljs-number\">20px</span> <span class=\"hljs-number\">15px</span> <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-attribute\">border-style</span>: solid dashed dashed dashed;\n    <span class=\"hljs-attribute\">border-left-color</span>: transparent;\n    <span class=\"hljs-attribute\">border-right-color</span>: transparent;\n}\n<span class=\"hljs-selector-class\">.arrow-border</span>{\n    <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#A5C4EC</span>;\n    <span class=\"hljs-attribute\">bottom</span>: -<span class=\"hljs-number\">20px</span>;\n    <span class=\"hljs-attribute\">right</span>: <span class=\"hljs-number\">50%</span>;\n}\n<span class=\"hljs-selector-class\">.arrow-bg</span>{\n    <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#D7E7FC</span>;\n    <span class=\"hljs-attribute\">bottom</span>: -<span class=\"hljs-number\">19px</span>;\n    <span class=\"hljs-attribute\">right</span>: <span class=\"hljs-number\">50%</span>;\n}\n</code></pre><p>注意：.arrow-bg和.arrow-border的bottom位置相差为1px（可根据边框宽度调整）两个div的顺序不可颠倒。\n我们来看看最终效果：\n<img src=\"http://7xvbqa.com1.z0.glb.clouddn.com/qiniu/1466147763542.png\" width=\"186\"/>\n￼\nok!大功告成，ie6下跑一下，完全兼容！</p>\n','## 基本原理\n\n先设定一个背景色的普通div盒子，然后使用上篇post得到的三角型图标，把div盒子设置为相对定位模式，三角型图标设置为绝对定位，位置相对于div盒子，调整到合适的位置。这样就得到一个基本的tooltip，但是没有边框看起来总是不舒服，我们可以给div盒子设置一个边框，这没什么难度，但是三角形图标如何设置边框呢？这里我们通过一个取巧的方式，让两个不同颜色的三角形图标叠加，并且位置错开1px，这样底层三角形top border被遮盖，只露出左右border部分，叠加在一起我们就得到一个看似带边框的三角形图标。\n\nstep by step\n\n1.  先定义一个相对定位的盒子div\n    ```\n<div class=\"tooltips\"></div>\n```    \n 使用css实现\n ```\n.tooltips{\n    position:relative;\n    width:300px;\n    height:80px;\n    line-height:60px;\n    background:#D7E7FC;\n    border-radius:4px;\n    }\n```\n    效果：\n￼<img src=\"http://7xvbqa.com1.z0.glb.clouddn.com/qiniu/1466147682748.png\" width=\"189\"/>\n\n2.  接下来利用上篇post的知识我们给div盒子添加一个三角型图标：\n\n```\n<div class=\"tooltips\">\n    <div class=\"arrow \"></div>\n</div>\n```\n\n三角形图标css:\n\n```\n.arrow{\n    position:absolute;\n    color: #D7E7FC;\n    width: 0;\n    height:0;\n    line-height: 0;\n    border-width: 0 20px 15px;\n    border-style: dashed dashed solid dashed;\n    border-left-color: transparent;\n    border-right-color: transparent;\n    bottom: -20px;\n    right: 50%;\n}\n```\n￼<img src=\"http://7xvbqa.com1.z0.glb.clouddn.com/qiniu/1466147720772.png\" width=\"183\"/>\n\n初具雏形，甚至可以拿来直接用了，但是如果tooltip背景色和目标背景色重合，那么我么就很难分辨出来了，所以我们需要给它定义个border。\n\n3. 添加border\ncss:\n\n```\n.tooltips{\n    position:relative;\n    width:300px;\n    height:80px;\n    line-height:60px;\n    background:#D7E7FC;\n    border:1px solid #A5C4EC;\n    border-radius:4px;\n}\n```\n￼<img src=\"http://7xvbqa.com1.z0.glb.clouddn.com/qiniu/1466147742384.png\" width=\"186\"/>\n\n盒子有了边框效果，但是下面的小三角还没有被“保护”起来，这对于处女座来说简直是不能容忍的！\n\n4. 给“小三角穿上松紧带”\n\n前面在讲解原理时我们已经说过，需要使用两个三角形叠加的方式，首先我们定义两个三角形的div，一个背景色和盒子的边框颜色相同，一个背景色和盒子的背景色一致：\n\n```\n<div class=\"tooltips\">\n    <div class=\"arrow arrow-border\"></div>\n    <div class=\"arrow arrow-bg\"></div>\n</div>\n```\n\ncss定义如下：\n\n```\n.arrow{\n    position:absolute;\n    width: 0px;\n    height:0px;\n    line-height: 0px;\n    border-width: 20px 15px 0;\n    border-style: solid dashed dashed dashed;\n    border-left-color: transparent;\n    border-right-color: transparent;\n}\n.arrow-border{\n    color: #A5C4EC;\n    bottom: -20px;\n    right: 50%;\n}\n.arrow-bg{\n    color: #D7E7FC;\n    bottom: -19px;\n    right: 50%;\n}\n```\n注意：.arrow-bg和.arrow-border的bottom位置相差为1px（可根据边框宽度调整）两个div的顺序不可颠倒。\n我们来看看最终效果：\n<img src=\"http://7xvbqa.com1.z0.glb.clouddn.com/qiniu/1466147763542.png\" width=\"186\"/>\n￼\nok!大功告成，ie6下跑一下，完全兼容！','<h2 id=\"-\">基本原理</h2>\n<p>先设定一个背景色的普通div盒子，然后使用上篇post得到的三角型图标，把div盒子设置为相对定位模式，三角型图标设置为绝对定位，位置相对于div盒子，调整到合适的位置。这样就得到一个基本的tooltip，但是没有边框看起来总是不舒服，我们可以给div盒子设置一个边框，这没什么难度，但是三角形图标如何设置边框呢？这里我们通过一个取巧的方式，让两个不同颜色的三角形图标叠加，并且位置错开1px，这样底层三角形top border被遮盖，只露出左右border部分，叠加在一起我们就得到一个看似带边框的三角形图标。</p>\n<p>step by step</p>\n<ol>\n<li><p>先定义一个相对定位的盒子div</p>\n<pre><code class=\"hljs lang-javascript\">&lt;div <span class=\"hljs-class\"><span class=\"hljs-keyword\">class</span></span>=<span class=\"hljs-string\">\"tooltips\"</span>&gt;<span class=\"xml\"><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span></span>\n</code></pre><p>使用css实现</p>\n<pre><code class=\"hljs lang-css\"><span class=\"hljs-selector-class\">.tooltips</span>{\n<span class=\"hljs-attribute\">position</span>:relative;\n<span class=\"hljs-attribute\">width</span>:<span class=\"hljs-number\">300px</span>;\n<span class=\"hljs-attribute\">height</span>:<span class=\"hljs-number\">80px</span>;\n<span class=\"hljs-attribute\">line-height</span>:<span class=\"hljs-number\">60px</span>;\n<span class=\"hljs-attribute\">background</span>:<span class=\"hljs-number\">#D7E7FC</span>;\n<span class=\"hljs-attribute\">border-radius</span>:<span class=\"hljs-number\">4px</span>;\n}\n</code></pre><p>效果：\n￼<img src=\"http://7xvbqa.com1.z0.glb.clouddn.com/qiniu/1466147682748.png\" width=\"189\"/></p>\n</li>\n<li><p>接下来利用上篇post的知识我们给div盒子添加一个三角型图标：</p>\n</li>\n</ol>\n<pre><code class=\"hljs lang-applescript\">&lt;<span class=\"hljs-keyword\">div</span> <span class=\"hljs-built_in\">class</span>=<span class=\"hljs-string\">\"tooltips\"</span>&gt;\n    &lt;<span class=\"hljs-keyword\">div</span> <span class=\"hljs-built_in\">class</span>=<span class=\"hljs-string\">\"arrow \"</span>&gt;&lt;/<span class=\"hljs-keyword\">div</span>&gt;\n&lt;/<span class=\"hljs-keyword\">div</span>&gt;\n</code></pre><p>三角形图标css:</p>\n<pre><code class=\"hljs lang-css\"><span class=\"hljs-selector-class\">.arrow</span>{\n    <span class=\"hljs-attribute\">position</span>:absolute;\n    <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#D7E7FC</span>;\n    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-attribute\">height</span>:<span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-attribute\">line-height</span>: <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-attribute\">border-width</span>: <span class=\"hljs-number\">0</span> <span class=\"hljs-number\">20px</span> <span class=\"hljs-number\">15px</span>;\n    <span class=\"hljs-attribute\">border-style</span>: dashed dashed solid dashed;\n    <span class=\"hljs-attribute\">border-left-color</span>: transparent;\n    <span class=\"hljs-attribute\">border-right-color</span>: transparent;\n    <span class=\"hljs-attribute\">bottom</span>: -<span class=\"hljs-number\">20px</span>;\n    <span class=\"hljs-attribute\">right</span>: <span class=\"hljs-number\">50%</span>;\n}\n</code></pre><p>￼<img src=\"http://7xvbqa.com1.z0.glb.clouddn.com/qiniu/1466147720772.png\" width=\"183\"/></p>\n<p>初具雏形，甚至可以拿来直接用了，但是如果tooltip背景色和目标背景色重合，那么我么就很难分辨出来了，所以我们需要给它定义个border。</p>\n<ol>\n<li>添加border\ncss:</li>\n</ol>\n<pre><code class=\"hljs lang-css\"><span class=\"hljs-selector-class\">.tooltips</span>{\n    <span class=\"hljs-attribute\">position</span>:relative;\n    <span class=\"hljs-attribute\">width</span>:<span class=\"hljs-number\">300px</span>;\n    <span class=\"hljs-attribute\">height</span>:<span class=\"hljs-number\">80px</span>;\n    <span class=\"hljs-attribute\">line-height</span>:<span class=\"hljs-number\">60px</span>;\n    <span class=\"hljs-attribute\">background</span>:<span class=\"hljs-number\">#D7E7FC</span>;\n    <span class=\"hljs-attribute\">border</span>:<span class=\"hljs-number\">1px</span> solid <span class=\"hljs-number\">#A5C4EC</span>;\n    <span class=\"hljs-attribute\">border-radius</span>:<span class=\"hljs-number\">4px</span>;\n}\n</code></pre><p>￼<img src=\"http://7xvbqa.com1.z0.glb.clouddn.com/qiniu/1466147742384.png\" width=\"186\"/></p>\n<p>盒子有了边框效果，但是下面的小三角还没有被“保护”起来，这对于处女座来说简直是不能容忍的！</p>\n<ol>\n<li>给“小三角穿上松紧带”</li>\n</ol>\n<p>前面在讲解原理时我们已经说过，需要使用两个三角形叠加的方式，首先我们定义两个三角形的div，一个背景色和盒子的边框颜色相同，一个背景色和盒子的背景色一致：</p>\n<pre><code class=\"hljs lang-applescript\">&lt;<span class=\"hljs-keyword\">div</span> <span class=\"hljs-built_in\">class</span>=<span class=\"hljs-string\">\"tooltips\"</span>&gt;\n    &lt;<span class=\"hljs-keyword\">div</span> <span class=\"hljs-built_in\">class</span>=<span class=\"hljs-string\">\"arrow arrow-border\"</span>&gt;&lt;/<span class=\"hljs-keyword\">div</span>&gt;\n    &lt;<span class=\"hljs-keyword\">div</span> <span class=\"hljs-built_in\">class</span>=<span class=\"hljs-string\">\"arrow arrow-bg\"</span>&gt;&lt;/<span class=\"hljs-keyword\">div</span>&gt;\n&lt;/<span class=\"hljs-keyword\">div</span>&gt;\n</code></pre><p>css定义如下：</p>\n<pre><code class=\"hljs lang-css\"><span class=\"hljs-selector-class\">.arrow</span>{\n    <span class=\"hljs-attribute\">position</span>:absolute;\n    <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">0px</span>;\n    <span class=\"hljs-attribute\">height</span>:<span class=\"hljs-number\">0px</span>;\n    <span class=\"hljs-attribute\">line-height</span>: <span class=\"hljs-number\">0px</span>;\n    <span class=\"hljs-attribute\">border-width</span>: <span class=\"hljs-number\">20px</span> <span class=\"hljs-number\">15px</span> <span class=\"hljs-number\">0</span>;\n    <span class=\"hljs-attribute\">border-style</span>: solid dashed dashed dashed;\n    <span class=\"hljs-attribute\">border-left-color</span>: transparent;\n    <span class=\"hljs-attribute\">border-right-color</span>: transparent;\n}\n<span class=\"hljs-selector-class\">.arrow-border</span>{\n    <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#A5C4EC</span>;\n    <span class=\"hljs-attribute\">bottom</span>: -<span class=\"hljs-number\">20px</span>;\n    <span class=\"hljs-attribute\">right</span>: <span class=\"hljs-number\">50%</span>;\n}\n<span class=\"hljs-selector-class\">.arrow-bg</span>{\n    <span class=\"hljs-attribute\">color</span>: <span class=\"hljs-number\">#D7E7FC</span>;\n    <span class=\"hljs-attribute\">bottom</span>: -<span class=\"hljs-number\">19px</span>;\n    <span class=\"hljs-attribute\">right</span>: <span class=\"hljs-number\">50%</span>;\n}\n</code></pre><p>注意：.arrow-bg和.arrow-border的bottom位置相差为1px（可根据边框宽度调整）两个div的顺序不可颠倒。\n我们来看看最终效果：\n<img src=\"http://7xvbqa.com1.z0.glb.clouddn.com/qiniu/1466147763542.png\" width=\"186\"/>\n￼\nok!大功告成，ie6下跑一下，完全兼容！</p>\n',1,'2016-06-16 15:13:25','2016-06-17 03:21:22',1,0,'\"{\\\"push_sites\\\":[]}\"'),(10545,21,0,3,'font-family的配置','font_family','<h2 id=\"-\">概述</h2>\n<p>CCS属性font-family允许您通过给定一个有先后顺序的，由字体名或者字体族名组成的列表来为选定的元素设置字体。 属性的值用逗号隔开。浏览器会选择列表中第一个该计算机上有安装的字体，或者是通过 @font-face 指定的可以直接下载的字体。</p>\n<h2 id=\"-\">语法</h2>\n<pre><code class=\"hljs lang-scss\"><span class=\"hljs-comment\">/* 一个字体名和一个通用的字体族名 */</span>\n<span class=\"hljs-attribute\">font-family</span>: Gill Sans Extrabold, sans-serif;\n<span class=\"hljs-attribute\">font-family</span>: <span class=\"hljs-string\">\"Goudy Bookletter 1911\"</span>, sans-serif;\n\n<span class=\"hljs-comment\">/* 仅有通用的字体族名 */</span>\n<span class=\"hljs-attribute\">font-family</span>: sans-serif;\n<span class=\"hljs-attribute\">font-family</span>: serif;\n<span class=\"hljs-attribute\">font-family</span>: fantasy;\n<span class=\"hljs-attribute\">font-family</span>: cursive;\n<span class=\"hljs-attribute\">font-family</span>: monospace;\n\n<span class=\"hljs-attribute\">font-family</span>: inherit\n</code></pre><h2 id=\"-\">取值</h2>\n<p><family-name>\n一个字体族的名字。例如&quot;Times&quot; 和 &quot;Helvetica&quot; 都是字体族。字体族名可以包含空格，但包含空格时应该用引号。</p>\n<p><generic-name>\n通用字体族名是一种备选机制，用于在指定的字体不可用时给出较好的字体。通用字体族名都是关键字，所以不可以加引号。 在列表的末尾应该至少有一个通用字体族名。 以下是该属性可能的取值以及他们的定义。</p>\n<p><img src=\"http://7xvbqa.com1.z0.glb.clouddn.com/qiniu/1467601626384.png\" width=\"388\"/></p>\n<h2 id=\"-\">有效的字体族名</h2>\n<p>字体族名或者是引号包括的字符串，或者是不含引号的一个或多个合法标识串构成的。这意味着在没有带引号的字体族名的开头是不能使用标点符号字符和数字字符的。</p>\n<p>以下声明是正确的</p>\n<pre><code class=\"hljs lang-scss\"><span class=\"hljs-attribute\">font-family</span>: Gill Sans Extrabold, sans-serif;\n<span class=\"hljs-attribute\">font-family</span>: <span class=\"hljs-string\">\"Goudy Bookletter 1911\"</span>, sans-serif;\n</code></pre><p>以下声明是不正确的</p>\n<pre><code class=\"hljs lang-less\"><span class=\"hljs-attribute\">font-family</span>: Goudy Bookletter <span class=\"hljs-number\">1911</span>, sans-serif;\n<span class=\"hljs-attribute\">font-family</span>: Red/Black, sans-serif;\n<span class=\"hljs-attribute\">font-family</span>: <span class=\"hljs-string\">\"Lucida\"</span> Grande, sans-serif;\n<span class=\"hljs-attribute\">font-family</span>: Ahem!, sans-serif;\n<span class=\"hljs-attribute\">font-family</span>: test<span class=\"hljs-variable\">@foo</span>, sans-serif;\n<span class=\"hljs-attribute\">font-family</span>: #POUND, sans-serif;\n<span class=\"hljs-attribute\">font-family</span>: Hawaii <span class=\"hljs-number\">5</span>-<span class=\"hljs-number\">0</span>, sans-serif;\n</code></pre><h2 id=\"-\">标准语法</h2>\n<pre><code class=\"hljs lang-dts\">如何阅读 CSS 语法。\n[ <span class=\"hljs-params\">&lt;family-name&gt;</span> | <span class=\"hljs-params\">&lt;generic-family&gt;</span> ]<span class=\"hljs-meta\">#</span>\nwhere \n<span class=\"hljs-params\">&lt;family-name&gt;</span> = <span class=\"hljs-params\">&lt;string&gt;</span> | <span class=\"hljs-params\">&lt;IDENT&gt;</span>+\n<span class=\"hljs-params\">&lt;generic-family&gt;</span> = serif | sans-serif | cursive | fantasy | monospace\n</code></pre><hr>\n<h2 id=\"-5b8b-4f53-\">特殊情况，\\5b8b\\4f53的意思</h2>\n<p>\\5b8b\\4f53的意思是宋体</p>\n<p><strong>在IE9会遇见写的DIVCSS网页，文字有时不能垂直居中，究竟IE9 line-height设置文字不能垂直居中原因是什么？</strong>\nIE9不支持line-height原因：中文ie9不支持英文字体，相信大家在IE9看见自己使用<code>line-height</code>设置垂直居中文字不能垂直居中，这是与你设置字体有关，通常大家习惯设置<code>font-family:Arial, Helvetica, sans-serif;</code></p>\n<p>ie9中<code>line-height</code>失效解决方法：\n只需设置好字体，添加个宋体即可解决 如CSS代码<code>font-family:Arial, &quot;宋体&quot;,Helvetica, sans-serif;</code>\n设置字体时候注意，还需设置大家都默认系统自带字体，如黑体，宋体。\n在中文IE9中不认英文字体，所以IE9找不到设置中文字体，所以对导致字体上下垂直失效。\n试了一下改成：<code>font:12px/1.5 arial,“Sim sun”,helvetica,sans-serif;</code>也可以OK\n补充：按着<code>font:12px/1.5 arial,“Sim sun”,helvetica,sans-serif;</code>这个写法，有同学反馈mac下网页的字体由原来默认的细黑体和黑体，被宋体替换，这样浏览的效果很不爽。\n解决文字：把&quot;Sim sun&quot; 改成 unicode格式即：\\5b8b\\4f53。\n最后：<code>font:12px/1.5 arial,\\5b8b\\4f53,helvetica,sans-serif;</code>\n整理几个常用字体的unicode表示</p>\n<ul>\n<li>新细明体 \\65b0\\7ec6\\660e\\4f53</li>\n<li>细明体 \\7ec6\\660e\\4f53</li>\n<li>标楷体 \\6807\\6977\\4f53</li>\n<li>黑体 \\9ed1\\4f53</li>\n<li>宋体 \\5b8b\\4f53</li>\n<li>新宋体 \\65b0\\5b8b\\4f53</li>\n<li>仿宋 \\4eff\\5b8b</li>\n<li>楷体 \\6977\\4f53</li>\n<li>仿宋_gb2312 \\4eff\\5b8b_gb2312</li>\n</ul>\n','## 概述\nCCS属性font-family允许您通过给定一个有先后顺序的，由字体名或者字体族名组成的列表来为选定的元素设置字体。 属性的值用逗号隔开。浏览器会选择列表中第一个该计算机上有安装的字体，或者是通过 @font-face 指定的可以直接下载的字体。\n\n## 语法\n\n```\n/* 一个字体名和一个通用的字体族名 */\nfont-family: Gill Sans Extrabold, sans-serif;\nfont-family: \"Goudy Bookletter 1911\", sans-serif;\n\n/* 仅有通用的字体族名 */\nfont-family: sans-serif;\nfont-family: serif;\nfont-family: fantasy;\nfont-family: cursive;\nfont-family: monospace;\n\nfont-family: inherit\n```\n\n## 取值\n<family-name>\n一个字体族的名字。例如\"Times\" 和 \"Helvetica\" 都是字体族。字体族名可以包含空格，但包含空格时应该用引号。\n<generic-name>\n通用字体族名是一种备选机制，用于在指定的字体不可用时给出较好的字体。通用字体族名都是关键字，所以不可以加引号。 在列表的末尾应该至少有一个通用字体族名。 以下是该属性可能的取值以及他们的定义。\n\n<img src=\"http://7xvbqa.com1.z0.glb.clouddn.com/qiniu/1467601626384.png\" width=\"388\"/>\n\n## 有效的字体族名\n\n字体族名或者是引号包括的字符串，或者是不含引号的一个或多个合法标识串构成的。这意味着在没有带引号的字体族名的开头是不能使用标点符号字符和数字字符的。\n\n以下声明是正确的\n\n```\nfont-family: Gill Sans Extrabold, sans-serif;\nfont-family: \"Goudy Bookletter 1911\", sans-serif;\n```\n\n以下声明是不正确的\n\n```\nfont-family: Goudy Bookletter 1911, sans-serif;\nfont-family: Red/Black, sans-serif;\nfont-family: \"Lucida\" Grande, sans-serif;\nfont-family: Ahem!, sans-serif;\nfont-family: test@foo, sans-serif;\nfont-family: #POUND, sans-serif;\nfont-family: Hawaii 5-0, sans-serif;\n```\n\n## 标准语法\n\n```\n如何阅读 CSS 语法。\n[ <family-name> | <generic-family> ]#\nwhere \n<family-name> = <string> | <IDENT>+\n<generic-family> = serif | sans-serif | cursive | fantasy | monospace\n```\n***\n## 特殊情况，\\5b8b\\4f53的意思\n\n\\5b8b\\4f53的意思是宋体\n\n__在IE9会遇见写的DIVCSS网页，文字有时不能垂直居中，究竟IE9 line-height设置文字不能垂直居中原因是什么？__\nIE9不支持line-height原因：中文ie9不支持英文字体，相信大家在IE9看见自己使用`line-height`设置垂直居中文字不能垂直居中，这是与你设置字体有关，通常大家习惯设置`font-family:Arial, Helvetica, sans-serif;`\n\nie9中`line-height`失效解决方法：\n只需设置好字体，添加个宋体即可解决 如CSS代码`font-family:Arial, \"宋体\",Helvetica, sans-serif;`\n设置字体时候注意，还需设置大家都默认系统自带字体，如黑体，宋体。\n在中文IE9中不认英文字体，所以IE9找不到设置中文字体，所以对导致字体上下垂直失效。\n试了一下改成：`font:12px/1.5 arial,“Sim sun”,helvetica,sans-serif;`也可以OK\n补充：按着`font:12px/1.5 arial,“Sim sun”,helvetica,sans-serif;`这个写法，有同学反馈mac下网页的字体由原来默认的细黑体和黑体，被宋体替换，这样浏览的效果很不爽。\n解决文字：把\"Sim sun\" 改成 unicode格式即：\\5b8b\\4f53。\n最后：`font:12px/1.5 arial,\\5b8b\\4f53,helvetica,sans-serif;`\n整理几个常用字体的unicode表示\n\n* 新细明体 \\65b0\\7ec6\\660e\\4f53\n* 细明体 \\7ec6\\660e\\4f53\n* 标楷体 \\6807\\6977\\4f53\n* 黑体 \\9ed1\\4f53\n* 宋体 \\5b8b\\4f53\n* 新宋体 \\65b0\\5b8b\\4f53\n* 仿宋 \\4eff\\5b8b\n* 楷体 \\6977\\4f53\n* 仿宋_gb2312 \\4eff\\5b8b_gb2312\n\n','<h2 id=\"-\">概述</h2>\n<p>CCS属性font-family允许您通过给定一个有先后顺序的，由字体名或者字体族名组成的列表来为选定的元素设置字体。 属性的值用逗号隔开。浏览器会选择列表中第一个该计算机上有安装的字体，或者是通过 @font-face 指定的可以直接下载的字体。</p>\n<h2 id=\"-\">语法</h2>\n<pre><code class=\"hljs lang-scss\"><span class=\"hljs-comment\">/* 一个字体名和一个通用的字体族名 */</span>\n<span class=\"hljs-attribute\">font-family</span>: Gill Sans Extrabold, sans-serif;\n<span class=\"hljs-attribute\">font-family</span>: <span class=\"hljs-string\">\"Goudy Bookletter 1911\"</span>, sans-serif;\n\n<span class=\"hljs-comment\">/* 仅有通用的字体族名 */</span>\n<span class=\"hljs-attribute\">font-family</span>: sans-serif;\n<span class=\"hljs-attribute\">font-family</span>: serif;\n<span class=\"hljs-attribute\">font-family</span>: fantasy;\n<span class=\"hljs-attribute\">font-family</span>: cursive;\n<span class=\"hljs-attribute\">font-family</span>: monospace;\n\n<span class=\"hljs-attribute\">font-family</span>: inherit\n</code></pre><h2 id=\"-\">取值</h2>\n<p><family-name>\n一个字体族的名字。例如&quot;Times&quot; 和 &quot;Helvetica&quot; 都是字体族。字体族名可以包含空格，但包含空格时应该用引号。</p>\n<p><generic-name>\n通用字体族名是一种备选机制，用于在指定的字体不可用时给出较好的字体。通用字体族名都是关键字，所以不可以加引号。 在列表的末尾应该至少有一个通用字体族名。 以下是该属性可能的取值以及他们的定义。</p>\n<p><img src=\"http://7xvbqa.com1.z0.glb.clouddn.com/qiniu/1467601626384.png\" width=\"388\"/></p>\n<h2 id=\"-\">有效的字体族名</h2>\n<p>字体族名或者是引号包括的字符串，或者是不含引号的一个或多个合法标识串构成的。这意味着在没有带引号的字体族名的开头是不能使用标点符号字符和数字字符的。</p>\n<p>以下声明是正确的</p>\n<pre><code class=\"hljs lang-scss\"><span class=\"hljs-attribute\">font-family</span>: Gill Sans Extrabold, sans-serif;\n<span class=\"hljs-attribute\">font-family</span>: <span class=\"hljs-string\">\"Goudy Bookletter 1911\"</span>, sans-serif;\n</code></pre><p>以下声明是不正确的</p>\n<pre><code class=\"hljs lang-less\"><span class=\"hljs-attribute\">font-family</span>: Goudy Bookletter <span class=\"hljs-number\">1911</span>, sans-serif;\n<span class=\"hljs-attribute\">font-family</span>: Red/Black, sans-serif;\n<span class=\"hljs-attribute\">font-family</span>: <span class=\"hljs-string\">\"Lucida\"</span> Grande, sans-serif;\n<span class=\"hljs-attribute\">font-family</span>: Ahem!, sans-serif;\n<span class=\"hljs-attribute\">font-family</span>: test<span class=\"hljs-variable\">@foo</span>, sans-serif;\n<span class=\"hljs-attribute\">font-family</span>: #POUND, sans-serif;\n<span class=\"hljs-attribute\">font-family</span>: Hawaii <span class=\"hljs-number\">5</span>-<span class=\"hljs-number\">0</span>, sans-serif;\n</code></pre><h2 id=\"-\">标准语法</h2>\n<pre><code class=\"hljs lang-dts\">如何阅读 CSS 语法。\n[ <span class=\"hljs-params\">&lt;family-name&gt;</span> | <span class=\"hljs-params\">&lt;generic-family&gt;</span> ]<span class=\"hljs-meta\">#</span>\nwhere \n<span class=\"hljs-params\">&lt;family-name&gt;</span> = <span class=\"hljs-params\">&lt;string&gt;</span> | <span class=\"hljs-params\">&lt;IDENT&gt;</span>+\n<span class=\"hljs-params\">&lt;generic-family&gt;</span> = serif | sans-serif | cursive | fantasy | monospace\n</code></pre><hr>\n<h2 id=\"-5b8b-4f53-\">特殊情况，\\5b8b\\4f53的意思</h2>\n<p>\\5b8b\\4f53的意思是宋体</p>\n<p><strong>在IE9会遇见写的DIVCSS网页，文字有时不能垂直居中，究竟IE9 line-height设置文字不能垂直居中原因是什么？</strong>\nIE9不支持line-height原因：中文ie9不支持英文字体，相信大家在IE9看见自己使用<code>line-height</code>设置垂直居中文字不能垂直居中，这是与你设置字体有关，通常大家习惯设置<code>font-family:Arial, Helvetica, sans-serif;</code></p>\n<p>ie9中<code>line-height</code>失效解决方法：\n只需设置好字体，添加个宋体即可解决 如CSS代码<code>font-family:Arial, &quot;宋体&quot;,Helvetica, sans-serif;</code>\n设置字体时候注意，还需设置大家都默认系统自带字体，如黑体，宋体。\n在中文IE9中不认英文字体，所以IE9找不到设置中文字体，所以对导致字体上下垂直失效。\n试了一下改成：<code>font:12px/1.5 arial,“Sim sun”,helvetica,sans-serif;</code>也可以OK\n补充：按着<code>font:12px/1.5 arial,“Sim sun”,helvetica,sans-serif;</code>这个写法，有同学反馈mac下网页的字体由原来默认的细黑体和黑体，被宋体替换，这样浏览的效果很不爽。\n解决文字：把&quot;Sim sun&quot; 改成 unicode格式即：\\5b8b\\4f53。\n最后：<code>font:12px/1.5 arial,\\5b8b\\4f53,helvetica,sans-serif;</code>\n整理几个常用字体的unicode表示</p>\n<ul>\n<li>新细明体 \\65b0\\7ec6\\660e\\4f53</li>\n<li>细明体 \\7ec6\\660e\\4f53</li>\n<li>标楷体 \\6807\\6977\\4f53</li>\n<li>黑体 \\9ed1\\4f53</li>\n<li>宋体 \\5b8b\\4f53</li>\n<li>新宋体 \\65b0\\5b8b\\4f53</li>\n<li>仿宋 \\4eff\\5b8b</li>\n<li>楷体 \\6977\\4f53</li>\n<li>仿宋_gb2312 \\4eff\\5b8b_gb2312</li>\n</ul>\n',1,'2016-07-03 11:19:26','2016-07-03 23:24:56',1,0,'\"{\\\"push_sites\\\":[]}\"'),(10546,21,0,3,'nginx配置','nginx','<h2 id=\"-\">问题：</h2>\n<p>当安装完nginx后，我们要使用service nginx start来启动nginx服务，输入命令之后我们发现会出现如下错误 nginx：未被识别的服务</p>\n<h2 id=\"-\">解决</h2>\n<p>这个报错的意思就是nginx的启动项没有放到/etc/init.d/（类似与windows中的注册表）中。如下就是解决的办法：</p>\n<ol>\n<li><code>vim /etc/init.d/nginx #创建nginx的启动，停止，重启的脚本，需要添加如下内容。</code></li>\n</ol>\n<pre><code class=\"hljs lang-bash\"><span class=\"hljs-meta\">#!/bin/sh</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># nginx - this script starts and stops the nginx daemon</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># chkconfig:   - 85 15</span>\n<span class=\"hljs-comment\"># description:  Nginx is an HTTP(S) server, HTTP(S) reverse \\</span>\n<span class=\"hljs-comment\">#               proxy and IMAP/POP3 proxy server</span>\n<span class=\"hljs-comment\"># processname: nginx</span>\n<span class=\"hljs-comment\"># config:      /etc/nginx/nginx.conf</span>\n<span class=\"hljs-comment\"># config:      /etc/sysconfig/nginx</span>\n<span class=\"hljs-comment\"># pidfile:     /var/run/nginx.pid</span>\n\n<span class=\"hljs-comment\"># Source function library.</span>\n. /etc/rc.d/init.d/<span class=\"hljs-built_in\">functions</span>\n\n<span class=\"hljs-comment\"># Source networking configuration.</span>\n. /etc/sysconfig/network\n\n<span class=\"hljs-comment\"># Check that networking is up.</span>\n[ <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$NETWORKING</span>\"</span> = <span class=\"hljs-string\">\"no\"</span> ] &amp;&amp; <span class=\"hljs-built_in\">exit</span> 0\n\nnginx=<span class=\"hljs-string\">\"/usr/sbin/nginx\"</span>\nprog=$(basename <span class=\"hljs-variable\">$nginx</span>)\n\nNGINX_CONF_FILE=<span class=\"hljs-string\">\"/etc/nginx/nginx.conf\"</span>\n\n[ <span class=\"hljs-_\">-f</span> /etc/sysconfig/nginx ] &amp;&amp; . /etc/sysconfig/nginx\n\nlockfile=/var/lock/subsys/nginx\n\n<span class=\"hljs-function\"><span class=\"hljs-title\">start</span></span>() {\n    [ -x <span class=\"hljs-variable\">$nginx</span> ] || <span class=\"hljs-built_in\">exit</span> 5\n    [ <span class=\"hljs-_\">-f</span> <span class=\"hljs-variable\">$NGINX_CONF_FILE</span> ] || <span class=\"hljs-built_in\">exit</span> 6\n    <span class=\"hljs-built_in\">echo</span> -n $<span class=\"hljs-string\">\"Starting <span class=\"hljs-variable\">$prog</span>: \"</span>\n    daemon <span class=\"hljs-variable\">$nginx</span> -c <span class=\"hljs-variable\">$NGINX_CONF_FILE</span>\n    retval=$?\n    <span class=\"hljs-built_in\">echo</span>\n    [ <span class=\"hljs-variable\">$retval</span> <span class=\"hljs-_\">-eq</span> 0 ] &amp;&amp; touch <span class=\"hljs-variable\">$lockfile</span>\n    <span class=\"hljs-built_in\">return</span> <span class=\"hljs-variable\">$retval</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-title\">stop</span></span>() {\n    <span class=\"hljs-built_in\">echo</span> -n $<span class=\"hljs-string\">\"Stopping <span class=\"hljs-variable\">$prog</span>: \"</span>\n    killproc <span class=\"hljs-variable\">$prog</span> -TERM\n    retval=$?\n    <span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-variable\">$retval</span> <span class=\"hljs-_\">-eq</span> 0 ]; <span class=\"hljs-keyword\">then</span>\n        <span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$CONSOLETYPE</span>\"</span> != <span class=\"hljs-string\">\"serial\"</span> ]; <span class=\"hljs-keyword\">then</span>\n           <span class=\"hljs-built_in\">echo</span> -en <span class=\"hljs-string\">\"\\\\033[16G\"</span>\n        <span class=\"hljs-keyword\">fi</span>\n        <span class=\"hljs-keyword\">while</span> rh_status_q\n        <span class=\"hljs-keyword\">do</span>\n            sleep 1\n            <span class=\"hljs-built_in\">echo</span> -n $<span class=\"hljs-string\">\".\"</span>\n        <span class=\"hljs-keyword\">done</span>\n        rm <span class=\"hljs-_\">-f</span> <span class=\"hljs-variable\">$lockfile</span>\n    <span class=\"hljs-keyword\">fi</span>\n    <span class=\"hljs-built_in\">echo</span>\n    <span class=\"hljs-built_in\">return</span> <span class=\"hljs-variable\">$retval</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-title\">restart</span></span>() {\n    configtest || <span class=\"hljs-built_in\">return</span> $?\n    stop\n    start\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-title\">reload</span></span>() {\n    configtest || <span class=\"hljs-built_in\">return</span> $?\n    <span class=\"hljs-built_in\">echo</span> -n $<span class=\"hljs-string\">\"Reloading <span class=\"hljs-variable\">$prog</span>: \"</span>\n    killproc <span class=\"hljs-variable\">$nginx</span> -HUP\n    sleep 1\n    RETVAL=$?\n    <span class=\"hljs-built_in\">echo</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-title\">configtest</span></span>() {\n  <span class=\"hljs-variable\">$nginx</span> -t -c <span class=\"hljs-variable\">$NGINX_CONF_FILE</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-title\">rh_status</span></span>() {\n    status <span class=\"hljs-variable\">$prog</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-title\">rh_status_q</span></span>() {\n    rh_status &gt;/dev/null 2&gt;&amp;1\n}\n\n<span class=\"hljs-comment\"># Upgrade the binary with no downtime.</span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">upgrade</span></span>() {\n    <span class=\"hljs-built_in\">local</span> pidfile=<span class=\"hljs-string\">\"/var/run/<span class=\"hljs-variable\">${prog}</span>.pid\"</span>\n    <span class=\"hljs-built_in\">local</span> oldbin_pidfile=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${pidfile}</span>.oldbin\"</span>\n\n    configtest || <span class=\"hljs-built_in\">return</span> $?\n    <span class=\"hljs-built_in\">echo</span> -n $<span class=\"hljs-string\">\"Staring new master <span class=\"hljs-variable\">$prog</span>: \"</span>\n    killproc <span class=\"hljs-variable\">$nginx</span> -USR2\n    sleep 1\n    retval=$?\n    <span class=\"hljs-built_in\">echo</span> \n    <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-_\">-f</span> <span class=\"hljs-variable\">${oldbin_pidfile}</span> &amp;&amp; <span class=\"hljs-_\">-f</span> <span class=\"hljs-variable\">${pidfile}</span> ]];  <span class=\"hljs-keyword\">then</span>\n        <span class=\"hljs-built_in\">echo</span> -n $<span class=\"hljs-string\">\"Graceful shutdown of old <span class=\"hljs-variable\">$prog</span>: \"</span>\n        killproc -p <span class=\"hljs-variable\">${oldbin_pidfile}</span> -TERM\n        sleep 1\n        retval=$?\n        <span class=\"hljs-built_in\">echo</span> \n        <span class=\"hljs-built_in\">return</span> 0\n    <span class=\"hljs-keyword\">else</span>\n        <span class=\"hljs-built_in\">echo</span> $<span class=\"hljs-string\">\"Something bad happened, manual intervention required, maybe restart?\"</span>\n        <span class=\"hljs-built_in\">return</span> 1\n    <span class=\"hljs-keyword\">fi</span>\n}\n\n<span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$1</span>\"</span> <span class=\"hljs-keyword\">in</span>\n    start)\n        rh_status_q &amp;&amp; <span class=\"hljs-built_in\">exit</span> 0\n        <span class=\"hljs-variable\">$1</span>\n        ;;\n    stop)\n        rh_status_q || <span class=\"hljs-built_in\">exit</span> 0\n        <span class=\"hljs-variable\">$1</span>\n        ;;\n    restart|configtest)\n        <span class=\"hljs-variable\">$1</span>\n        ;;\n    force-reload|upgrade) \n        rh_status_q || <span class=\"hljs-built_in\">exit</span> 7\n        upgrade\n        ;;\n    reload)\n        rh_status_q || <span class=\"hljs-built_in\">exit</span> 7\n        <span class=\"hljs-variable\">$1</span>\n        ;;\n    status|status_q)\n        rh_<span class=\"hljs-variable\">$1</span>\n        ;;\n    condrestart|try-restart)\n        rh_status_q || <span class=\"hljs-built_in\">exit</span> 7\n        restart\n        ;;\n    *)\n        <span class=\"hljs-built_in\">echo</span> $<span class=\"hljs-string\">\"Usage: <span class=\"hljs-variable\">$0</span> {start|stop|reload|configtest|status|force-reload|upgrade|restart}\"</span>\n        <span class=\"hljs-built_in\">exit</span> 2\n<span class=\"hljs-keyword\">esac</span>\n</code></pre><blockquote>\n<p>其中nginx和NGINX_CONF_FILE需要分别配置为nginx的执行路径和配置路径</p>\n</blockquote>\n<p> 保存并退出</p>\n<ol>\n<li><p>chmod +x /etc/init.d/nginx #给予相关的权限</p>\n</li>\n<li><p>/sbin/chkconfig nginx on #添加到开机启动</p>\n</li>\n<li><p>/sbin/chkconfig --list nginx 查看开机启动菜单</p>\n</li>\n<li><p>如上操作之后就可以使用service nginx start,service nginx stop,service nginx restart等命令</p>\n</li>\n</ol>\n<hr>\n<h2 id=\"-nginx-\">附上nginx配置</h2>\n<pre><code class=\"hljs lang-bash\">nginx.conf\nserver {\n    listen 80;\n    server_name westpsk.com;\n    location / {\n        proxy_pass_header Server;\n        proxy_<span class=\"hljs-built_in\">set</span>_header X-Real-IP <span class=\"hljs-variable\">$remote_addr</span>;\n        proxy_<span class=\"hljs-built_in\">set</span>_header Host <span class=\"hljs-variable\">$http_host</span>;\n        proxy_<span class=\"hljs-built_in\">set</span>_header X-Scheme <span class=\"hljs-variable\">$scheme</span>;\n        proxy_pass http://127.0.0.1:8360;\n    }\n}\n</code></pre><h2 id=\"apache-\">apache命令</h2>\n<pre><code class=\"hljs lang-crmsh\">service httpd <span class=\"hljs-literal\">start</span> 启动\nservice httpd restart 重新启动\nservice httpd <span class=\"hljs-literal\">stop</span> 停止服务\n</code></pre><h2 id=\"nginx-\">nginx命令</h2>\n<pre><code class=\"hljs lang-crmsh\">service nginx <span class=\"hljs-literal\">start</span> 启动\nservice nginx restart 重新启动\nservice nginx <span class=\"hljs-literal\">stop</span> 停止服务\n</code></pre><p>或者下面这种</p>\n<pre><code class=\"hljs lang-dts\"><span class=\"hljs-meta-keyword\">/usr/</span>local<span class=\"hljs-meta-keyword\">/webserver/</span>nginx<span class=\"hljs-meta-keyword\">/sbin/</span>nginx -s reload         <span class=\"hljs-meta\"># 重新载入配置文件</span>\n<span class=\"hljs-meta-keyword\">/usr/</span>local<span class=\"hljs-meta-keyword\">/webserver/</span>nginx<span class=\"hljs-meta-keyword\">/sbin/</span>nginx -s reopen        <span class=\"hljs-meta\"># 重启 Nginx</span>\n<span class=\"hljs-meta-keyword\">/usr/</span>local<span class=\"hljs-meta-keyword\">/webserver/</span>nginx<span class=\"hljs-meta-keyword\">/sbin/</span>nginx -s stop            <span class=\"hljs-meta\"># 停止 Nginx</span>\n</code></pre>','## 问题：\n当安装完nginx后，我们要使用service nginx start来启动nginx服务，输入命令之后我们发现会出现如下错误 nginx：未被识别的服务\n\n## 解决\n这个报错的意思就是nginx的启动项没有放到/etc/init.d/（类似与windows中的注册表）中。如下就是解决的办法：\n1. `vim /etc/init.d/nginx #创建nginx的启动，停止，重启的脚本，需要添加如下内容。`\n\n```\n#!/bin/sh\n#\n# nginx - this script starts and stops the nginx daemon\n#\n# chkconfig:   - 85 15\n# description:  Nginx is an HTTP(S) server, HTTP(S) reverse \\\n#               proxy and IMAP/POP3 proxy server\n# processname: nginx\n# config:      /etc/nginx/nginx.conf\n# config:      /etc/sysconfig/nginx\n# pidfile:     /var/run/nginx.pid\n \n# Source function library.\n. /etc/rc.d/init.d/functions\n \n# Source networking configuration.\n. /etc/sysconfig/network\n \n# Check that networking is up.\n[ \"$NETWORKING\" = \"no\" ] && exit 0\n \nnginx=\"/usr/sbin/nginx\"\nprog=$(basename $nginx)\n \nNGINX_CONF_FILE=\"/etc/nginx/nginx.conf\"\n \n[ -f /etc/sysconfig/nginx ] && . /etc/sysconfig/nginx\n \nlockfile=/var/lock/subsys/nginx\n \nstart() {\n    [ -x $nginx ] || exit 5\n    [ -f $NGINX_CONF_FILE ] || exit 6\n    echo -n $\"Starting $prog: \"\n    daemon $nginx -c $NGINX_CONF_FILE\n    retval=$?\n    echo\n    [ $retval -eq 0 ] && touch $lockfile\n    return $retval\n}\n \nstop() {\n    echo -n $\"Stopping $prog: \"\n    killproc $prog -TERM\n    retval=$?\n    if [ $retval -eq 0 ]; then\n        if [ \"$CONSOLETYPE\" != \"serial\" ]; then\n           echo -en \"\\\\033[16G\"\n        fi\n        while rh_status_q\n        do\n            sleep 1\n            echo -n $\".\"\n        done\n        rm -f $lockfile\n    fi\n    echo\n    return $retval\n}\n \nrestart() {\n    configtest || return $?\n    stop\n    start\n}\n \nreload() {\n    configtest || return $?\n    echo -n $\"Reloading $prog: \"\n    killproc $nginx -HUP\n    sleep 1\n    RETVAL=$?\n    echo\n}\n \nconfigtest() {\n  $nginx -t -c $NGINX_CONF_FILE\n}\n \nrh_status() {\n    status $prog\n}\n \nrh_status_q() {\n    rh_status >/dev/null 2>&1\n}\n \n# Upgrade the binary with no downtime.\nupgrade() {\n    local pidfile=\"/var/run/${prog}.pid\"\n    local oldbin_pidfile=\"${pidfile}.oldbin\"\n \n    configtest || return $?\n    echo -n $\"Staring new master $prog: \"\n    killproc $nginx -USR2\n    sleep 1\n    retval=$?\n    echo \n    if [[ -f ${oldbin_pidfile} && -f ${pidfile} ]];  then\n        echo -n $\"Graceful shutdown of old $prog: \"\n        killproc -p ${oldbin_pidfile} -TERM\n        sleep 1\n        retval=$?\n        echo \n        return 0\n    else\n        echo $\"Something bad happened, manual intervention required, maybe restart?\"\n        return 1\n    fi\n}\n \ncase \"$1\" in\n    start)\n        rh_status_q && exit 0\n        $1\n        ;;\n    stop)\n        rh_status_q || exit 0\n        $1\n        ;;\n    restart|configtest)\n        $1\n        ;;\n    force-reload|upgrade) \n        rh_status_q || exit 7\n        upgrade\n        ;;\n    reload)\n        rh_status_q || exit 7\n        $1\n        ;;\n    status|status_q)\n        rh_$1\n        ;;\n    condrestart|try-restart)\n        rh_status_q || exit 7\n        restart\n        ;;\n    *)\n        echo $\"Usage: $0 {start|stop|reload|configtest|status|force-reload|upgrade|restart}\"\n        exit 2\nesac\n```\n> 其中nginx和NGINX_CONF_FILE需要分别配置为nginx的执行路径和配置路径\n\n 保存并退出\n\n2. chmod +x /etc/init.d/nginx #给予相关的权限\n\n3. /sbin/chkconfig nginx on #添加到开机启动\n \n4. /sbin/chkconfig --list nginx 查看开机启动菜单\n\n5. 如上操作之后就可以使用service nginx start,service nginx stop,service nginx restart等命令\n\n***\n\n## 附上nginx配置\n\n```\nnginx.conf\nserver {\n    listen 80;\n    server_name westpsk.com;\n    location / {\n        proxy_pass_header Server;\n        proxy_set_header X-Real-IP $remote_addr;\n        proxy_set_header Host $http_host;\n        proxy_set_header X-Scheme $scheme;\n        proxy_pass http://127.0.0.1:8360;\n    }\n}\n```\n\n## apache命令\n```\nservice httpd start 启动\nservice httpd restart 重新启动\nservice httpd stop 停止服务\n```\n\n## nginx命令\n```\nservice nginx start 启动\nservice nginx restart 重新启动\nservice nginx stop 停止服务\n```\n或者下面这种\n```\n/usr/local/webserver/nginx/sbin/nginx -s reload         # 重新载入配置文件\n/usr/local/webserver/nginx/sbin/nginx -s reopen        # 重启 Nginx\n/usr/local/webserver/nginx/sbin/nginx -s stop            # 停止 Nginx\n```','<h2 id=\"-\">问题：</h2>\n<p>当安装完nginx后，我们要使用service nginx start来启动nginx服务，输入命令之后我们发现会出现如下错误 nginx：未被识别的服务</p>\n<h2 id=\"-\">解决</h2>\n<p>这个报错的意思就是nginx的启动项没有放到/etc/init.d/（类似与windows中的注册表）中。如下就是解决的办法：</p>\n<ol>\n<li><code>vim /etc/init.d/nginx #创建nginx的启动，停止，重启的脚本，需要添加如下内容。</code></li>\n</ol>\n<pre><code class=\"hljs lang-bash\"><span class=\"hljs-meta\">#!/bin/sh</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># nginx - this script starts and stops the nginx daemon</span>\n<span class=\"hljs-comment\">#</span>\n<span class=\"hljs-comment\"># chkconfig:   - 85 15</span>\n<span class=\"hljs-comment\"># description:  Nginx is an HTTP(S) server, HTTP(S) reverse \\</span>\n<span class=\"hljs-comment\">#               proxy and IMAP/POP3 proxy server</span>\n<span class=\"hljs-comment\"># processname: nginx</span>\n<span class=\"hljs-comment\"># config:      /etc/nginx/nginx.conf</span>\n<span class=\"hljs-comment\"># config:      /etc/sysconfig/nginx</span>\n<span class=\"hljs-comment\"># pidfile:     /var/run/nginx.pid</span>\n\n<span class=\"hljs-comment\"># Source function library.</span>\n. /etc/rc.d/init.d/<span class=\"hljs-built_in\">functions</span>\n\n<span class=\"hljs-comment\"># Source networking configuration.</span>\n. /etc/sysconfig/network\n\n<span class=\"hljs-comment\"># Check that networking is up.</span>\n[ <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$NETWORKING</span>\"</span> = <span class=\"hljs-string\">\"no\"</span> ] &amp;&amp; <span class=\"hljs-built_in\">exit</span> 0\n\nnginx=<span class=\"hljs-string\">\"/usr/sbin/nginx\"</span>\nprog=$(basename <span class=\"hljs-variable\">$nginx</span>)\n\nNGINX_CONF_FILE=<span class=\"hljs-string\">\"/etc/nginx/nginx.conf\"</span>\n\n[ <span class=\"hljs-_\">-f</span> /etc/sysconfig/nginx ] &amp;&amp; . /etc/sysconfig/nginx\n\nlockfile=/var/lock/subsys/nginx\n\n<span class=\"hljs-function\"><span class=\"hljs-title\">start</span></span>() {\n    [ -x <span class=\"hljs-variable\">$nginx</span> ] || <span class=\"hljs-built_in\">exit</span> 5\n    [ <span class=\"hljs-_\">-f</span> <span class=\"hljs-variable\">$NGINX_CONF_FILE</span> ] || <span class=\"hljs-built_in\">exit</span> 6\n    <span class=\"hljs-built_in\">echo</span> -n $<span class=\"hljs-string\">\"Starting <span class=\"hljs-variable\">$prog</span>: \"</span>\n    daemon <span class=\"hljs-variable\">$nginx</span> -c <span class=\"hljs-variable\">$NGINX_CONF_FILE</span>\n    retval=$?\n    <span class=\"hljs-built_in\">echo</span>\n    [ <span class=\"hljs-variable\">$retval</span> <span class=\"hljs-_\">-eq</span> 0 ] &amp;&amp; touch <span class=\"hljs-variable\">$lockfile</span>\n    <span class=\"hljs-built_in\">return</span> <span class=\"hljs-variable\">$retval</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-title\">stop</span></span>() {\n    <span class=\"hljs-built_in\">echo</span> -n $<span class=\"hljs-string\">\"Stopping <span class=\"hljs-variable\">$prog</span>: \"</span>\n    killproc <span class=\"hljs-variable\">$prog</span> -TERM\n    retval=$?\n    <span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-variable\">$retval</span> <span class=\"hljs-_\">-eq</span> 0 ]; <span class=\"hljs-keyword\">then</span>\n        <span class=\"hljs-keyword\">if</span> [ <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$CONSOLETYPE</span>\"</span> != <span class=\"hljs-string\">\"serial\"</span> ]; <span class=\"hljs-keyword\">then</span>\n           <span class=\"hljs-built_in\">echo</span> -en <span class=\"hljs-string\">\"\\\\033[16G\"</span>\n        <span class=\"hljs-keyword\">fi</span>\n        <span class=\"hljs-keyword\">while</span> rh_status_q\n        <span class=\"hljs-keyword\">do</span>\n            sleep 1\n            <span class=\"hljs-built_in\">echo</span> -n $<span class=\"hljs-string\">\".\"</span>\n        <span class=\"hljs-keyword\">done</span>\n        rm <span class=\"hljs-_\">-f</span> <span class=\"hljs-variable\">$lockfile</span>\n    <span class=\"hljs-keyword\">fi</span>\n    <span class=\"hljs-built_in\">echo</span>\n    <span class=\"hljs-built_in\">return</span> <span class=\"hljs-variable\">$retval</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-title\">restart</span></span>() {\n    configtest || <span class=\"hljs-built_in\">return</span> $?\n    stop\n    start\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-title\">reload</span></span>() {\n    configtest || <span class=\"hljs-built_in\">return</span> $?\n    <span class=\"hljs-built_in\">echo</span> -n $<span class=\"hljs-string\">\"Reloading <span class=\"hljs-variable\">$prog</span>: \"</span>\n    killproc <span class=\"hljs-variable\">$nginx</span> -HUP\n    sleep 1\n    RETVAL=$?\n    <span class=\"hljs-built_in\">echo</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-title\">configtest</span></span>() {\n  <span class=\"hljs-variable\">$nginx</span> -t -c <span class=\"hljs-variable\">$NGINX_CONF_FILE</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-title\">rh_status</span></span>() {\n    status <span class=\"hljs-variable\">$prog</span>\n}\n\n<span class=\"hljs-function\"><span class=\"hljs-title\">rh_status_q</span></span>() {\n    rh_status &gt;/dev/null 2&gt;&amp;1\n}\n\n<span class=\"hljs-comment\"># Upgrade the binary with no downtime.</span>\n<span class=\"hljs-function\"><span class=\"hljs-title\">upgrade</span></span>() {\n    <span class=\"hljs-built_in\">local</span> pidfile=<span class=\"hljs-string\">\"/var/run/<span class=\"hljs-variable\">${prog}</span>.pid\"</span>\n    <span class=\"hljs-built_in\">local</span> oldbin_pidfile=<span class=\"hljs-string\">\"<span class=\"hljs-variable\">${pidfile}</span>.oldbin\"</span>\n\n    configtest || <span class=\"hljs-built_in\">return</span> $?\n    <span class=\"hljs-built_in\">echo</span> -n $<span class=\"hljs-string\">\"Staring new master <span class=\"hljs-variable\">$prog</span>: \"</span>\n    killproc <span class=\"hljs-variable\">$nginx</span> -USR2\n    sleep 1\n    retval=$?\n    <span class=\"hljs-built_in\">echo</span> \n    <span class=\"hljs-keyword\">if</span> [[ <span class=\"hljs-_\">-f</span> <span class=\"hljs-variable\">${oldbin_pidfile}</span> &amp;&amp; <span class=\"hljs-_\">-f</span> <span class=\"hljs-variable\">${pidfile}</span> ]];  <span class=\"hljs-keyword\">then</span>\n        <span class=\"hljs-built_in\">echo</span> -n $<span class=\"hljs-string\">\"Graceful shutdown of old <span class=\"hljs-variable\">$prog</span>: \"</span>\n        killproc -p <span class=\"hljs-variable\">${oldbin_pidfile}</span> -TERM\n        sleep 1\n        retval=$?\n        <span class=\"hljs-built_in\">echo</span> \n        <span class=\"hljs-built_in\">return</span> 0\n    <span class=\"hljs-keyword\">else</span>\n        <span class=\"hljs-built_in\">echo</span> $<span class=\"hljs-string\">\"Something bad happened, manual intervention required, maybe restart?\"</span>\n        <span class=\"hljs-built_in\">return</span> 1\n    <span class=\"hljs-keyword\">fi</span>\n}\n\n<span class=\"hljs-keyword\">case</span> <span class=\"hljs-string\">\"<span class=\"hljs-variable\">$1</span>\"</span> <span class=\"hljs-keyword\">in</span>\n    start)\n        rh_status_q &amp;&amp; <span class=\"hljs-built_in\">exit</span> 0\n        <span class=\"hljs-variable\">$1</span>\n        ;;\n    stop)\n        rh_status_q || <span class=\"hljs-built_in\">exit</span> 0\n        <span class=\"hljs-variable\">$1</span>\n        ;;\n    restart|configtest)\n        <span class=\"hljs-variable\">$1</span>\n        ;;\n    force-reload|upgrade) \n        rh_status_q || <span class=\"hljs-built_in\">exit</span> 7\n        upgrade\n        ;;\n    reload)\n        rh_status_q || <span class=\"hljs-built_in\">exit</span> 7\n        <span class=\"hljs-variable\">$1</span>\n        ;;\n    status|status_q)\n        rh_<span class=\"hljs-variable\">$1</span>\n        ;;\n    condrestart|try-restart)\n        rh_status_q || <span class=\"hljs-built_in\">exit</span> 7\n        restart\n        ;;\n    *)\n        <span class=\"hljs-built_in\">echo</span> $<span class=\"hljs-string\">\"Usage: <span class=\"hljs-variable\">$0</span> {start|stop|reload|configtest|status|force-reload|upgrade|restart}\"</span>\n        <span class=\"hljs-built_in\">exit</span> 2\n<span class=\"hljs-keyword\">esac</span>\n</code></pre><blockquote>\n<p>其中nginx和NGINX_CONF_FILE需要分别配置为nginx的执行路径和配置路径</p>\n</blockquote>\n<p> 保存并退出</p>\n<ol>\n<li><p>chmod +x /etc/init.d/nginx #给予相关的权限</p>\n</li>\n<li><p>/sbin/chkconfig nginx on #添加到开机启动</p>\n</li>\n<li><p>/sbin/chkconfig --list nginx 查看开机启动菜单</p>\n</li>\n<li><p>如上操作之后就可以使用service nginx start,service nginx stop,service nginx restart等命令</p>\n</li>\n</ol>\n<hr>\n<h2 id=\"-nginx-\">附上nginx配置</h2>\n<pre><code class=\"hljs lang-bash\">nginx.conf\nserver {\n    listen 80;\n    server_name westpsk.com;\n    location / {\n        proxy_pass_header Server;\n        proxy_<span class=\"hljs-built_in\">set</span>_header X-Real-IP <span class=\"hljs-variable\">$remote_addr</span>;\n        proxy_<span class=\"hljs-built_in\">set</span>_header Host <span class=\"hljs-variable\">$http_host</span>;\n        proxy_<span class=\"hljs-built_in\">set</span>_header X-Scheme <span class=\"hljs-variable\">$scheme</span>;\n        proxy_pass http://127.0.0.1:8360;\n    }\n}\n</code></pre><h2 id=\"apache-\">apache命令</h2>\n<pre><code class=\"hljs lang-crmsh\">service httpd <span class=\"hljs-literal\">start</span> 启动\nservice httpd restart 重新启动\nservice httpd <span class=\"hljs-literal\">stop</span> 停止服务\n</code></pre><h2 id=\"nginx-\">nginx命令</h2>\n<pre><code class=\"hljs lang-crmsh\">service nginx <span class=\"hljs-literal\">start</span> 启动\nservice nginx restart 重新启动\nservice nginx <span class=\"hljs-literal\">stop</span> 停止服务\n</code></pre><p>或者下面这种</p>\n<pre><code class=\"hljs lang-dts\"><span class=\"hljs-meta-keyword\">/usr/</span>local<span class=\"hljs-meta-keyword\">/webserver/</span>nginx<span class=\"hljs-meta-keyword\">/sbin/</span>nginx -s reload         <span class=\"hljs-meta\"># 重新载入配置文件</span>\n<span class=\"hljs-meta-keyword\">/usr/</span>local<span class=\"hljs-meta-keyword\">/webserver/</span>nginx<span class=\"hljs-meta-keyword\">/sbin/</span>nginx -s reopen        <span class=\"hljs-meta\"># 重启 Nginx</span>\n<span class=\"hljs-meta-keyword\">/usr/</span>local<span class=\"hljs-meta-keyword\">/webserver/</span>nginx<span class=\"hljs-meta-keyword\">/sbin/</span>nginx -s stop            <span class=\"hljs-meta\"># 停止 Nginx</span>\n</code></pre>',1,'2016-07-02 05:39:28','2016-07-04 05:40:44',1,0,'\"{\\\"push_sites\\\":[]}\"'),(10552,21,0,3,'casperjs发送post/get请求，form表单提交的疑惑&原因','a-post-get','<h2 id=\"casperjs-post-\">casperjs发送post请求</h2>\n<p><a href=\"http://docs.casperjs.org/en/latest/modules/casper.html\">官网接口</a>：</p>\n<p>To POST some data with utf-8 encoding:</p>\n<pre><code class=\"hljs lang-less\"><span class=\"hljs-selector-tag\">casper</span><span class=\"hljs-selector-class\">.open</span>(<span class=\"hljs-string\">\"http://some.testserver.com/post.php\"</span>, {\n       <span class=\"hljs-attribute\">method</span>: <span class=\"hljs-string\">\"post\"</span>,\n       <span class=\"hljs-attribute\">headers</span>: {\n           <span class=\"hljs-string\">\"Content-Type\"</span>: <span class=\"hljs-string\">\"application/json; charset=utf-8\"</span>\n       },\n       <span class=\"hljs-attribute\">encoding</span>: <span class=\"hljs-string\">\"utf8\"</span>, <span class=\"hljs-comment\">// not enforced by default</span>\n       <span class=\"hljs-attribute\">data</span>: {\n            <span class=\"hljs-string\">\"table_flip\"</span>: <span class=\"hljs-string\">\"(╯°□°）╯︵ ┻━┻ \"</span>,\n       }\n});\n</code></pre><p>带cookie</p>\n<pre><code class=\"hljs lang-php\"><span class=\"hljs-comment\">/*带cookie发送请求*/</span>\n<span class=\"hljs-keyword\">var</span> casper = <span class=\"hljs-keyword\">require</span>(<span class=\"hljs-string\">\"casper\"</span>).create();\ncasper.start();\n\n<span class=\"hljs-comment\">/*更新代码*/</span>\nphantom.cookiesEnabled = <span class=\"hljs-keyword\">true</span>;\ncasper.then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span></span>{\n    phantom.addCookie({\n        <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"thinkjs\"</span>,\n        <span class=\"hljs-string\">\"value\"</span>: <span class=\"hljs-string\">\"******\"</span>,\n        <span class=\"hljs-string\">\"domain\"</span>: <span class=\"hljs-string\">\"westpsk.com\"</span>\n    });\n    casper.thenOpen(<span class=\"hljs-string\">\"http://westpsk.com/admin/api/page\"</span>,{\n        method: <span class=\"hljs-string\">\"POST\"</span>,\n        data: {\n            <span class=\"hljs-string\">\"title\"</span>: <span class=\"hljs-string\">\"description test\"</span>,\n            <span class=\"hljs-string\">\"pathname\"</span>: <span class=\"hljs-string\">\"casperjs_test\"</span>,\n            <span class=\"hljs-string\">\"is_public\"</span>: <span class=\"hljs-string\">\"1\"</span>,\n            <span class=\"hljs-string\">\"status\"</span>: <span class=\"hljs-string\">\"3\"</span>,\n            <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"1\"</span>,\n            <span class=\"hljs-string\">\"allow_comment\"</span>: <span class=\"hljs-string\">\"1\"</span>,\n            <span class=\"hljs-string\">\"markdown_content\"</span>: <span class=\"hljs-string\">\"hello, it\"</span>s the content <span class=\"hljs-string\">\"\n        }\n    },function(response){\n        if(response.status == 200){\n            this.echo(\"</span>update success<span class=\"hljs-string\">\");\n            var json_string = JSON.parse(this.page.plainText);\n            // this.echo(json_string.data.codes);\n            require(\"</span>utils<span class=\"hljs-string\">\").dump(this.page.content);\n        }\n    });\n});\n</span></code></pre><p>post请求传递的data内容若需要为Json格式，但是发送的时候不是单纯的key＋value形式，那么需要添加Content-Type参数。（thx@minmin排查问题）</p>\n<pre><code class=\"hljs lang-javascript\">casper.thenOpen(<span class=\"hljs-string\">\"http://westpsk.com/api/v2?token=***token***=page&amp;operation=update&amp;ids=3701347013\"</span>,{\n    method: <span class=\"hljs-string\">\"POST\"</span>,\n    data : {\n            <span class=\"hljs-string\">\"data\"</span> : {\n                <span class=\"hljs-string\">\"description\"</span>: <span class=\"hljs-string\">\"description test\"</span>,\n                <span class=\"hljs-string\">\"codes\"</span>: <span class=\"hljs-string\">\"&lt;html&gt;test codes&lt;/html&gt;\"</span>\n            },\n            <span class=\"hljs-string\">\"control\"</span> : {\n                <span class=\"hljs-string\">\"lock\"</span> : <span class=\"hljs-number\">1</span>,\n                <span class=\"hljs-string\">\"version\"</span> : <span class=\"hljs-number\">0</span>\n            },\n            <span class=\"hljs-string\">\"ext\"</span> : {\n            }\n        },\n    headers: {\n        <span class=\"hljs-string\">\"Accept\"</span>:<span class=\"hljs-string\">\"application/json\"</span>,\n        <span class=\"hljs-string\">\"Content-Type\"</span>:<span class=\"hljs-string\">\"application/json\"</span>\n    }\n},<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">response</span>)</span>{\n    <span class=\"hljs-keyword\">if</span>(response.status == <span class=\"hljs-number\">200</span>){\n        <span class=\"hljs-keyword\">this</span>.echo(<span class=\"hljs-string\">\"update success\"</span>);\n        <span class=\"hljs-keyword\">var</span> json_string = <span class=\"hljs-built_in\">JSON</span>.parse(<span class=\"hljs-keyword\">this</span>.page.plainText);\n        <span class=\"hljs-comment\">// this.echo(json_string.data.codes);</span>\n        <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"utils\"</span>).dump(<span class=\"hljs-keyword\">this</span>.page.content);\n    }\n});\n</code></pre><hr>\n<h2 id=\"-\">疑惑点</h2>\n<h3 id=\"-\">现象</h3>\n<p>发送form表单时候会出现请求参数带不进去的情况。</p>\n<ul>\n<li>method为get时，<code>q=11</code>不能传过去，input里的表单数据可以取到。</li>\n<li><strong>method为post，<code>q=11</code>可以传过去，但是input里的表单数据就取不到了。</strong> </li>\n</ul>\n<pre><code class=\"hljs lang-stylus\">&lt;<span class=\"hljs-selector-tag\">form</span> action=<span class=\"hljs-string\">\"http://so.com?q=11\"</span> method=<span class=\"hljs-string\">\"get\"</span> target=<span class=\"hljs-string\">\"_blank\"</span>&gt;\n    &lt;<span class=\"hljs-selector-tag\">input</span> name=<span class=\"hljs-string\">\"tab\"</span> value=<span class=\"hljs-string\">\"batch\"</span>&gt;\n    &lt;<span class=\"hljs-selector-tag\">input</span> name=<span class=\"hljs-string\">\"sina-fr\"</span> type=<span class=\"hljs-string\">\"hidden\"</span> value=<span class=\"hljs-string\">\"bd\"</span>&gt;\n&lt;/form&gt;\n</code></pre><blockquote>\n<p>经查询发现，浏览器会将表单数据封装为字符串，如name=Google&amp;age=18&amp;qq=123456，然后直接附在表单的 action URL 之后。这两者之间用问号(?)进行分隔。如果GET请求的表单action属性中已经包含参数，浏览器会直接将其过滤掉，再附加form表单数据。</p>\n</blockquote>\n<p><em>而使用post请求，无法传递url和input内容，可能是接口请求的服务端没有做相应的处理。</em> <strong>（疑问）</strong></p>\n<p>对于get方式，服务器端用<code>Request.QueryString</code>获取变量的值，对于post方式，服务器端用<code>Request.Form</code>获取提交的数据。Request从几个集合取数据是有顺序的，从前到后的顺序依次是 QueryString,Form,最后是ServerVariables。Request对象按照这样的顺序依次搜索这几个集合中的变量，如果有符合的就中止，后面的就不管了。</p>\n<p>因此，GET请求方式的表单的action属性中不能附带任何参数，如果需要附加额外的参数，可以采用如下方式：</p>\n<ol>\n<li>采用POST请求方式，在form中增加属性method=&quot;post&quot;即可。</li>\n<li>如果仍然想使用GET请求方式，可以在form表单中添加相应的隐藏文本域，例如:</li>\n</ol>\n<p><code>&lt;input name=&quot;method&quot; type=&quot;hidden&quot; value=&quot;queryUser&quot;&gt;</code></p>\n<p>页面通过表单（form）向服务器提交数据的时候有两种形式，一个是POST，另一个是GET。两种的一个区别是GET会直接把数据附加在url的后面，而POST发送的数据放置在http包中。form的action属性就是提交数据的url地址，method属性可以指定是GET或POST。</p>\n<blockquote>\n<p>需要注意的是如果采用GET方式，那么action url中参数都会被丢弃，提交时候只会把form中的数据拼接在url向服务器提交；但是POST的方式则不会这样，它会按照action指定的url进行提交数据，包含url后面跟着的参数和参数值。</p>\n</blockquote>\n<h2 id=\"-\">问题：</h2>\n<p>form表单发送请求时，url中带有参数，body中也包含需要传输的参数，那么可以正常传输么？表单提交与单纯的post请求性质是不是一样。</p>\n<p>像遇到的不一样的情况，是不是服务端限制了传输方式，服务端获取的时候只验证了get方法，没有验证post方法，导致出现只能取到url中的参数，不能取到input中的参数？</p>\n<h2 id=\"-\">验证：</h2>\n<p>1.get请求</p>\n<pre><code class=\"lang-前端页面\">&lt;div class=&#39;form&#39;&gt;\n    &lt;form action=&quot;post?a=1&quot; method=&quot;get&quot; target=&quot;_blank&quot;&gt;\n        &lt;input type=&quot;text&quot; name=&quot;name&quot; value=&quot;ivan&quot;&gt;\n        &lt;input type=&quot;text&quot; name=&quot;pwd&quot; value=&quot;fe&quot;&gt;\n        &lt;button class=&quot;sub_btn&quot;&gt;查询&lt;/button&gt;\n    &lt;/form&gt;\n&lt;/div&gt;\n</code></pre>\n<pre><code class=\"lang-服务端处理\">async postAction(){\n    let name = this.get(&quot;name&quot;);\n    let pwd = this.get(&quot;pwd&quot;);\n    this.assign({\n        name: name,\n        pwd: pwd\n    });\n    return this.display();\n}\n</code></pre>\n<p>结果：</p>\n<p><img src=\"http://7xvbqa.com1.z0.glb.clouddn.com/qiniu/1468376553443.png\" width=\"345\"/></p>\n<p><img src=\"http://7xvbqa.com1.z0.glb.clouddn.com/qiniu/1468376734158.png\" width=\"488\"/></p>\n<p>即：get请求时，action中a=1这个参数被丢弃掉了，可以得到input的内容。</p>\n<p>2.post请求</p>\n<pre><code class=\"lang-前端内容\">&lt;div class=&#39;form&#39;&gt;\n    &lt;form action=&quot;post?a=1&quot; method=&quot;post&quot; target=&quot;_blank&quot;&gt;\n        &lt;input type=&quot;text&quot; name=&quot;name&quot; value=&quot;ivan&quot;&gt;\n        &lt;input type=&quot;text&quot; name=&quot;pwd&quot; value=&quot;fe&quot;&gt;\n        &lt;button class=&quot;sub_btn&quot;&gt;查询&lt;/button&gt;\n    &lt;/form&gt;\n&lt;/div&gt;\n</code></pre>\n<pre><code class=\"lang-服务端处理\">async postAction(){\n    let name = this.post(&quot;name&quot;);\n    let pwd = this.post(&quot;pwd&quot;);\n    this.assign({\n        name: name,\n        pwd: pwd\n    });\n    return this.display();\n}\n</code></pre>\n<p>结果：\n<img src=\"http://7xvbqa.com1.z0.glb.clouddn.com/qiniu/1468376985390.png\" width=\"403\"/></p>\n<p>即：post请求时，action中a=1这个参数可以取到，input的内容也可以获取到。</p>\n<p>3.前端使用post请求，后端处理时使用get请求</p>\n<pre><code class=\"lang-前端\">&lt;div class=&#39;form&#39;&gt;\n    &lt;form action=&quot;post?a=1&quot; method=&quot;post&quot; target=&quot;_blank&quot;&gt;\n        &lt;input type=&quot;text&quot; name=&quot;name&quot; value=&quot;ivan&quot;&gt;\n        &lt;input type=&quot;text&quot; name=&quot;pwd&quot; value=&quot;fe&quot;&gt;\n        &lt;button class=&quot;sub_btn&quot;&gt;查询&lt;/button&gt;\n    &lt;/form&gt;\n&lt;/div&gt;\n</code></pre>\n<pre><code class=\"lang-服务端处理\">async postAction(){\n    let name = this.get(&quot;name&quot;);\n    let pwd = this.get(&quot;pwd&quot;);\n    this.assign({\n        name: name,\n        pwd: pwd\n    });\n    return this.display();\n}\n</code></pre>\n<p><img src=\"http://7xvbqa.com1.z0.glb.clouddn.com/qiniu/1468377140852.png\" width=\"405\"/></p>\n<p>即：前端使用post请求，而服务端使用get请求的方式是获取不到input中的内容的，只能拿到action里面的url的内容。</p>\n<h2 id=\"-\">解决</h2>\n<ol>\n<li>通过form表单提交和直接使用nodejs提交性质一样。\n所以通过post请求，可以获取到url和data参数，之前之所以获取不到，可能是因为服务端没有对post请求做处理，导致只取到了url中参数，并没有获取到请求输入的参数。</li>\n<li>通过post请求的话，若传递的数据格式不是单纯的key＋value的形式，那么最好加入<code>&#39;Content-Type&#39;: &#39;application/json&#39;</code> </li>\n</ol>\n<h2 id=\"-\">参考</h2>\n<ul>\n<li><p><a href=\"http://jiaolonghuang.github.io/2016/04/17/casperjs-example/\">Casperjs带cookie发送post请求  @小路口</a></p>\n</li>\n<li><p><a href=\"http://www.php-note.com/article/detail/33\">form表单提交时，action url中参数无效</a></p>\n</li>\n</ul>\n','## casperjs发送post请求\n\n[官网接口](http://docs.casperjs.org/en/latest/modules/casper.html)：\n\nTo POST some data with utf-8 encoding:\n\n```\ncasper.open(\'http://some.testserver.com/post.php\', {\n       method: \'post\',\n       headers: {\n           \'Content-Type\': \'application/json; charset=utf-8\'\n       },\n       encoding: \'utf8\', // not enforced by default\n       data: {\n            \'table_flip\': \'(╯°□°）╯︵ ┻━┻ \',\n       }\n});\n```\n\n带cookie\n\n```\n/*带cookie发送请求*/\nvar casper = require(\'casper\').create();\ncasper.start();\n\n/*更新代码*/\nphantom.cookiesEnabled = true;\ncasper.then(function(){\n	phantom.addCookie({\n		\'name\': \'thinkjs\',\n		\'value\': \'******\',\n		\'domain\': \'westpsk.com\'\n	});\n	casper.thenOpen(\'http://westpsk.com/admin/api/page\',{\n		method: \'POST\',\n		data: {\n			\'title\': \'description test\',\n			\'pathname\': \'casperjs_test\',\n			\'is_public\': \'1\',\n			\'status\': \'3\',\n			\'type\': \'1\',\n			\'allow_comment\': \'1\',\n			\'markdown_content\': \'hello, it\'s the content \'\n		}\n	},function(response){\n		if(response.status == 200){\n			this.echo(\'update success\');\n			var json_string = JSON.parse(this.page.plainText);\n			// this.echo(json_string.data.codes);\n			require(\'utils\').dump(this.page.content);\n		}\n	});\n});\n```\n\npost请求传递的data内容若需要为Json格式，但是发送的时候不是单纯的key＋value形式，那么需要添加Content-Type参数。（thx@minmin排查问题）\n\n```\ncasper.thenOpen(\'http://westpsk.com/api/v2?token=***token***=page&operation=update&ids=3701347013\',{\n	method: \'POST\',\n	data : {\n		    \"data\" : {\n				\'description\': \'description test\',\n				\'codes\': \'<html>test codes</html>\'\n		    },\n		    \"control\" : {\n		        \"lock\" : 1,\n		        \"version\" : 0\n		    },\n		    \"ext\" : {\n		    }\n		},\n	headers: {\n		\'Accept\':\'application/json\',\n		\'Content-Type\':\'application/json\'\n    }\n},function(response){\n	if(response.status == 200){\n		this.echo(\'update success\');\n		var json_string = JSON.parse(this.page.plainText);\n		// this.echo(json_string.data.codes);\n		require(\'utils\').dump(this.page.content);\n	}\n});\n```\n\n****\n\n## 疑惑点 \n\n### 现象\n\n发送form表单时候会出现请求参数带不进去的情况。\n\n- method为get时，`q=11`不能传过去，input里的表单数据可以取到。\n- **method为post，`q=11`可以传过去，但是input里的表单数据就取不到了。** \n\n```\n<form action=\"http://so.com?q=11\" method=\"get\" target=\"_blank\">\n    <input name=\"tab\" value=\"batch\">\n    <input name=\"sina-fr\" type=\"hidden\" value=\"bd\">\n</form>\n```\n\n> 经查询发现，浏览器会将表单数据封装为字符串，如name=Google&age=18&qq=123456，然后直接附在表单的 action URL 之后。这两者之间用问号(?)进行分隔。如果GET请求的表单action属性中已经包含参数，浏览器会直接将其过滤掉，再附加form表单数据。\n\n_而使用post请求，无法传递url和input内容，可能是接口请求的服务端没有做相应的处理。_ **（疑问）**\n\n对于get方式，服务器端用`Request.QueryString`获取变量的值，对于post方式，服务器端用`Request.Form`获取提交的数据。Request从几个集合取数据是有顺序的，从前到后的顺序依次是 QueryString,Form,最后是ServerVariables。Request对象按照这样的顺序依次搜索这几个集合中的变量，如果有符合的就中止，后面的就不管了。\n\n因此，GET请求方式的表单的action属性中不能附带任何参数，如果需要附加额外的参数，可以采用如下方式：\n\n1. 采用POST请求方式，在form中增加属性method=\"post\"即可。\n2. 如果仍然想使用GET请求方式，可以在form表单中添加相应的隐藏文本域，例如:\n\n```<input name=\"method\" type=\"hidden\" value=\"queryUser\">```\n\n页面通过表单（form）向服务器提交数据的时候有两种形式，一个是POST，另一个是GET。两种的一个区别是GET会直接把数据附加在url的后面，而POST发送的数据放置在http包中。form的action属性就是提交数据的url地址，method属性可以指定是GET或POST。\n\n>需要注意的是如果采用GET方式，那么action url中参数都会被丢弃，提交时候只会把form中的数据拼接在url向服务器提交；但是POST的方式则不会这样，它会按照action指定的url进行提交数据，包含url后面跟着的参数和参数值。\n\n\n## 问题：\n\nform表单发送请求时，url中带有参数，body中也包含需要传输的参数，那么可以正常传输么？表单提交与单纯的post请求性质是不是一样。\n\n像遇到的不一样的情况，是不是服务端限制了传输方式，服务端获取的时候只验证了get方法，没有验证post方法，导致出现只能取到url中的参数，不能取到input中的参数？\n\n\n## 验证：\n\n1.get请求\n\n\n```前端页面\n<div class=\'form\'>\n	<form action=\"post?a=1\" method=\"get\" target=\"_blank\">\n		<input type=\"text\" name=\"name\" value=\"ivan\">\n		<input type=\"text\" name=\"pwd\" value=\"fe\">\n		<button class=\"sub_btn\">查询</button>\n	</form>\n</div>\n```\n\n```服务端处理\nasync postAction(){\n	let name = this.get(\"name\");\n	let pwd = this.get(\"pwd\");\n	this.assign({\n		name: name,\n		pwd: pwd\n	});\n	return this.display();\n}\n```\n结果：\n\n<img src=\"http://7xvbqa.com1.z0.glb.clouddn.com/qiniu/1468376553443.png\" width=\"345\"/>\n\n<img src=\"http://7xvbqa.com1.z0.glb.clouddn.com/qiniu/1468376734158.png\" width=\"488\"/>\n\n即：get请求时，action中a=1这个参数被丢弃掉了，可以得到input的内容。\n\n2.post请求\n\n```前端内容\n<div class=\'form\'>\n	<form action=\"post?a=1\" method=\"post\" target=\"_blank\">\n		<input type=\"text\" name=\"name\" value=\"ivan\">\n		<input type=\"text\" name=\"pwd\" value=\"fe\">\n		<button class=\"sub_btn\">查询</button>\n	</form>\n</div>\n```\n\n```服务端处理\nasync postAction(){\n	let name = this.post(\"name\");\n	let pwd = this.post(\"pwd\");\n	this.assign({\n		name: name,\n		pwd: pwd\n	});\n	return this.display();\n}\n```\n结果：\n<img src=\"http://7xvbqa.com1.z0.glb.clouddn.com/qiniu/1468376985390.png\" width=\"403\"/>\n\n即：post请求时，action中a=1这个参数可以取到，input的内容也可以获取到。\n\n3.前端使用post请求，后端处理时使用get请求\n\n```前端\n<div class=\'form\'>\n	<form action=\"post?a=1\" method=\"post\" target=\"_blank\">\n		<input type=\"text\" name=\"name\" value=\"ivan\">\n		<input type=\"text\" name=\"pwd\" value=\"fe\">\n		<button class=\"sub_btn\">查询</button>\n	</form>\n</div>\n```\n\n```服务端处理\nasync postAction(){\n	let name = this.get(\"name\");\n	let pwd = this.get(\"pwd\");\n	this.assign({\n		name: name,\n		pwd: pwd\n	});\n	return this.display();\n}\n```\n<img src=\"http://7xvbqa.com1.z0.glb.clouddn.com/qiniu/1468377140852.png\" width=\"405\"/>\n\n即：前端使用post请求，而服务端使用get请求的方式是获取不到input中的内容的，只能拿到action里面的url的内容。\n\n## 解决\n\n1. 通过form表单提交和直接使用nodejs提交性质一样。\n所以通过post请求，可以获取到url和data参数，之前之所以获取不到，可能是因为服务端没有对post请求做处理，导致只取到了url中参数，并没有获取到请求输入的参数。\n2. 通过post请求的话，若传递的数据格式不是单纯的key＋value的形式，那么最好加入`\'Content-Type\': \'application/json\'` \n\n\n## 参考\n\n- [Casperjs带cookie发送post请求  @小路口](http://jiaolonghuang.github.io/2016/04/17/casperjs-example/)\n\n- [form表单提交时，action url中参数无效](http://www.php-note.com/article/detail/33)\n\n','<h2 id=\"casperjs-post-\">casperjs发送post请求</h2>\n<p><a href=\"http://docs.casperjs.org/en/latest/modules/casper.html\">官网接口</a>：</p>\n<p>To POST some data with utf-8 encoding:</p>\n<pre><code class=\"hljs lang-less\"><span class=\"hljs-selector-tag\">casper</span><span class=\"hljs-selector-class\">.open</span>(<span class=\"hljs-string\">\"http://some.testserver.com/post.php\"</span>, {\n       <span class=\"hljs-attribute\">method</span>: <span class=\"hljs-string\">\"post\"</span>,\n       <span class=\"hljs-attribute\">headers</span>: {\n           <span class=\"hljs-string\">\"Content-Type\"</span>: <span class=\"hljs-string\">\"application/json; charset=utf-8\"</span>\n       },\n       <span class=\"hljs-attribute\">encoding</span>: <span class=\"hljs-string\">\"utf8\"</span>, <span class=\"hljs-comment\">// not enforced by default</span>\n       <span class=\"hljs-attribute\">data</span>: {\n            <span class=\"hljs-string\">\"table_flip\"</span>: <span class=\"hljs-string\">\"(╯°□°）╯︵ ┻━┻ \"</span>,\n       }\n});\n</code></pre><p>带cookie</p>\n<pre><code class=\"hljs lang-php\"><span class=\"hljs-comment\">/*带cookie发送请求*/</span>\n<span class=\"hljs-keyword\">var</span> casper = <span class=\"hljs-keyword\">require</span>(<span class=\"hljs-string\">\"casper\"</span>).create();\ncasper.start();\n\n<span class=\"hljs-comment\">/*更新代码*/</span>\nphantom.cookiesEnabled = <span class=\"hljs-keyword\">true</span>;\ncasper.then(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span><span class=\"hljs-params\">()</span></span>{\n    phantom.addCookie({\n        <span class=\"hljs-string\">\"name\"</span>: <span class=\"hljs-string\">\"thinkjs\"</span>,\n        <span class=\"hljs-string\">\"value\"</span>: <span class=\"hljs-string\">\"******\"</span>,\n        <span class=\"hljs-string\">\"domain\"</span>: <span class=\"hljs-string\">\"westpsk.com\"</span>\n    });\n    casper.thenOpen(<span class=\"hljs-string\">\"http://westpsk.com/admin/api/page\"</span>,{\n        method: <span class=\"hljs-string\">\"POST\"</span>,\n        data: {\n            <span class=\"hljs-string\">\"title\"</span>: <span class=\"hljs-string\">\"description test\"</span>,\n            <span class=\"hljs-string\">\"pathname\"</span>: <span class=\"hljs-string\">\"casperjs_test\"</span>,\n            <span class=\"hljs-string\">\"is_public\"</span>: <span class=\"hljs-string\">\"1\"</span>,\n            <span class=\"hljs-string\">\"status\"</span>: <span class=\"hljs-string\">\"3\"</span>,\n            <span class=\"hljs-string\">\"type\"</span>: <span class=\"hljs-string\">\"1\"</span>,\n            <span class=\"hljs-string\">\"allow_comment\"</span>: <span class=\"hljs-string\">\"1\"</span>,\n            <span class=\"hljs-string\">\"markdown_content\"</span>: <span class=\"hljs-string\">\"hello, it\"</span>s the content <span class=\"hljs-string\">\"\n        }\n    },function(response){\n        if(response.status == 200){\n            this.echo(\"</span>update success<span class=\"hljs-string\">\");\n            var json_string = JSON.parse(this.page.plainText);\n            // this.echo(json_string.data.codes);\n            require(\"</span>utils<span class=\"hljs-string\">\").dump(this.page.content);\n        }\n    });\n});\n</span></code></pre><p>post请求传递的data内容若需要为Json格式，但是发送的时候不是单纯的key＋value形式，那么需要添加Content-Type参数。（thx@minmin排查问题）</p>\n<pre><code class=\"hljs lang-javascript\">casper.thenOpen(<span class=\"hljs-string\">\"http://westpsk.com/api/v2?token=***token***=page&amp;operation=update&amp;ids=3701347013\"</span>,{\n    method: <span class=\"hljs-string\">\"POST\"</span>,\n    data : {\n            <span class=\"hljs-string\">\"data\"</span> : {\n                <span class=\"hljs-string\">\"description\"</span>: <span class=\"hljs-string\">\"description test\"</span>,\n                <span class=\"hljs-string\">\"codes\"</span>: <span class=\"hljs-string\">\"&lt;html&gt;test codes&lt;/html&gt;\"</span>\n            },\n            <span class=\"hljs-string\">\"control\"</span> : {\n                <span class=\"hljs-string\">\"lock\"</span> : <span class=\"hljs-number\">1</span>,\n                <span class=\"hljs-string\">\"version\"</span> : <span class=\"hljs-number\">0</span>\n            },\n            <span class=\"hljs-string\">\"ext\"</span> : {\n            }\n        },\n    headers: {\n        <span class=\"hljs-string\">\"Accept\"</span>:<span class=\"hljs-string\">\"application/json\"</span>,\n        <span class=\"hljs-string\">\"Content-Type\"</span>:<span class=\"hljs-string\">\"application/json\"</span>\n    }\n},<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">response</span>)</span>{\n    <span class=\"hljs-keyword\">if</span>(response.status == <span class=\"hljs-number\">200</span>){\n        <span class=\"hljs-keyword\">this</span>.echo(<span class=\"hljs-string\">\"update success\"</span>);\n        <span class=\"hljs-keyword\">var</span> json_string = <span class=\"hljs-built_in\">JSON</span>.parse(<span class=\"hljs-keyword\">this</span>.page.plainText);\n        <span class=\"hljs-comment\">// this.echo(json_string.data.codes);</span>\n        <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"utils\"</span>).dump(<span class=\"hljs-keyword\">this</span>.page.content);\n    }\n});\n</code></pre><hr>\n<h2 id=\"-\">疑惑点</h2>\n<h3 id=\"-\">现象</h3>\n<p>发送form表单时候会出现请求参数带不进去的情况。</p>\n<ul>\n<li>method为get时，<code>q=11</code>不能传过去，input里的表单数据可以取到。</li>\n<li><strong>method为post，<code>q=11</code>可以传过去，但是input里的表单数据就取不到了。</strong> </li>\n</ul>\n<pre><code class=\"hljs lang-stylus\">&lt;<span class=\"hljs-selector-tag\">form</span> action=<span class=\"hljs-string\">\"http://so.com?q=11\"</span> method=<span class=\"hljs-string\">\"get\"</span> target=<span class=\"hljs-string\">\"_blank\"</span>&gt;\n    &lt;<span class=\"hljs-selector-tag\">input</span> name=<span class=\"hljs-string\">\"tab\"</span> value=<span class=\"hljs-string\">\"batch\"</span>&gt;\n    &lt;<span class=\"hljs-selector-tag\">input</span> name=<span class=\"hljs-string\">\"sina-fr\"</span> type=<span class=\"hljs-string\">\"hidden\"</span> value=<span class=\"hljs-string\">\"bd\"</span>&gt;\n&lt;/form&gt;\n</code></pre><blockquote>\n<p>经查询发现，浏览器会将表单数据封装为字符串，如name=Google&amp;age=18&amp;qq=123456，然后直接附在表单的 action URL 之后。这两者之间用问号(?)进行分隔。如果GET请求的表单action属性中已经包含参数，浏览器会直接将其过滤掉，再附加form表单数据。</p>\n</blockquote>\n<p><em>而使用post请求，无法传递url和input内容，可能是接口请求的服务端没有做相应的处理。</em> <strong>（疑问）</strong></p>\n<p>对于get方式，服务器端用<code>Request.QueryString</code>获取变量的值，对于post方式，服务器端用<code>Request.Form</code>获取提交的数据。Request从几个集合取数据是有顺序的，从前到后的顺序依次是 QueryString,Form,最后是ServerVariables。Request对象按照这样的顺序依次搜索这几个集合中的变量，如果有符合的就中止，后面的就不管了。</p>\n<p>因此，GET请求方式的表单的action属性中不能附带任何参数，如果需要附加额外的参数，可以采用如下方式：</p>\n<ol>\n<li>采用POST请求方式，在form中增加属性method=&quot;post&quot;即可。</li>\n<li>如果仍然想使用GET请求方式，可以在form表单中添加相应的隐藏文本域，例如:</li>\n</ol>\n<p><code>&lt;input name=&quot;method&quot; type=&quot;hidden&quot; value=&quot;queryUser&quot;&gt;</code></p>\n<p>页面通过表单（form）向服务器提交数据的时候有两种形式，一个是POST，另一个是GET。两种的一个区别是GET会直接把数据附加在url的后面，而POST发送的数据放置在http包中。form的action属性就是提交数据的url地址，method属性可以指定是GET或POST。</p>\n<blockquote>\n<p>需要注意的是如果采用GET方式，那么action url中参数都会被丢弃，提交时候只会把form中的数据拼接在url向服务器提交；但是POST的方式则不会这样，它会按照action指定的url进行提交数据，包含url后面跟着的参数和参数值。</p>\n</blockquote>\n<h2 id=\"-\">问题：</h2>\n<p>form表单发送请求时，url中带有参数，body中也包含需要传输的参数，那么可以正常传输么？表单提交与单纯的post请求性质是不是一样。</p>\n<p>像遇到的不一样的情况，是不是服务端限制了传输方式，服务端获取的时候只验证了get方法，没有验证post方法，导致出现只能取到url中的参数，不能取到input中的参数？</p>\n<h2 id=\"-\">验证：</h2>\n<p>1.get请求</p>\n<pre><code class=\"lang-前端页面\">&lt;div class=&#39;form&#39;&gt;\n    &lt;form action=&quot;post?a=1&quot; method=&quot;get&quot; target=&quot;_blank&quot;&gt;\n        &lt;input type=&quot;text&quot; name=&quot;name&quot; value=&quot;ivan&quot;&gt;\n        &lt;input type=&quot;text&quot; name=&quot;pwd&quot; value=&quot;fe&quot;&gt;\n        &lt;button class=&quot;sub_btn&quot;&gt;查询&lt;/button&gt;\n    &lt;/form&gt;\n&lt;/div&gt;\n</code></pre>\n<pre><code class=\"lang-服务端处理\">async postAction(){\n    let name = this.get(&quot;name&quot;);\n    let pwd = this.get(&quot;pwd&quot;);\n    this.assign({\n        name: name,\n        pwd: pwd\n    });\n    return this.display();\n}\n</code></pre>\n<p>结果：</p>\n<p><img src=\"http://7xvbqa.com1.z0.glb.clouddn.com/qiniu/1468376553443.png\" width=\"345\"/></p>\n<p><img src=\"http://7xvbqa.com1.z0.glb.clouddn.com/qiniu/1468376734158.png\" width=\"488\"/></p>\n<p>即：get请求时，action中a=1这个参数被丢弃掉了，可以得到input的内容。</p>\n<p>2.post请求</p>\n<pre><code class=\"lang-前端内容\">&lt;div class=&#39;form&#39;&gt;\n    &lt;form action=&quot;post?a=1&quot; method=&quot;post&quot; target=&quot;_blank&quot;&gt;\n        &lt;input type=&quot;text&quot; name=&quot;name&quot; value=&quot;ivan&quot;&gt;\n        &lt;input type=&quot;text&quot; name=&quot;pwd&quot; value=&quot;fe&quot;&gt;\n        &lt;button class=&quot;sub_btn&quot;&gt;查询&lt;/button&gt;\n    &lt;/form&gt;\n&lt;/div&gt;\n</code></pre>\n<pre><code class=\"lang-服务端处理\">async postAction(){\n    let name = this.post(&quot;name&quot;);\n    let pwd = this.post(&quot;pwd&quot;);\n    this.assign({\n        name: name,\n        pwd: pwd\n    });\n    return this.display();\n}\n</code></pre>\n<p>结果：\n<img src=\"http://7xvbqa.com1.z0.glb.clouddn.com/qiniu/1468376985390.png\" width=\"403\"/></p>\n<p>即：post请求时，action中a=1这个参数可以取到，input的内容也可以获取到。</p>\n<p>3.前端使用post请求，后端处理时使用get请求</p>\n<pre><code class=\"lang-前端\">&lt;div class=&#39;form&#39;&gt;\n    &lt;form action=&quot;post?a=1&quot; method=&quot;post&quot; target=&quot;_blank&quot;&gt;\n        &lt;input type=&quot;text&quot; name=&quot;name&quot; value=&quot;ivan&quot;&gt;\n        &lt;input type=&quot;text&quot; name=&quot;pwd&quot; value=&quot;fe&quot;&gt;\n        &lt;button class=&quot;sub_btn&quot;&gt;查询&lt;/button&gt;\n    &lt;/form&gt;\n&lt;/div&gt;\n</code></pre>\n<pre><code class=\"lang-服务端处理\">async postAction(){\n    let name = this.get(&quot;name&quot;);\n    let pwd = this.get(&quot;pwd&quot;);\n    this.assign({\n        name: name,\n        pwd: pwd\n    });\n    return this.display();\n}\n</code></pre>\n<p><img src=\"http://7xvbqa.com1.z0.glb.clouddn.com/qiniu/1468377140852.png\" width=\"405\"/></p>\n<p>即：前端使用post请求，而服务端使用get请求的方式是获取不到input中的内容的，只能拿到action里面的url的内容。</p>\n<h2 id=\"-\">解决</h2>\n<ol>\n<li>通过form表单提交和直接使用nodejs提交性质一样。\n所以通过post请求，可以获取到url和data参数，之前之所以获取不到，可能是因为服务端没有对post请求做处理，导致只取到了url中参数，并没有获取到请求输入的参数。</li>\n<li>通过post请求的话，若传递的数据格式不是单纯的key＋value的形式，那么最好加入<code>&#39;Content-Type&#39;: &#39;application/json&#39;</code> </li>\n</ol>\n<h2 id=\"-\">参考</h2>\n<ul>\n<li><p><a href=\"http://jiaolonghuang.github.io/2016/04/17/casperjs-example/\">Casperjs带cookie发送post请求  @小路口</a></p>\n</li>\n<li><p><a href=\"http://www.php-note.com/article/detail/33\">form表单提交时，action url中参数无效</a></p>\n</li>\n</ul>\n',1,'2016-07-13 00:12:45','2016-07-13 00:12:45',1,0,'\"{\\\"push_sites\\\":[]}\"'),(10553,21,0,3,'post/get请求小结（嗯，就是上一篇文章的小结）','a-post-get-sum','<h2 id=\"-\">问题</h2>\n<p>使用casperjs发送post请求时，一直无法正确请求。\n问题原因：</p>\n<ol>\n<li>传递data格式有误。</li>\n<li>传递data格式无误时，没有加添加Content-Type参数。</li>\n<li>之前关于提交表单有个误区，以为若action中包含参数，并且input中需要传递参数，两者不能同时存在- -.（底部验证中有解疑）</li>\n</ol>\n<p>所以，post请求传递的data内容若需要为Json格式，但是若发送的不是单纯的key＋value形式，那么需要添加Content-Type参数。以下是正确请求的代码。</p>\n<pre><code class=\"hljs lang-javascript\">casper.thenOpen(<span class=\"hljs-string\">\"http://westpsk.com/api/v2?token=***token***=page&amp;operation=update&amp;ids=3701347013\"</span>,{\n    method: <span class=\"hljs-string\">\"POST\"</span>,\n    data : {\n            <span class=\"hljs-string\">\"data\"</span> : {\n                <span class=\"hljs-string\">\"description\"</span>: <span class=\"hljs-string\">\"description test\"</span>,\n                <span class=\"hljs-string\">\"codes\"</span>: <span class=\"hljs-string\">\"&lt;html&gt;test codes&lt;/html&gt;\"</span>\n            },\n            <span class=\"hljs-string\">\"control\"</span> : {\n                <span class=\"hljs-string\">\"lock\"</span> : <span class=\"hljs-number\">1</span>,\n                <span class=\"hljs-string\">\"version\"</span> : <span class=\"hljs-number\">0</span>\n            },\n            <span class=\"hljs-string\">\"ext\"</span> : {\n            }\n        },\n    headers: {\n        <span class=\"hljs-string\">\"Accept\"</span>:<span class=\"hljs-string\">\"application/json\"</span>,\n        <span class=\"hljs-string\">\"Content-Type\"</span>:<span class=\"hljs-string\">\"application/json\"</span>\n    }\n},<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">response</span>)</span>{\n    <span class=\"hljs-keyword\">if</span>(response.status == <span class=\"hljs-number\">200</span>){\n        <span class=\"hljs-keyword\">this</span>.echo(<span class=\"hljs-string\">\"update success\"</span>);\n        <span class=\"hljs-keyword\">var</span> json_string = <span class=\"hljs-built_in\">JSON</span>.parse(<span class=\"hljs-keyword\">this</span>.page.plainText);\n        <span class=\"hljs-comment\">// this.echo(json_string.data.codes);</span>\n        <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"utils\"</span>).dump(<span class=\"hljs-keyword\">this</span>.page.content);\n    }\n});\n</code></pre><h3 id=\"-\">关键点</h3>\n<ol>\n<li>请求url中带有参数，并且需要传递body数据。</li>\n<li>传递的数据不是单纯的key＋value的json格式，需要设置<code>&#39;Content-Type&#39;:&#39;application/json&#39;</code>，否则无法正常传递。</li>\n</ol>\n<h2 id=\"-\">疑惑点</h2>\n<h3 id=\"-\">现象</h3>\n<p>发送form表单时候会出现请求参数带不进去的情况。</p>\n<ul>\n<li>method为get时，<code>q=11</code>不能传过去，input里的表单数据可以取到。</li>\n<li><strong>method为post，<code>q=11</code>可以传过去，但是input里的表单数据就取不到了。</strong> </li>\n</ul>\n<pre><code class=\"hljs lang-stylus\">&lt;<span class=\"hljs-selector-tag\">form</span> action=<span class=\"hljs-string\">\"http://so.com?q=11\"</span> method=<span class=\"hljs-string\">\"get\"</span> target=<span class=\"hljs-string\">\"_blank\"</span>&gt;\n    &lt;<span class=\"hljs-selector-tag\">input</span> name=<span class=\"hljs-string\">\"tab\"</span> value=<span class=\"hljs-string\">\"batch\"</span>&gt;\n    &lt;<span class=\"hljs-selector-tag\">input</span> name=<span class=\"hljs-string\">\"sina-fr\"</span> type=<span class=\"hljs-string\">\"hidden\"</span> value=<span class=\"hljs-string\">\"bd\"</span>&gt;\n&lt;/form&gt;\n</code></pre><blockquote>\n<p>对于get方式，服务器端用<code>Request.QueryString</code>获取变量的值，浏览器会将表单数据封装为字符串，如<code>name=Google&amp;age=18&amp;qq=123456</code>，然后直接附在表单的 action URL 之后。这两者之间用问号(?)进行分隔。如果GET请求的表单action属性中已经包含参数，浏览器会直接将其过滤掉，再附加form表单数据。</p>\n<p>对于post方式，服务器端用<code>Request.Form</code>获取提交的数据，会把发送的数据放置在http包中，form的action属性就是提交数据的url地址。所以它会按照action指定的url进行提交数据，包含url后面跟着的参数和参数值。</p>\n</blockquote>\n<p>因此，GET请求方式的表单的action属性中不能附带任何参数，如果需要附加额外的参数，可以采用如下方式：</p>\n<ol>\n<li>采用POST请求方式，在form中增加属性method=&quot;post&quot;即可。</li>\n<li>如果仍然想使用GET请求方式，可以在form表单中添加相应的隐藏文本域，例如:</li>\n</ol>\n<p><code>&lt;input name=&quot;method&quot; type=&quot;hidden&quot; value=&quot;queryUser&quot;&gt;</code></p>\n<h2 id=\"-\">验证：</h2>\n<p>1.get请求</p>\n<pre><code class=\"lang-前端页面\">&lt;div class=&#39;form&#39;&gt;\n    &lt;form action=&quot;post?a=1&quot; method=&quot;get&quot; target=&quot;_blank&quot;&gt;\n        &lt;input type=&quot;text&quot; name=&quot;name&quot; value=&quot;ivan&quot;&gt;\n        &lt;input type=&quot;text&quot; name=&quot;pwd&quot; value=&quot;fe&quot;&gt;\n        &lt;button class=&quot;sub_btn&quot;&gt;查询&lt;/button&gt;\n    &lt;/form&gt;\n&lt;/div&gt;\n</code></pre>\n<pre><code class=\"lang-服务端处理\">async postAction(){\n    let name = this.get(&quot;name&quot;);\n    let pwd = this.get(&quot;pwd&quot;);\n    this.assign({\n        name: name,\n        pwd: pwd\n    });\n    return this.display();\n}\n</code></pre>\n<p>结果：</p>\n<p><img src=\"http://7xvbqa.com1.z0.glb.clouddn.com/qiniu/1468376553443.png\" width=\"345\"/></p>\n<p><img src=\"http://7xvbqa.com1.z0.glb.clouddn.com/qiniu/1468376734158.png\" width=\"488\"/></p>\n<p>即：get请求时，action中a=1这个参数被丢弃掉了，可以得到input的内容。</p>\n<p>2.post请求</p>\n<pre><code class=\"lang-前端内容\">&lt;div class=&#39;form&#39;&gt;\n    &lt;form action=&quot;post?a=1&quot; method=&quot;post&quot; target=&quot;_blank&quot;&gt;\n        &lt;input type=&quot;text&quot; name=&quot;name&quot; value=&quot;ivan&quot;&gt;\n        &lt;input type=&quot;text&quot; name=&quot;pwd&quot; value=&quot;fe&quot;&gt;\n        &lt;button class=&quot;sub_btn&quot;&gt;查询&lt;/button&gt;\n    &lt;/form&gt;\n&lt;/div&gt;\n</code></pre>\n<pre><code class=\"lang-服务端处理\">async postAction(){\n    let name = this.post(&quot;name&quot;);\n    let pwd = this.post(&quot;pwd&quot;);\n    this.assign({\n        name: name,\n        pwd: pwd\n    });\n    return this.display();\n}\n</code></pre>\n<p>结果：\n<img src=\"http://7xvbqa.com1.z0.glb.clouddn.com/qiniu/1468376985390.png\" width=\"403\"/></p>\n<p>即：post请求时，action中a=1这个参数可以取到，input的内容也可以获取到。</p>\n<p>3.前端使用post请求，后端处理时使用get请求</p>\n<pre><code class=\"lang-前端\">&lt;div class=&#39;form&#39;&gt;\n    &lt;form action=&quot;post?a=1&quot; method=&quot;post&quot; target=&quot;_blank&quot;&gt;\n        &lt;input type=&quot;text&quot; name=&quot;name&quot; value=&quot;ivan&quot;&gt;\n        &lt;input type=&quot;text&quot; name=&quot;pwd&quot; value=&quot;fe&quot;&gt;\n        &lt;button class=&quot;sub_btn&quot;&gt;查询&lt;/button&gt;\n    &lt;/form&gt;\n&lt;/div&gt;\n</code></pre>\n<pre><code class=\"lang-服务端处理\">async postAction(){\n    let name = this.get(&quot;name&quot;);\n    let pwd = this.get(&quot;pwd&quot;);\n    this.assign({\n        name: name,\n        pwd: pwd\n    });\n    return this.display();\n}\n</code></pre>\n<p><img src=\"http://7xvbqa.com1.z0.glb.clouddn.com/qiniu/1468377140852.png\" width=\"405\"/></p>\n<p><strong>即：前端使用post请求，而服务端使用get请求的方式是获取不到input中的内容的，只能拿到action里面的url的内容。（疑问解决）</strong></p>\n<h2 id=\"-\">总结</h2>\n<ol>\n<li>通过form表单提交和直接使用nodejs提交性质一样。\n所以通过post请求，可以获取到url和data参数，之前之所以获取不到，是因为前后端处理不一致导致的。</li>\n<li>通过post请求的话，若传递的数据格式不是单纯的key＋value的形式，那么最好加入<code>&#39;Content-Type&#39;: &#39;application/json&#39;</code> </li>\n</ol>\n','## 问题\n\n使用casperjs发送post请求时，一直无法正确请求。\n问题原因：\n1. 传递data格式有误。\n2. 传递data格式无误时，没有加添加Content-Type参数。\n3. 之前关于提交表单有个误区，以为若action中包含参数，并且input中需要传递参数，两者不能同时存在- -.（底部验证中有解疑）\n\n\n所以，post请求传递的data内容若需要为Json格式，但是若发送的不是单纯的key＋value形式，那么需要添加Content-Type参数。以下是正确请求的代码。\n\n```\ncasper.thenOpen(\'http://westpsk.com/api/v2?token=***token***=page&operation=update&ids=3701347013\',{\n	method: \'POST\',\n	data : {\n		    \"data\" : {\n				\'description\': \'description test\',\n				\'codes\': \'<html>test codes</html>\'\n		    },\n		    \"control\" : {\n		        \"lock\" : 1,\n		        \"version\" : 0\n		    },\n		    \"ext\" : {\n		    }\n		},\n	headers: {\n		\'Accept\':\'application/json\',\n		\'Content-Type\':\'application/json\'\n    }\n},function(response){\n	if(response.status == 200){\n		this.echo(\'update success\');\n		var json_string = JSON.parse(this.page.plainText);\n		// this.echo(json_string.data.codes);\n		require(\'utils\').dump(this.page.content);\n	}\n});\n```\n\n### 关键点\n1. 请求url中带有参数，并且需要传递body数据。\n2. 传递的数据不是单纯的key＋value的json格式，需要设置`\'Content-Type\':\'application/json\'`，否则无法正常传递。\n\n\n## 疑惑点 \n\n### 现象\n\n发送form表单时候会出现请求参数带不进去的情况。\n\n- method为get时，`q=11`不能传过去，input里的表单数据可以取到。\n- **method为post，`q=11`可以传过去，但是input里的表单数据就取不到了。** \n\n```\n<form action=\"http://so.com?q=11\" method=\"get\" target=\"_blank\">\n    <input name=\"tab\" value=\"batch\">\n    <input name=\"sina-fr\" type=\"hidden\" value=\"bd\">\n</form>\n```\n\n>对于get方式，服务器端用`Request.QueryString`获取变量的值，浏览器会将表单数据封装为字符串，如`name=Google&age=18&qq=123456`，然后直接附在表单的 action URL 之后。这两者之间用问号(?)进行分隔。如果GET请求的表单action属性中已经包含参数，浏览器会直接将其过滤掉，再附加form表单数据。\n\n>对于post方式，服务器端用`Request.Form`获取提交的数据，会把发送的数据放置在http包中，form的action属性就是提交数据的url地址。所以它会按照action指定的url进行提交数据，包含url后面跟着的参数和参数值。\n\n因此，GET请求方式的表单的action属性中不能附带任何参数，如果需要附加额外的参数，可以采用如下方式：\n\n1. 采用POST请求方式，在form中增加属性method=\"post\"即可。\n2. 如果仍然想使用GET请求方式，可以在form表单中添加相应的隐藏文本域，例如:\n\n```<input name=\"method\" type=\"hidden\" value=\"queryUser\">```\n\n\n\n## 验证：\n\n1.get请求\n\n\n```前端页面\n<div class=\'form\'>\n	<form action=\"post?a=1\" method=\"get\" target=\"_blank\">\n		<input type=\"text\" name=\"name\" value=\"ivan\">\n		<input type=\"text\" name=\"pwd\" value=\"fe\">\n		<button class=\"sub_btn\">查询</button>\n	</form>\n</div>\n```\n\n```服务端处理\nasync postAction(){\n	let name = this.get(\"name\");\n	let pwd = this.get(\"pwd\");\n	this.assign({\n		name: name,\n		pwd: pwd\n	});\n	return this.display();\n}\n```\n结果：\n\n<img src=\"http://7xvbqa.com1.z0.glb.clouddn.com/qiniu/1468376553443.png\" width=\"345\"/>\n\n<img src=\"http://7xvbqa.com1.z0.glb.clouddn.com/qiniu/1468376734158.png\" width=\"488\"/>\n\n即：get请求时，action中a=1这个参数被丢弃掉了，可以得到input的内容。\n\n2.post请求\n\n```前端内容\n<div class=\'form\'>\n	<form action=\"post?a=1\" method=\"post\" target=\"_blank\">\n		<input type=\"text\" name=\"name\" value=\"ivan\">\n		<input type=\"text\" name=\"pwd\" value=\"fe\">\n		<button class=\"sub_btn\">查询</button>\n	</form>\n</div>\n```\n\n```服务端处理\nasync postAction(){\n	let name = this.post(\"name\");\n	let pwd = this.post(\"pwd\");\n	this.assign({\n		name: name,\n		pwd: pwd\n	});\n	return this.display();\n}\n```\n结果：\n<img src=\"http://7xvbqa.com1.z0.glb.clouddn.com/qiniu/1468376985390.png\" width=\"403\"/>\n\n即：post请求时，action中a=1这个参数可以取到，input的内容也可以获取到。\n\n3.前端使用post请求，后端处理时使用get请求\n\n```前端\n<div class=\'form\'>\n	<form action=\"post?a=1\" method=\"post\" target=\"_blank\">\n		<input type=\"text\" name=\"name\" value=\"ivan\">\n		<input type=\"text\" name=\"pwd\" value=\"fe\">\n		<button class=\"sub_btn\">查询</button>\n	</form>\n</div>\n```\n\n```服务端处理\nasync postAction(){\n	let name = this.get(\"name\");\n	let pwd = this.get(\"pwd\");\n	this.assign({\n		name: name,\n		pwd: pwd\n	});\n	return this.display();\n}\n```\n<img src=\"http://7xvbqa.com1.z0.glb.clouddn.com/qiniu/1468377140852.png\" width=\"405\"/>\n\n**即：前端使用post请求，而服务端使用get请求的方式是获取不到input中的内容的，只能拿到action里面的url的内容。（疑问解决）**\n\n## 总结\n\n1. 通过form表单提交和直接使用nodejs提交性质一样。\n所以通过post请求，可以获取到url和data参数，之前之所以获取不到，是因为前后端处理不一致导致的。\n2. 通过post请求的话，若传递的数据格式不是单纯的key＋value的形式，那么最好加入`\'Content-Type\': \'application/json\'` \n\n','<h2 id=\"-\">问题</h2>\n<p>使用casperjs发送post请求时，一直无法正确请求。\n问题原因：</p>\n<ol>\n<li>传递data格式有误。</li>\n<li>传递data格式无误时，没有加添加Content-Type参数。</li>\n<li>之前关于提交表单有个误区，以为若action中包含参数，并且input中需要传递参数，两者不能同时存在- -.（底部验证中有解疑）</li>\n</ol>\n<p>所以，post请求传递的data内容若需要为Json格式，但是若发送的不是单纯的key＋value形式，那么需要添加Content-Type参数。以下是正确请求的代码。</p>\n<pre><code class=\"hljs lang-javascript\">casper.thenOpen(<span class=\"hljs-string\">\"http://westpsk.com/api/v2?token=***token***=page&amp;operation=update&amp;ids=3701347013\"</span>,{\n    method: <span class=\"hljs-string\">\"POST\"</span>,\n    data : {\n            <span class=\"hljs-string\">\"data\"</span> : {\n                <span class=\"hljs-string\">\"description\"</span>: <span class=\"hljs-string\">\"description test\"</span>,\n                <span class=\"hljs-string\">\"codes\"</span>: <span class=\"hljs-string\">\"&lt;html&gt;test codes&lt;/html&gt;\"</span>\n            },\n            <span class=\"hljs-string\">\"control\"</span> : {\n                <span class=\"hljs-string\">\"lock\"</span> : <span class=\"hljs-number\">1</span>,\n                <span class=\"hljs-string\">\"version\"</span> : <span class=\"hljs-number\">0</span>\n            },\n            <span class=\"hljs-string\">\"ext\"</span> : {\n            }\n        },\n    headers: {\n        <span class=\"hljs-string\">\"Accept\"</span>:<span class=\"hljs-string\">\"application/json\"</span>,\n        <span class=\"hljs-string\">\"Content-Type\"</span>:<span class=\"hljs-string\">\"application/json\"</span>\n    }\n},<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\">response</span>)</span>{\n    <span class=\"hljs-keyword\">if</span>(response.status == <span class=\"hljs-number\">200</span>){\n        <span class=\"hljs-keyword\">this</span>.echo(<span class=\"hljs-string\">\"update success\"</span>);\n        <span class=\"hljs-keyword\">var</span> json_string = <span class=\"hljs-built_in\">JSON</span>.parse(<span class=\"hljs-keyword\">this</span>.page.plainText);\n        <span class=\"hljs-comment\">// this.echo(json_string.data.codes);</span>\n        <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"utils\"</span>).dump(<span class=\"hljs-keyword\">this</span>.page.content);\n    }\n});\n</code></pre><h3 id=\"-\">关键点</h3>\n<ol>\n<li>请求url中带有参数，并且需要传递body数据。</li>\n<li>传递的数据不是单纯的key＋value的json格式，需要设置<code>&#39;Content-Type&#39;:&#39;application/json&#39;</code>，否则无法正常传递。</li>\n</ol>\n<h2 id=\"-\">疑惑点</h2>\n<h3 id=\"-\">现象</h3>\n<p>发送form表单时候会出现请求参数带不进去的情况。</p>\n<ul>\n<li>method为get时，<code>q=11</code>不能传过去，input里的表单数据可以取到。</li>\n<li><strong>method为post，<code>q=11</code>可以传过去，但是input里的表单数据就取不到了。</strong> </li>\n</ul>\n<pre><code class=\"hljs lang-stylus\">&lt;<span class=\"hljs-selector-tag\">form</span> action=<span class=\"hljs-string\">\"http://so.com?q=11\"</span> method=<span class=\"hljs-string\">\"get\"</span> target=<span class=\"hljs-string\">\"_blank\"</span>&gt;\n    &lt;<span class=\"hljs-selector-tag\">input</span> name=<span class=\"hljs-string\">\"tab\"</span> value=<span class=\"hljs-string\">\"batch\"</span>&gt;\n    &lt;<span class=\"hljs-selector-tag\">input</span> name=<span class=\"hljs-string\">\"sina-fr\"</span> type=<span class=\"hljs-string\">\"hidden\"</span> value=<span class=\"hljs-string\">\"bd\"</span>&gt;\n&lt;/form&gt;\n</code></pre><blockquote>\n<p>对于get方式，服务器端用<code>Request.QueryString</code>获取变量的值，浏览器会将表单数据封装为字符串，如<code>name=Google&amp;age=18&amp;qq=123456</code>，然后直接附在表单的 action URL 之后。这两者之间用问号(?)进行分隔。如果GET请求的表单action属性中已经包含参数，浏览器会直接将其过滤掉，再附加form表单数据。</p>\n<p>对于post方式，服务器端用<code>Request.Form</code>获取提交的数据，会把发送的数据放置在http包中，form的action属性就是提交数据的url地址。所以它会按照action指定的url进行提交数据，包含url后面跟着的参数和参数值。</p>\n</blockquote>\n<p>因此，GET请求方式的表单的action属性中不能附带任何参数，如果需要附加额外的参数，可以采用如下方式：</p>\n<ol>\n<li>采用POST请求方式，在form中增加属性method=&quot;post&quot;即可。</li>\n<li>如果仍然想使用GET请求方式，可以在form表单中添加相应的隐藏文本域，例如:</li>\n</ol>\n<p><code>&lt;input name=&quot;method&quot; type=&quot;hidden&quot; value=&quot;queryUser&quot;&gt;</code></p>\n<h2 id=\"-\">验证：</h2>\n<p>1.get请求</p>\n<pre><code class=\"lang-前端页面\">&lt;div class=&#39;form&#39;&gt;\n    &lt;form action=&quot;post?a=1&quot; method=&quot;get&quot; target=&quot;_blank&quot;&gt;\n        &lt;input type=&quot;text&quot; name=&quot;name&quot; value=&quot;ivan&quot;&gt;\n        &lt;input type=&quot;text&quot; name=&quot;pwd&quot; value=&quot;fe&quot;&gt;\n        &lt;button class=&quot;sub_btn&quot;&gt;查询&lt;/button&gt;\n    &lt;/form&gt;\n&lt;/div&gt;\n</code></pre>\n<pre><code class=\"lang-服务端处理\">async postAction(){\n    let name = this.get(&quot;name&quot;);\n    let pwd = this.get(&quot;pwd&quot;);\n    this.assign({\n        name: name,\n        pwd: pwd\n    });\n    return this.display();\n}\n</code></pre>\n<p>结果：</p>\n<p><img src=\"http://7xvbqa.com1.z0.glb.clouddn.com/qiniu/1468376553443.png\" width=\"345\"/></p>\n<p><img src=\"http://7xvbqa.com1.z0.glb.clouddn.com/qiniu/1468376734158.png\" width=\"488\"/></p>\n<p>即：get请求时，action中a=1这个参数被丢弃掉了，可以得到input的内容。</p>\n<p>2.post请求</p>\n<pre><code class=\"lang-前端内容\">&lt;div class=&#39;form&#39;&gt;\n    &lt;form action=&quot;post?a=1&quot; method=&quot;post&quot; target=&quot;_blank&quot;&gt;\n        &lt;input type=&quot;text&quot; name=&quot;name&quot; value=&quot;ivan&quot;&gt;\n        &lt;input type=&quot;text&quot; name=&quot;pwd&quot; value=&quot;fe&quot;&gt;\n        &lt;button class=&quot;sub_btn&quot;&gt;查询&lt;/button&gt;\n    &lt;/form&gt;\n&lt;/div&gt;\n</code></pre>\n<pre><code class=\"lang-服务端处理\">async postAction(){\n    let name = this.post(&quot;name&quot;);\n    let pwd = this.post(&quot;pwd&quot;);\n    this.assign({\n        name: name,\n        pwd: pwd\n    });\n    return this.display();\n}\n</code></pre>\n<p>结果：\n<img src=\"http://7xvbqa.com1.z0.glb.clouddn.com/qiniu/1468376985390.png\" width=\"403\"/></p>\n<p>即：post请求时，action中a=1这个参数可以取到，input的内容也可以获取到。</p>\n<p>3.前端使用post请求，后端处理时使用get请求</p>\n<pre><code class=\"lang-前端\">&lt;div class=&#39;form&#39;&gt;\n    &lt;form action=&quot;post?a=1&quot; method=&quot;post&quot; target=&quot;_blank&quot;&gt;\n        &lt;input type=&quot;text&quot; name=&quot;name&quot; value=&quot;ivan&quot;&gt;\n        &lt;input type=&quot;text&quot; name=&quot;pwd&quot; value=&quot;fe&quot;&gt;\n        &lt;button class=&quot;sub_btn&quot;&gt;查询&lt;/button&gt;\n    &lt;/form&gt;\n&lt;/div&gt;\n</code></pre>\n<pre><code class=\"lang-服务端处理\">async postAction(){\n    let name = this.get(&quot;name&quot;);\n    let pwd = this.get(&quot;pwd&quot;);\n    this.assign({\n        name: name,\n        pwd: pwd\n    });\n    return this.display();\n}\n</code></pre>\n<p><img src=\"http://7xvbqa.com1.z0.glb.clouddn.com/qiniu/1468377140852.png\" width=\"405\"/></p>\n<p><strong>即：前端使用post请求，而服务端使用get请求的方式是获取不到input中的内容的，只能拿到action里面的url的内容。（疑问解决）</strong></p>\n<h2 id=\"-\">总结</h2>\n<ol>\n<li>通过form表单提交和直接使用nodejs提交性质一样。\n所以通过post请求，可以获取到url和data参数，之前之所以获取不到，是因为前后端处理不一致导致的。</li>\n<li>通过post请求的话，若传递的数据格式不是单纯的key＋value的形式，那么最好加入<code>&#39;Content-Type&#39;: &#39;application/json&#39;</code> </li>\n</ol>\n',1,'2016-07-13 00:13:14','2016-07-13 00:13:14',1,0,'\"{\\\"push_sites\\\":[]}\"'),(10554,22,0,3,'Linux发邮件的方式及乱码问题','sendmail','<h1 id=\"linux-\">Linux发邮件</h1>\n<ul>\n<li>python脚本</li>\n<li>shell脚本</li>\n</ul>\n<p>之前一直使用python脚本来发送邮件，后来发现直接使用sendmail服务来发送邮件更方便一些，所以本文就说一下使用mail来发送邮件。</p>\n<p>1 shell作为编辑器，编辑完成后ctrl＋d结束</p>\n<pre><code class=\"hljs lang-bash\">mail <span class=\"hljs-_\">-s</span> <span class=\"hljs-built_in\">test</span> qh_<span class=\"hljs-built_in\">test</span>@126.com\n</code></pre><p>2 利用管道发送邮件</p>\n<pre><code class=\"hljs lang-bash\"><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"mail content\"</span> | mail <span class=\"hljs-_\">-s</span> <span class=\"hljs-string\">\"mail title\"</span> qh_<span class=\"hljs-built_in\">test</span>@126.com\n</code></pre><p>3 以file的内容为邮件内容发信</p>\n<pre><code class=\"hljs lang-bash\">mail <span class=\"hljs-_\">-s</span> <span class=\"hljs-string\">\"mail title\"</span> qh_<span class=\"hljs-built_in\">test</span>@126.com &lt; file\n</code></pre><p>4 以file的内容为邮件内容向多个用户发信</p>\n<pre><code class=\"hljs lang-stylus\">mail -s <span class=\"hljs-string\">\"mail title\"</span> -c qh_test@<span class=\"hljs-number\">126</span><span class=\"hljs-selector-class\">.com</span> qh_test1@<span class=\"hljs-number\">126</span><span class=\"hljs-selector-class\">.com</span> &lt; file\n</code></pre><p><strong>问题：</strong></p>\n<p>使用第二种发式发送邮件时，本地中文不会出现乱码，但是部署到服务端就会出现乱码，标题稳定出现乱码，内容随机出现乱码。</p>\n<p><strong>解决：</strong></p>\n<p>1 解决标题乱码</p>\n<p>利用base64编码标题内容，例如，如果UTF-8编码的字符串<code>标题</code>进行base64编码后的内容为<code>5qCH6aKY</code>，则邮件标题为：</p>\n<pre><code class=\"hljs lang-erlang-repl\">Subject:=?UTF-<span class=\"hljs-number\">8</span>?B?<span class=\"hljs-number\">5</span>qCH6aKY?=\n</code></pre><p>2 解决内容乱码</p>\n<p>解决内容乱码比较简单，首先内容使用UTF-8编码，然后再修改邮件为<code>Content-type</code>为：</p>\n<pre><code class=\"hljs lang-sqf\">Content-<span class=\"hljs-built_in\">Type</span>:<span class=\"hljs-built_in\">text</span>/html;charset=UTF-<span class=\"hljs-number\">8</span>\n</code></pre><p>基于此，那么在nodejs代码中发送邮件就可以这样写：</p>\n<pre><code class=\"hljs lang-stata\"><span class=\"hljs-keyword\">var</span> title = new Buffer(<span class=\"hljs-string\">\"【ONEBOX】报警\"</span>);\n<span class=\"hljs-keyword\">var</span> mail_title = title.<span class=\"hljs-keyword\">toString</span>(<span class=\"hljs-string\">\"base64\"</span>);\n<span class=\"hljs-keyword\">var</span> mail_title = <span class=\"hljs-string\">\"=?UTF-8?B?\"</span>+mail_title+<span class=\"hljs-string\">\"?=\"</span>;\n<span class=\"hljs-keyword\">var</span> mail_cont = <span class=\"hljs-string\">\"这里是发送邮件内容\"</span>;\n<span class=\"hljs-keyword\">var</span> mailList = <span class=\"hljs-string\">\"qh_test@126.com qh_test1@126.com\"</span>;\n<span class=\"hljs-keyword\">var</span> exec = require(<span class=\"hljs-string\">\"child_process\"</span>).exec;\nexec(`echo <span class=\"hljs-string\">\"${mail_cont}\"</span> | mail -s <span class=\"hljs-string\">\"$(echo -e \"</span><span class=\"hljs-variable\">${mail_title}</span>\\nContent-<span class=\"hljs-keyword\">Type</span>: text/html<span class=\"hljs-string\">\")\"</span> <span class=\"hljs-variable\">${mailList}</span>`);\n</code></pre><p>以上。</p>\n','# Linux发邮件\n* python脚本\n* shell脚本\n\n之前一直使用python脚本来发送邮件，后来发现直接使用sendmail服务来发送邮件更方便一些，所以本文就说一下使用mail来发送邮件。\n\n1 shell作为编辑器，编辑完成后ctrl＋d结束\n\n```\nmail -s test qh_test@126.com\n```\n\n2 利用管道发送邮件\n\n```\necho \"mail content\" | mail -s \"mail title\" qh_test@126.com\n```\n\n3 以file的内容为邮件内容发信\n\n```\nmail -s \"mail title\" qh_test@126.com < file\n```\n\n4 以file的内容为邮件内容向多个用户发信\n\n```\nmail -s \"mail title\" -c qh_test@126.com qh_test1@126.com < file\n```\n\n**问题：**\n\n使用第二种发式发送邮件时，本地中文不会出现乱码，但是部署到服务端就会出现乱码，标题稳定出现乱码，内容随机出现乱码。\n\n**解决：**\n\n1 解决标题乱码\n\n利用base64编码标题内容，例如，如果UTF-8编码的字符串`标题`进行base64编码后的内容为`5qCH6aKY`，则邮件标题为：\n\n```\nSubject:=?UTF-8?B?5qCH6aKY?=\n```\n\n2 解决内容乱码\n\n解决内容乱码比较简单，首先内容使用UTF-8编码，然后再修改邮件为`Content-type`为：\n\n```\nContent-Type:text/html;charset=UTF-8\n```\n\n基于此，那么在nodejs代码中发送邮件就可以这样写：\n\n	var title = new Buffer(\"【ONEBOX】报警\");\n	var mail_title = title.toString(\'base64\');\n	var mail_title = \'=?UTF-8?B?\'+mail_title+\'?=\';\n	var mail_cont = \"这里是发送邮件内容\";\n	var mailList = \"qh_test@126.com qh_test1@126.com\";\n	var exec = require(\'child_process\').exec;\n	exec(`echo \'${mail_cont}\' | mail -s \"$(echo -e \"${mail_title}\\nContent-Type: text/html\")\" ${mailList}`);\n\n以上。\n\n\n','<h1 id=\"linux-\">Linux发邮件</h1>\n<ul>\n<li>python脚本</li>\n<li>shell脚本</li>\n</ul>\n<p>之前一直使用python脚本来发送邮件，后来发现直接使用sendmail服务来发送邮件更方便一些，所以本文就说一下使用mail来发送邮件。</p>\n<p>1 shell作为编辑器，编辑完成后ctrl＋d结束</p>\n<pre><code class=\"hljs lang-bash\">mail <span class=\"hljs-_\">-s</span> <span class=\"hljs-built_in\">test</span> qh_<span class=\"hljs-built_in\">test</span>@126.com\n</code></pre><p>2 利用管道发送邮件</p>\n<pre><code class=\"hljs lang-bash\"><span class=\"hljs-built_in\">echo</span> <span class=\"hljs-string\">\"mail content\"</span> | mail <span class=\"hljs-_\">-s</span> <span class=\"hljs-string\">\"mail title\"</span> qh_<span class=\"hljs-built_in\">test</span>@126.com\n</code></pre><p>3 以file的内容为邮件内容发信</p>\n<pre><code class=\"hljs lang-bash\">mail <span class=\"hljs-_\">-s</span> <span class=\"hljs-string\">\"mail title\"</span> qh_<span class=\"hljs-built_in\">test</span>@126.com &lt; file\n</code></pre><p>4 以file的内容为邮件内容向多个用户发信</p>\n<pre><code class=\"hljs lang-stylus\">mail -s <span class=\"hljs-string\">\"mail title\"</span> -c qh_test@<span class=\"hljs-number\">126</span><span class=\"hljs-selector-class\">.com</span> qh_test1@<span class=\"hljs-number\">126</span><span class=\"hljs-selector-class\">.com</span> &lt; file\n</code></pre><p><strong>问题：</strong></p>\n<p>使用第二种发式发送邮件时，本地中文不会出现乱码，但是部署到服务端就会出现乱码，标题稳定出现乱码，内容随机出现乱码。</p>\n<p><strong>解决：</strong></p>\n<p>1 解决标题乱码</p>\n<p>利用base64编码标题内容，例如，如果UTF-8编码的字符串<code>标题</code>进行base64编码后的内容为<code>5qCH6aKY</code>，则邮件标题为：</p>\n<pre><code class=\"hljs lang-erlang-repl\">Subject:=?UTF-<span class=\"hljs-number\">8</span>?B?<span class=\"hljs-number\">5</span>qCH6aKY?=\n</code></pre><p>2 解决内容乱码</p>\n<p>解决内容乱码比较简单，首先内容使用UTF-8编码，然后再修改邮件为<code>Content-type</code>为：</p>\n<pre><code class=\"hljs lang-sqf\">Content-<span class=\"hljs-built_in\">Type</span>:<span class=\"hljs-built_in\">text</span>/html;charset=UTF-<span class=\"hljs-number\">8</span>\n</code></pre><p>基于此，那么在nodejs代码中发送邮件就可以这样写：</p>\n<pre><code class=\"hljs lang-stata\"><span class=\"hljs-keyword\">var</span> title = new Buffer(<span class=\"hljs-string\">\"【ONEBOX】报警\"</span>);\n<span class=\"hljs-keyword\">var</span> mail_title = title.<span class=\"hljs-keyword\">toString</span>(<span class=\"hljs-string\">\"base64\"</span>);\n<span class=\"hljs-keyword\">var</span> mail_title = <span class=\"hljs-string\">\"=?UTF-8?B?\"</span>+mail_title+<span class=\"hljs-string\">\"?=\"</span>;\n<span class=\"hljs-keyword\">var</span> mail_cont = <span class=\"hljs-string\">\"这里是发送邮件内容\"</span>;\n<span class=\"hljs-keyword\">var</span> mailList = <span class=\"hljs-string\">\"qh_test@126.com qh_test1@126.com\"</span>;\n<span class=\"hljs-keyword\">var</span> exec = require(<span class=\"hljs-string\">\"child_process\"</span>).exec;\nexec(`echo <span class=\"hljs-string\">\"${mail_cont}\"</span> | mail -s <span class=\"hljs-string\">\"$(echo -e \"</span><span class=\"hljs-variable\">${mail_title}</span>\\nContent-<span class=\"hljs-keyword\">Type</span>: text/html<span class=\"hljs-string\">\")\"</span> <span class=\"hljs-variable\">${mailList}</span>`);\n</code></pre><p>以上。</p>\n',1,'2016-07-28 22:07:47','2016-07-28 22:11:49',1,0,'\"{\\\"push_sites\\\":[]}\"'),(10555,22,1,3,'ivan✓','about','<p>问：做程序猿很累，想换一行，请问咋办？</p>\n<p>答：敲一下回车。</p>\n<p>电源插了么？电脑开机了么？重启一下电脑？</p>\n','\n\n问：做程序猿很累，想换一行，请问咋办？\n\n答：敲一下回车。\n\n电源插了么？电脑开机了么？重启一下电脑？','<p>问：做程序猿很累，想换一行，请问咋办？</p>\n<p>答：敲一下回车。</p>\n<p>电源插了么？电脑开机了么？重启一下电脑？</p>\n',1,'2016-07-29 19:17:12','2016-07-30 10:41:15',1,0,'{\"push_sites\":[]}'),(10556,22,1,3,'招租','links','<p><a href=\"http://jiaolonghuang.github.io/\">小路口</a></p>\n','[小路口](http://jiaolonghuang.github.io/)','<p><a href=\"http://jiaolonghuang.github.io/\">小路口</a></p>\n',1,'2016-08-15 21:36:14','2016-08-15 09:37:14',1,0,'{\"push_sites\":[]}'),(10557,22,0,3,'node路径问题&path模块处理文件路径','node-path','<h2 id=\"-\">常见路径：</h2>\n<p>node中的文件路径主要有<code>__dirname</code>，<code>__filename</code>，<code>process.cwd()</code>，<code>./</code>，<code>../</code>，前三个都是绝对路径，为了便于比较，<code>./</code>和<code>../</code>我们通过<code>path.resolve(&#39;./&#39;)</code>来转换为绝对路径。</p>\n<p>举个栗子：</p>\n<p>假如我们有这样一个目录结构：</p>\n<pre><code class=\"hljs lang-crystal\">app/\n    -<span class=\"hljs-class\"><span class=\"hljs-keyword\">lib</span>/</span>\n        -common.js\n    -model/\n        -task.js\n        -test.js\n</code></pre><p>在test.js里编写如下的代码：</p>\n<pre><code class=\"hljs lang-javascript\"><span class=\"hljs-keyword\">var</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"path\"</span>);\n<span class=\"hljs-built_in\">console</span>.log(__dirname);\n<span class=\"hljs-built_in\">console</span>.log(__filename);\n<span class=\"hljs-built_in\">console</span>.log(process.cwd());\n<span class=\"hljs-built_in\">console</span>.log(path.resolve(<span class=\"hljs-string\">\"./\"</span>));\n</code></pre><p>在model目录下运行<code>node task.js</code>得到的输出是：</p>\n<pre><code class=\"hljs lang-dts\"><span class=\"hljs-meta-keyword\">/home/</span>ivan<span class=\"hljs-meta-keyword\">/app/</span>model\n<span class=\"hljs-meta-keyword\">/home/</span>ivan<span class=\"hljs-meta-keyword\">/app/</span>model/task.js\n<span class=\"hljs-meta-keyword\">/home/</span>ivan<span class=\"hljs-meta-keyword\">/app/</span>model\n<span class=\"hljs-meta-keyword\">/home/</span>ivan<span class=\"hljs-meta-keyword\">/app/</span>model\n</code></pre><p>然后在app目录下运行<code>node model/task.js</code>，得到输出结果：</p>\n<pre><code class=\"hljs lang-dts\"><span class=\"hljs-meta-keyword\">/home/</span>ivan<span class=\"hljs-meta-keyword\">/app/</span>model\n<span class=\"hljs-meta-keyword\">/home/</span>ivan<span class=\"hljs-meta-keyword\">/app/</span>model/task.js\n<span class=\"hljs-meta-keyword\">/home/</span>ivan/app\n<span class=\"hljs-meta-keyword\">/home/</span>ivan/app\n</code></pre><p>依上，我们是否可以得到这样的一个结论：</p>\n<ul>\n<li><code>__dirname</code>总是返回被执行的js所在文件夹的绝对路径。</li>\n<li><code>__filename</code>总是返回被执行js文件的绝对路径。</li>\n<li><code>process.cwd()</code>总是返回运行node命令所在的文件夹的绝对路径。</li>\n<li><code>./</code>跟<code>process.cwd()</code>一样一样的。</li>\n</ul>\n<p>但是经常见到 <code>require(&#39;../lib/common&#39;)</code>里一直都是各种相对路径写，也没见什么报错呀，\n再举个栗子，还是上面的结构，<code>model/task.js</code>里的代码改成：</p>\n<pre><code class=\"hljs lang-javascript\"><span class=\"hljs-keyword\">var</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"fs\"</span>);\n<span class=\"hljs-keyword\">var</span> common = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"../lib/common\"</span>);\n\nfs.readFile(<span class=\"hljs-string\">\"../lib/common.js\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, data</span>) </span>{\n    <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">console</span>.log(err);\n    <span class=\"hljs-built_in\">console</span>.log(data);\n});\n</code></pre><p>在model目录下运行<code>node task.js</code>，一切OK，都没有报错。然后在app目录下运行<code>node model/task.js</code>，然后很果断的就报错了：</p>\n<p><img src=\"http://7xvbqa.com1.z0.glb.clouddn.com/qiniu/1471763222952.png\" width=\"286\"/></p>\n<pre><code class=\"hljs lang-vim\">{ [Error: ENOENT: <span class=\"hljs-keyword\">no</span> such <span class=\"hljs-keyword\">file</span> <span class=\"hljs-built_in\">or</span> directory, <span class=\"hljs-keyword\">open</span> <span class=\"hljs-string\">\"../lib/common.js\"</span>]\n  errno: -<span class=\"hljs-number\">2</span>,\n  code: <span class=\"hljs-string\">\"ENOENT\"</span>,\n  syscal<span class=\"hljs-variable\">l:</span> <span class=\"hljs-string\">\"open\"</span>,\n  path: <span class=\"hljs-string\">\"../lib/common.js\"</span> }\n</code></pre><p>所以，问题来了。按照前面得到的结论，<code>./</code>跟<code>process.cwd()</code>一样一样的。那么在model目录下执行的时候，<code>../lib/common.js</code>会被转变成<code>/home/ivan/app/lib/common.js</code>，在app目录下执行的时候，<code>../lib/common.js</code>会被转变成<code>/home/ivan/lib/common.js</code>，这个路径是不存在的，但是从运行结果来看，<code>require(&#39;../lib/common&#39;)</code>是OK的，只是readFile时报错了。</p>\n<p>那么关于<code>./</code>正确的结论出来了：\n在require()中使用的是跟<code>__dirname</code>的效果相同，不会因为启动脚本的目录不一样而改变，在其他情况下跟<code>process.cwd()</code>效果相同，是相对于启动脚本所在目录的路径。</p>\n<h2 id=\"-\">总结</h2>\n<p>所以事实证明前端得到的结论中1，2，3是OK的，最后一个不准确。</p>\n<p>只有在<code>require()</code>时才使用相对路径的写法，其他地方一律使用绝对路径，如下：</p>\n<pre><code class=\"hljs lang-xl\">var <span class=\"hljs-built_in\">path</span>= require(“<span class=\"hljs-built_in\">path</span>”);\n<span class=\"hljs-comment\">//当前目录下</span>\n<span class=\"hljs-built_in\">path</span>.dirname(__filename)+<span class=\"hljs-string\">\"/test.js\"</span>;\n<span class=\"hljs-comment\">//相邻目录下</span>\n<span class=\"hljs-built_in\">path</span>.resolve(__dirname, <span class=\"hljs-string\">\"../lib/common.js\"</span>);\n</code></pre><h2 id=\"-\">扩展</h2>\n<p>Node.js使用path模块处理文件路径</p>\n<ul>\n<li><p><code>path.normalize(p)</code> 文件路径处理\n  path模块中的normalize()方法用来规范化路径字符串。可用于处理路径中的&quot;//&quot;、&quot;..&quot;、&quot;.&quot;等字符</p>\n<pre><code class=\"hljs lang-javascript\">  <span class=\"hljs-keyword\">var</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"path\"</span>);\n  path.normalize(<span class=\"hljs-string\">\"/foo/bar//baz/asdf/..\"</span>);\n  <span class=\"hljs-comment\">// 处理后</span>\n  <span class=\"hljs-string\">\"/foo/bar/baz/asdf\"</span>\n</code></pre></li>\n<li><p><code>path.join([path1][, path2][, ...])</code> 连接路径</p>\n<p>  path.join()方法可以连接任意多个路径字符串。要连接的多个路径可做为参数传入。path.join()方法在接边路径的同时也会对路径进行规范化。例如：</p>\n<pre><code class=\"hljs lang-lasso\">  <span class=\"hljs-built_in\">var</span> path = <span class=\"hljs-keyword\">require</span>(<span class=\"hljs-string\">\"path\"</span>);\n  <span class=\"hljs-comment\">//合法的字符串连接</span>\n  path.<span class=\"hljs-keyword\">join</span>(<span class=\"hljs-string\">\"/foo\"</span>, <span class=\"hljs-string\">\"bar\"</span>, <span class=\"hljs-string\">\"baz/asdf\"</span>, <span class=\"hljs-string\">\"..\"</span>)\n  <span class=\"hljs-comment\">// 连接后</span>\n  <span class=\"hljs-string\">\"/foo/bar/baz/asdf\"</span>\n\n  <span class=\"hljs-comment\">//不合法的字符串将抛出异常</span>\n  path.<span class=\"hljs-keyword\">join</span>(<span class=\"hljs-string\">\"foo\"</span>, {}, <span class=\"hljs-string\">\"bar\"</span>)\n  <span class=\"hljs-comment\">// 抛出的异常</span>\n  TypeError: Arguments <span class=\"hljs-keyword\">to</span> path.<span class=\"hljs-keyword\">join</span> must be strings<span class=\"hljs-string\">\"\n</span></code></pre></li>\n<li><p><code>path.resolve([from ...], to)</code> 路径解析\n  path.resolve()方法可以将多个路径解析为一个规范化的绝对路径。其处理方式类似于对这些路径逐一进行cd操作，与cd操作不同的是，这引起路径可以是文件，并且可不必实际存在（resolve()方法不会利用底层的文件系统判断路径是否存在，而只是进行路径字符串操作）。例如：</p>\n<pre><code class=\"hljs lang-less\">  path<span class=\"hljs-selector-class\">.resolve</span>(<span class=\"hljs-string\">\"foo/bar\"</span>, <span class=\"hljs-string\">\"/tmp/file/\"</span>, <span class=\"hljs-string\">\"..\"</span>, <span class=\"hljs-string\">\"a/../subfile\"</span>)\n</code></pre><p>  其处理方式类型于</p>\n<pre><code class=\"hljs lang-stata\">  <span class=\"hljs-keyword\">cd</span> foo/bar\n  <span class=\"hljs-keyword\">cd</span> /tmp/<span class=\"hljs-keyword\">file</span>/\n  <span class=\"hljs-keyword\">cd</span> ..\n  <span class=\"hljs-keyword\">cd</span> a/../subfile\n  <span class=\"hljs-keyword\">pwd</span>\n</code></pre><p>  如果解析的不是绝对路径，path.resolve()会将当前工作目录加到解析结果的前面。例如：</p>\n<pre><code class=\"hljs lang-livecodeserver\">  path.<span class=\"hljs-built_in\">resolve</span>(<span class=\"hljs-string\">\"/foo/bar\"</span>, <span class=\"hljs-string\">\"./baz\"</span>)\n <span class=\"hljs-comment\"> // 输出结果为</span>\n  <span class=\"hljs-string\">\"/foo/bar/baz\"</span>\n\n  path.<span class=\"hljs-built_in\">resolve</span>(<span class=\"hljs-string\">\"/foo/bar\"</span>, <span class=\"hljs-string\">\"/tmp/file/\"</span>)\n <span class=\"hljs-comment\"> // 输出结果为</span>\n  <span class=\"hljs-string\">\"/tmp/file\"</span>\n\n  path.<span class=\"hljs-built_in\">resolve</span>(<span class=\"hljs-string\">\"wwwroot\"</span>, <span class=\"hljs-string\">\"static_files/png/\"</span>, <span class=\"hljs-string\">\"../gif/image.gif\"</span>)\n <span class=\"hljs-comment\"> // 当前的工作路径是 /home/ivan/test，则输出结果为</span>\n  <span class=\"hljs-string\">\"/home/ivan/test/wwwroot/static_files/gif/image.gif\"</span>\n</code></pre></li>\n</ul>\n<ul>\n<li><p><code>path.relative(from, to)</code> 查找两个绝对路径的相对关系\n  path.relative()方法可以找出一个绝对路径到另一个绝对路径的相对关系。例如：</p>\n<pre><code class=\"hljs lang-javascript\">  <span class=\"hljs-keyword\">var</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"path\"</span>);\n  path.relative(<span class=\"hljs-string\">\"/Users/ivan/test/app/demo\"</span>, <span class=\"hljs-string\">\"/Users/ivan/test/lib\"</span>);\n  <span class=\"hljs-comment\">// 结果</span>\n  <span class=\"hljs-string\">\"../../lib\"</span>\n</code></pre></li>\n<li><p><code>path.dirname(p) path.basename(p[, ext]) path.extname(p)</code> 提取路径的组成部分</p>\n<p>   <code>path.dirname()</code>方法可以提取出一个文件路径中的目录的部分。</p>\n<p>   <code>path.basename()</code>方法可以提取出一个文件路径中的文件的部分。</p>\n<p>   <code>path.extname()</code>方法可以提取文件的扩展名。例如：</p>\n</li>\n</ul>\n<pre><code class=\"hljs lang-xl\">var <span class=\"hljs-built_in\">path</span> = require(<span class=\"hljs-string\">\"path\"</span>);\n<span class=\"hljs-built_in\">path</span>.dirname(<span class=\"hljs-string\">\"/Users/ivan/demo/path.js\"</span>)\n<span class=\"hljs-comment\">// 结果</span>\n<span class=\"hljs-string\">\"/Users/ivan/demo\"</span>\n\n<span class=\"hljs-built_in\">path</span>.basename(<span class=\"hljs-string\">\"/Users/ivan/demo/path.js\"</span>)\n<span class=\"hljs-comment\">// 结果</span>\n<span class=\"hljs-string\">\"path.js\"</span>\n\n<span class=\"hljs-built_in\">path</span>.extname(<span class=\"hljs-string\">\"/Users/ivan/demo/path.js\"</span>)\n<span class=\"hljs-comment\">// 结果</span>\n<span class=\"hljs-string\">\".js\"</span>\n</code></pre><p>path.basename()方法还可以指定第二个参数：文件的扩展名，指定后可以提取文件名。指定扩展名不合法时将返回文件全名。例如：</p>\n<pre><code class=\"hljs lang-xl\">var <span class=\"hljs-built_in\">path</span> = require(<span class=\"hljs-string\">\"path\"</span>);\n\n<span class=\"hljs-built_in\">path</span>.basename(<span class=\"hljs-string\">\"/Users/ivan/demo/path.js\"</span>, <span class=\"hljs-string\">\".js\"</span>)\n<span class=\"hljs-comment\">// 结果</span>\n<span class=\"hljs-string\">\"path\"</span>\n\n<span class=\"hljs-built_in\">path</span>.basename(<span class=\"hljs-string\">\"/Users/ivan/demo/path.js\"</span>, <span class=\"hljs-string\">\".html\"</span>)\n<span class=\"hljs-comment\">// 结果</span>\n<span class=\"hljs-string\">\"path.js\"</span>\n</code></pre><blockquote>\n<p>在早期的Node.js版本中path模块还有个path.exists()方法，用于判断文件是否存在，但已被fs模块中的fs.exists()代替。</p>\n</blockquote>\n<p>以上。</p>\n','## 常见路径：\n\nnode中的文件路径主要有`__dirname`，`__filename`，`process.cwd()`，`./`，`../`，前三个都是绝对路径，为了便于比较，`./`和`../`我们通过`path.resolve(\'./\')`来转换为绝对路径。\n\n举个栗子：\n\n假如我们有这样一个目录结构：\n\n```\napp/\n	-lib/\n		-common.js\n	-model/\n		-task.js\n		-test.js\n```\n\n在test.js里编写如下的代码：\n\n```\nvar path = require(\'path\');\nconsole.log(__dirname);\nconsole.log(__filename);\nconsole.log(process.cwd());\nconsole.log(path.resolve(\'./\'));\n```\n\n在model目录下运行`node task.js`得到的输出是：\n\n```\n/home/ivan/app/model\n/home/ivan/app/model/task.js\n/home/ivan/app/model\n/home/ivan/app/model\n```\n\n然后在app目录下运行`node model/task.js`，得到输出结果：\n\n```\n/home/ivan/app/model\n/home/ivan/app/model/task.js\n/home/ivan/app\n/home/ivan/app\n```\n\n依上，我们是否可以得到这样的一个结论：\n\n-  `__dirname`总是返回被执行的js所在文件夹的绝对路径。\n-  `__filename`总是返回被执行js文件的绝对路径。\n-  `process.cwd()`总是返回运行node命令所在的文件夹的绝对路径。\n-  `./`跟`process.cwd()`一样一样的。\n\n但是经常见到 `require(\'../lib/common\')`里一直都是各种相对路径写，也没见什么报错呀，\n再举个栗子，还是上面的结构，`model/task.js`里的代码改成：\n\n```\nvar fs = require(\'fs\');\nvar common = require(\'../lib/common\');\n\nfs.readFile(\'../lib/common.js\', function (err, data) {\n    if (err) return console.log(err);\n    console.log(data);\n});\n```\n\n在model目录下运行`node task.js`，一切OK，都没有报错。然后在app目录下运行`node model/task.js`，然后很果断的就报错了：\n\n<img src=\"http://7xvbqa.com1.z0.glb.clouddn.com/qiniu/1471763222952.png\" width=\"286\"/>\n\n```\n{ [Error: ENOENT: no such file or directory, open \'../lib/common.js\']\n  errno: -2,\n  code: \'ENOENT\',\n  syscall: \'open\',\n  path: \'../lib/common.js\' }\n```\n\n所以，问题来了。按照前面得到的结论，`./`跟`process.cwd()`一样一样的。那么在model目录下执行的时候，`../lib/common.js`会被转变成`/home/ivan/app/lib/common.js`，在app目录下执行的时候，`../lib/common.js`会被转变成`/home/ivan/lib/common.js`，这个路径是不存在的，但是从运行结果来看，`require(\'../lib/common\')`是OK的，只是readFile时报错了。\n\n那么关于`./`正确的结论出来了：\n在require()中使用的是跟`__dirname`的效果相同，不会因为启动脚本的目录不一样而改变，在其他情况下跟`process.cwd()`效果相同，是相对于启动脚本所在目录的路径。\n\n\n## 总结\n\n所以事实证明前端得到的结论中1，2，3是OK的，最后一个不准确。\n\n只有在`require()`时才使用相对路径的写法，其他地方一律使用绝对路径，如下：\n\n```\nvar path= require(“path”);\n//当前目录下\npath.dirname(__filename)+\'/test.js\';\n//相邻目录下\npath.resolve(__dirname, \'../lib/common.js\');\n```\n\n## 扩展\nNode.js使用path模块处理文件路径\n\n* `path.normalize(p)` 文件路径处理\n	path模块中的normalize()方法用来规范化路径字符串。可用于处理路径中的\"//\"、\"..\"、\".\"等字符\n	\n	```\n	var path = require(\'path\');\n	path.normalize(\'/foo/bar//baz/asdf/..\');\n	// 处理后\n	\'/foo/bar/baz/asdf\'\n	```\n	\n* `path.join([path1][, path2][, ...])` 连接路径\n	\n	path.join()方法可以连接任意多个路径字符串。要连接的多个路径可做为参数传入。path.join()方法在接边路径的同时也会对路径进行规范化。例如：\n	\n	```\n	var path = require(\'path\');\n	//合法的字符串连接\n	path.join(\'/foo\', \'bar\', \'baz/asdf\', \'..\')\n	// 连接后\n	\'/foo/bar/baz/asdf\'\n	\n	//不合法的字符串将抛出异常\n	path.join(\'foo\', {}, \'bar\')\n	// 抛出的异常\n	TypeError: Arguments to path.join must be strings\'\n	```\n	\n* `path.resolve([from ...], to)` 路径解析\n	path.resolve()方法可以将多个路径解析为一个规范化的绝对路径。其处理方式类似于对这些路径逐一进行cd操作，与cd操作不同的是，这引起路径可以是文件，并且可不必实际存在（resolve()方法不会利用底层的文件系统判断路径是否存在，而只是进行路径字符串操作）。例如：\n	\n	```\n	path.resolve(\'foo/bar\', \'/tmp/file/\', \'..\', \'a/../subfile\')\n	```\n	\n	其处理方式类型于\n	\n	```\n	cd foo/bar\n	cd /tmp/file/\n	cd ..\n	cd a/../subfile\n	pwd\n	```\n	如果解析的不是绝对路径，path.resolve()会将当前工作目录加到解析结果的前面。例如：\n	\n	```\n	path.resolve(\'/foo/bar\', \'./baz\')\n	// 输出结果为\n	\'/foo/bar/baz\'\n	\n	path.resolve(\'/foo/bar\', \'/tmp/file/\')\n	// 输出结果为\n	\'/tmp/file\'\n	\n	path.resolve(\'wwwroot\', \'static_files/png/\', \'../gif/image.gif\')\n	// 当前的工作路径是 /home/ivan/test，则输出结果为\n	\'/home/ivan/test/wwwroot/static_files/gif/image.gif\'\n	```\n	\n	\n* `path.relative(from, to)` 查找两个绝对路径的相对关系\n	path.relative()方法可以找出一个绝对路径到另一个绝对路径的相对关系。例如：\n	\n	```\n	var path = require(\'path\');\n	path.relative(\'/Users/ivan/test/app/demo\', \'/Users/ivan/test/lib\');\n	// 结果\n	\'../../lib\'\n	```\n\n* `path.dirname(p) path.basename(p[, ext]) path.extname(p)` 提取路径的组成部分\n\n     `path.dirname()`方法可以提取出一个文件路径中的目录的部分。\n\n     `path.basename()`方法可以提取出一个文件路径中的文件的部分。\n\n     `path.extname()`方法可以提取文件的扩展名。例如：\n\n```\nvar path = require(\'path\');\npath.dirname(\'/Users/ivan/demo/path.js\')\n// 结果\n\'/Users/ivan/demo\'\n\npath.basename(\'/Users/ivan/demo/path.js\')\n// 结果\n\'path.js\'\n\npath.extname(\'/Users/ivan/demo/path.js\')\n// 结果\n\'.js\'\n```\n\npath.basename()方法还可以指定第二个参数：文件的扩展名，指定后可以提取文件名。指定扩展名不合法时将返回文件全名。例如：\n\n```\nvar path = require(\'path\');\n\npath.basename(\'/Users/ivan/demo/path.js\', \'.js\')\n// 结果\n\'path\'\n\npath.basename(\'/Users/ivan/demo/path.js\', \'.html\')\n// 结果\n\'path.js\'\n```\n\n> 在早期的Node.js版本中path模块还有个path.exists()方法，用于判断文件是否存在，但已被fs模块中的fs.exists()代替。\n\n以上。','<h2 id=\"-\">常见路径：</h2>\n<p>node中的文件路径主要有<code>__dirname</code>，<code>__filename</code>，<code>process.cwd()</code>，<code>./</code>，<code>../</code>，前三个都是绝对路径，为了便于比较，<code>./</code>和<code>../</code>我们通过<code>path.resolve(&#39;./&#39;)</code>来转换为绝对路径。</p>\n<p>举个栗子：</p>\n<p>假如我们有这样一个目录结构：</p>\n<pre><code class=\"hljs lang-crystal\">app/\n    -<span class=\"hljs-class\"><span class=\"hljs-keyword\">lib</span>/</span>\n        -common.js\n    -model/\n        -task.js\n        -test.js\n</code></pre><p>在test.js里编写如下的代码：</p>\n<pre><code class=\"hljs lang-javascript\"><span class=\"hljs-keyword\">var</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"path\"</span>);\n<span class=\"hljs-built_in\">console</span>.log(__dirname);\n<span class=\"hljs-built_in\">console</span>.log(__filename);\n<span class=\"hljs-built_in\">console</span>.log(process.cwd());\n<span class=\"hljs-built_in\">console</span>.log(path.resolve(<span class=\"hljs-string\">\"./\"</span>));\n</code></pre><p>在model目录下运行<code>node task.js</code>得到的输出是：</p>\n<pre><code class=\"hljs lang-dts\"><span class=\"hljs-meta-keyword\">/home/</span>ivan<span class=\"hljs-meta-keyword\">/app/</span>model\n<span class=\"hljs-meta-keyword\">/home/</span>ivan<span class=\"hljs-meta-keyword\">/app/</span>model/task.js\n<span class=\"hljs-meta-keyword\">/home/</span>ivan<span class=\"hljs-meta-keyword\">/app/</span>model\n<span class=\"hljs-meta-keyword\">/home/</span>ivan<span class=\"hljs-meta-keyword\">/app/</span>model\n</code></pre><p>然后在app目录下运行<code>node model/task.js</code>，得到输出结果：</p>\n<pre><code class=\"hljs lang-dts\"><span class=\"hljs-meta-keyword\">/home/</span>ivan<span class=\"hljs-meta-keyword\">/app/</span>model\n<span class=\"hljs-meta-keyword\">/home/</span>ivan<span class=\"hljs-meta-keyword\">/app/</span>model/task.js\n<span class=\"hljs-meta-keyword\">/home/</span>ivan/app\n<span class=\"hljs-meta-keyword\">/home/</span>ivan/app\n</code></pre><p>依上，我们是否可以得到这样的一个结论：</p>\n<ul>\n<li><code>__dirname</code>总是返回被执行的js所在文件夹的绝对路径。</li>\n<li><code>__filename</code>总是返回被执行js文件的绝对路径。</li>\n<li><code>process.cwd()</code>总是返回运行node命令所在的文件夹的绝对路径。</li>\n<li><code>./</code>跟<code>process.cwd()</code>一样一样的。</li>\n</ul>\n<p>但是经常见到 <code>require(&#39;../lib/common&#39;)</code>里一直都是各种相对路径写，也没见什么报错呀，\n再举个栗子，还是上面的结构，<code>model/task.js</code>里的代码改成：</p>\n<pre><code class=\"hljs lang-javascript\"><span class=\"hljs-keyword\">var</span> fs = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"fs\"</span>);\n<span class=\"hljs-keyword\">var</span> common = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"../lib/common\"</span>);\n\nfs.readFile(<span class=\"hljs-string\">\"../lib/common.js\"</span>, <span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> (<span class=\"hljs-params\">err, data</span>) </span>{\n    <span class=\"hljs-keyword\">if</span> (err) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">console</span>.log(err);\n    <span class=\"hljs-built_in\">console</span>.log(data);\n});\n</code></pre><p>在model目录下运行<code>node task.js</code>，一切OK，都没有报错。然后在app目录下运行<code>node model/task.js</code>，然后很果断的就报错了：</p>\n<p><img src=\"http://7xvbqa.com1.z0.glb.clouddn.com/qiniu/1471763222952.png\" width=\"286\"/></p>\n<pre><code class=\"hljs lang-vim\">{ [Error: ENOENT: <span class=\"hljs-keyword\">no</span> such <span class=\"hljs-keyword\">file</span> <span class=\"hljs-built_in\">or</span> directory, <span class=\"hljs-keyword\">open</span> <span class=\"hljs-string\">\"../lib/common.js\"</span>]\n  errno: -<span class=\"hljs-number\">2</span>,\n  code: <span class=\"hljs-string\">\"ENOENT\"</span>,\n  syscal<span class=\"hljs-variable\">l:</span> <span class=\"hljs-string\">\"open\"</span>,\n  path: <span class=\"hljs-string\">\"../lib/common.js\"</span> }\n</code></pre><p>所以，问题来了。按照前面得到的结论，<code>./</code>跟<code>process.cwd()</code>一样一样的。那么在model目录下执行的时候，<code>../lib/common.js</code>会被转变成<code>/home/ivan/app/lib/common.js</code>，在app目录下执行的时候，<code>../lib/common.js</code>会被转变成<code>/home/ivan/lib/common.js</code>，这个路径是不存在的，但是从运行结果来看，<code>require(&#39;../lib/common&#39;)</code>是OK的，只是readFile时报错了。</p>\n<p>那么关于<code>./</code>正确的结论出来了：\n在require()中使用的是跟<code>__dirname</code>的效果相同，不会因为启动脚本的目录不一样而改变，在其他情况下跟<code>process.cwd()</code>效果相同，是相对于启动脚本所在目录的路径。</p>\n<h2 id=\"-\">总结</h2>\n<p>所以事实证明前端得到的结论中1，2，3是OK的，最后一个不准确。</p>\n<p>只有在<code>require()</code>时才使用相对路径的写法，其他地方一律使用绝对路径，如下：</p>\n<pre><code class=\"hljs lang-xl\">var <span class=\"hljs-built_in\">path</span>= require(“<span class=\"hljs-built_in\">path</span>”);\n<span class=\"hljs-comment\">//当前目录下</span>\n<span class=\"hljs-built_in\">path</span>.dirname(__filename)+<span class=\"hljs-string\">\"/test.js\"</span>;\n<span class=\"hljs-comment\">//相邻目录下</span>\n<span class=\"hljs-built_in\">path</span>.resolve(__dirname, <span class=\"hljs-string\">\"../lib/common.js\"</span>);\n</code></pre><h2 id=\"-\">扩展</h2>\n<p>Node.js使用path模块处理文件路径</p>\n<ul>\n<li><p><code>path.normalize(p)</code> 文件路径处理\n  path模块中的normalize()方法用来规范化路径字符串。可用于处理路径中的&quot;//&quot;、&quot;..&quot;、&quot;.&quot;等字符</p>\n<pre><code class=\"hljs lang-javascript\">  <span class=\"hljs-keyword\">var</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"path\"</span>);\n  path.normalize(<span class=\"hljs-string\">\"/foo/bar//baz/asdf/..\"</span>);\n  <span class=\"hljs-comment\">// 处理后</span>\n  <span class=\"hljs-string\">\"/foo/bar/baz/asdf\"</span>\n</code></pre></li>\n<li><p><code>path.join([path1][, path2][, ...])</code> 连接路径</p>\n<p>  path.join()方法可以连接任意多个路径字符串。要连接的多个路径可做为参数传入。path.join()方法在接边路径的同时也会对路径进行规范化。例如：</p>\n<pre><code class=\"hljs lang-lasso\">  <span class=\"hljs-built_in\">var</span> path = <span class=\"hljs-keyword\">require</span>(<span class=\"hljs-string\">\"path\"</span>);\n  <span class=\"hljs-comment\">//合法的字符串连接</span>\n  path.<span class=\"hljs-keyword\">join</span>(<span class=\"hljs-string\">\"/foo\"</span>, <span class=\"hljs-string\">\"bar\"</span>, <span class=\"hljs-string\">\"baz/asdf\"</span>, <span class=\"hljs-string\">\"..\"</span>)\n  <span class=\"hljs-comment\">// 连接后</span>\n  <span class=\"hljs-string\">\"/foo/bar/baz/asdf\"</span>\n\n  <span class=\"hljs-comment\">//不合法的字符串将抛出异常</span>\n  path.<span class=\"hljs-keyword\">join</span>(<span class=\"hljs-string\">\"foo\"</span>, {}, <span class=\"hljs-string\">\"bar\"</span>)\n  <span class=\"hljs-comment\">// 抛出的异常</span>\n  TypeError: Arguments <span class=\"hljs-keyword\">to</span> path.<span class=\"hljs-keyword\">join</span> must be strings<span class=\"hljs-string\">\"\n</span></code></pre></li>\n<li><p><code>path.resolve([from ...], to)</code> 路径解析\n  path.resolve()方法可以将多个路径解析为一个规范化的绝对路径。其处理方式类似于对这些路径逐一进行cd操作，与cd操作不同的是，这引起路径可以是文件，并且可不必实际存在（resolve()方法不会利用底层的文件系统判断路径是否存在，而只是进行路径字符串操作）。例如：</p>\n<pre><code class=\"hljs lang-less\">  path<span class=\"hljs-selector-class\">.resolve</span>(<span class=\"hljs-string\">\"foo/bar\"</span>, <span class=\"hljs-string\">\"/tmp/file/\"</span>, <span class=\"hljs-string\">\"..\"</span>, <span class=\"hljs-string\">\"a/../subfile\"</span>)\n</code></pre><p>  其处理方式类型于</p>\n<pre><code class=\"hljs lang-stata\">  <span class=\"hljs-keyword\">cd</span> foo/bar\n  <span class=\"hljs-keyword\">cd</span> /tmp/<span class=\"hljs-keyword\">file</span>/\n  <span class=\"hljs-keyword\">cd</span> ..\n  <span class=\"hljs-keyword\">cd</span> a/../subfile\n  <span class=\"hljs-keyword\">pwd</span>\n</code></pre><p>  如果解析的不是绝对路径，path.resolve()会将当前工作目录加到解析结果的前面。例如：</p>\n<pre><code class=\"hljs lang-livecodeserver\">  path.<span class=\"hljs-built_in\">resolve</span>(<span class=\"hljs-string\">\"/foo/bar\"</span>, <span class=\"hljs-string\">\"./baz\"</span>)\n <span class=\"hljs-comment\"> // 输出结果为</span>\n  <span class=\"hljs-string\">\"/foo/bar/baz\"</span>\n\n  path.<span class=\"hljs-built_in\">resolve</span>(<span class=\"hljs-string\">\"/foo/bar\"</span>, <span class=\"hljs-string\">\"/tmp/file/\"</span>)\n <span class=\"hljs-comment\"> // 输出结果为</span>\n  <span class=\"hljs-string\">\"/tmp/file\"</span>\n\n  path.<span class=\"hljs-built_in\">resolve</span>(<span class=\"hljs-string\">\"wwwroot\"</span>, <span class=\"hljs-string\">\"static_files/png/\"</span>, <span class=\"hljs-string\">\"../gif/image.gif\"</span>)\n <span class=\"hljs-comment\"> // 当前的工作路径是 /home/ivan/test，则输出结果为</span>\n  <span class=\"hljs-string\">\"/home/ivan/test/wwwroot/static_files/gif/image.gif\"</span>\n</code></pre></li>\n</ul>\n<ul>\n<li><p><code>path.relative(from, to)</code> 查找两个绝对路径的相对关系\n  path.relative()方法可以找出一个绝对路径到另一个绝对路径的相对关系。例如：</p>\n<pre><code class=\"hljs lang-javascript\">  <span class=\"hljs-keyword\">var</span> path = <span class=\"hljs-built_in\">require</span>(<span class=\"hljs-string\">\"path\"</span>);\n  path.relative(<span class=\"hljs-string\">\"/Users/ivan/test/app/demo\"</span>, <span class=\"hljs-string\">\"/Users/ivan/test/lib\"</span>);\n  <span class=\"hljs-comment\">// 结果</span>\n  <span class=\"hljs-string\">\"../../lib\"</span>\n</code></pre></li>\n<li><p><code>path.dirname(p) path.basename(p[, ext]) path.extname(p)</code> 提取路径的组成部分</p>\n<p>   <code>path.dirname()</code>方法可以提取出一个文件路径中的目录的部分。</p>\n<p>   <code>path.basename()</code>方法可以提取出一个文件路径中的文件的部分。</p>\n<p>   <code>path.extname()</code>方法可以提取文件的扩展名。例如：</p>\n</li>\n</ul>\n<pre><code class=\"hljs lang-xl\">var <span class=\"hljs-built_in\">path</span> = require(<span class=\"hljs-string\">\"path\"</span>);\n<span class=\"hljs-built_in\">path</span>.dirname(<span class=\"hljs-string\">\"/Users/ivan/demo/path.js\"</span>)\n<span class=\"hljs-comment\">// 结果</span>\n<span class=\"hljs-string\">\"/Users/ivan/demo\"</span>\n\n<span class=\"hljs-built_in\">path</span>.basename(<span class=\"hljs-string\">\"/Users/ivan/demo/path.js\"</span>)\n<span class=\"hljs-comment\">// 结果</span>\n<span class=\"hljs-string\">\"path.js\"</span>\n\n<span class=\"hljs-built_in\">path</span>.extname(<span class=\"hljs-string\">\"/Users/ivan/demo/path.js\"</span>)\n<span class=\"hljs-comment\">// 结果</span>\n<span class=\"hljs-string\">\".js\"</span>\n</code></pre><p>path.basename()方法还可以指定第二个参数：文件的扩展名，指定后可以提取文件名。指定扩展名不合法时将返回文件全名。例如：</p>\n<pre><code class=\"hljs lang-xl\">var <span class=\"hljs-built_in\">path</span> = require(<span class=\"hljs-string\">\"path\"</span>);\n\n<span class=\"hljs-built_in\">path</span>.basename(<span class=\"hljs-string\">\"/Users/ivan/demo/path.js\"</span>, <span class=\"hljs-string\">\".js\"</span>)\n<span class=\"hljs-comment\">// 结果</span>\n<span class=\"hljs-string\">\"path\"</span>\n\n<span class=\"hljs-built_in\">path</span>.basename(<span class=\"hljs-string\">\"/Users/ivan/demo/path.js\"</span>, <span class=\"hljs-string\">\".html\"</span>)\n<span class=\"hljs-comment\">// 结果</span>\n<span class=\"hljs-string\">\"path.js\"</span>\n</code></pre><blockquote>\n<p>在早期的Node.js版本中path模块还有个path.exists()方法，用于判断文件是否存在，但已被fs模块中的fs.exists()代替。</p>\n</blockquote>\n<p>以上。</p>\n',1,'2016-08-19 15:42:46','2016-08-21 03:49:40',1,0,'\"{\\\"push_sites\\\":[]}\"'),(10558,22,0,3,'浏览器窗口定位','js-postion','<h2 id=\"-\">需求：</h2>\n<p>如下图所示，需要知道黄色模块距离浏览器底部的距离，若距离底部距离小于0，需要向上滚动至露出黄色模块。具体布局参数见代码：</p>\n<pre><code class=\"hljs lang-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n   <span class=\"hljs-selector-tag\">html</span>,<span class=\"hljs-selector-tag\">body</span>{<span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">0</span>;<span class=\"hljs-attribute\">margin</span>:<span class=\"hljs-number\">0</span>;}\n   <span class=\"hljs-selector-class\">.wrap</span>{<span class=\"hljs-attribute\">position</span>: relative; <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100%</span>;<span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">800px</span>;  <span class=\"hljs-attribute\">background</span>: <span class=\"hljs-number\">#eaeaea</span>;}\n   <span class=\"hljs-selector-class\">.poi</span>{<span class=\"hljs-attribute\">position</span>:absolute; <span class=\"hljs-attribute\">margin-top</span>: <span class=\"hljs-number\">300px</span>; <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100%</span>; <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">100px</span>; <span class=\"hljs-attribute\">background</span>: <span class=\"hljs-number\">#ef0</span>; <span class=\"hljs-attribute\">text-align</span>: right;}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"wrap\"</span>&gt;</span>\n   <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"poi\"</span>&gt;</span>poi<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre><p><img src=\"http://7xvbqa.com1.z0.glb.clouddn.com/qiniu/1472020258362.png\" width=\"358\"/></p>\n<h2 id=\"-\">不解释：</h2>\n<pre><code class=\"hljs lang-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n   $(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n       <span class=\"hljs-keyword\">var</span> wh = $(<span class=\"hljs-built_in\">window</span>).height();\n       <span class=\"hljs-keyword\">var</span> dh = $(<span class=\"hljs-built_in\">document</span>).height();\n       <span class=\"hljs-keyword\">var</span> sh = $(<span class=\"hljs-built_in\">window</span>).scrollTop();\n       <span class=\"hljs-keyword\">var</span> bh = $(<span class=\"hljs-string\">\".poi\"</span>).offset().top;\n       <span class=\"hljs-keyword\">var</span> h = $(<span class=\"hljs-string\">\".poi\"</span>).height();\n       <span class=\"hljs-keyword\">var</span> to_btm = wh - bh + sh -h;\n       <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"浏览器视窗高度：\"</span>+wh);\n       <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"页面文档高度：\"</span>+dh);\n       <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"页面向上滚动高度：\"</span>+sh);\n       <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"元素距离页面顶部高度：\"</span>+bh);\n       <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"元素自身高度：\"</span>+h);\n       <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"元素底部距离浏览器的高度：\"</span>+to_btm);\n   });\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre><p>解释如图：</p>\n<p><img src=\"http://7xvbqa.com1.z0.glb.clouddn.com/qiniu/1472023989995.png\" width=\"292\"/></p>\n<p>ps:</p>\n<p><img src=\"http://7xvbqa.com1.z0.glb.clouddn.com/qiniu/1472022072558.png\" width=\"744\"/></p>\n<p>$(&#39;html,body&#39;).animate({scrollTop:bh+100},500);</p>\n','\n## 需求：\n如下图所示，需要知道黄色模块距离浏览器底部的距离，若距离底部距离小于0，需要向上滚动至露出黄色模块。具体布局参数见代码：\n\n```\n<style>\n   html,body{padding: 0;margin:0;}\n   .wrap{position: relative; width: 100%;height: 800px;  background: #eaeaea;}\n   .poi{position:absolute; margin-top: 300px; width: 100%; height: 100px; background: #ef0; text-align: right;}\n</style>\n<div class=\"wrap\">\n   <div class=\"poi\">poi</div>\n</div>\n```\n\n<img src=\"http://7xvbqa.com1.z0.glb.clouddn.com/qiniu/1472020258362.png\" width=\"358\"/>\n\n## 不解释：\n\n\n```\n<script>\n   $(function(){\n       var wh = $(window).height();\n       var dh = $(document).height();\n       var sh = $(window).scrollTop();\n       var bh = $(\'.poi\').offset().top;\n       var h = $(\'.poi\').height();\n       var to_btm = wh - bh + sh -h;\n       console.log(\'浏览器视窗高度：\'+wh);\n       console.log(\'页面文档高度：\'+dh);\n       console.log(\'页面向上滚动高度：\'+sh);\n       console.log(\'元素距离页面顶部高度：\'+bh);\n       console.log(\'元素自身高度：\'+h);\n       console.log(\'元素底部距离浏览器的高度：\'+to_btm);\n   });\n</script>\n```\n\n解释如图：\n\n<img src=\"http://7xvbqa.com1.z0.glb.clouddn.com/qiniu/1472023989995.png\" width=\"292\"/>\n\nps:\n\n<img src=\"http://7xvbqa.com1.z0.glb.clouddn.com/qiniu/1472022072558.png\" width=\"744\"/>\n\n$(\'html,body\').animate({scrollTop:bh+100},500);\n','<h2 id=\"-\">需求：</h2>\n<p>如下图所示，需要知道黄色模块距离浏览器底部的距离，若距离底部距离小于0，需要向上滚动至露出黄色模块。具体布局参数见代码：</p>\n<pre><code class=\"hljs lang-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">style</span>&gt;</span><span class=\"css\">\n   <span class=\"hljs-selector-tag\">html</span>,<span class=\"hljs-selector-tag\">body</span>{<span class=\"hljs-attribute\">padding</span>: <span class=\"hljs-number\">0</span>;<span class=\"hljs-attribute\">margin</span>:<span class=\"hljs-number\">0</span>;}\n   <span class=\"hljs-selector-class\">.wrap</span>{<span class=\"hljs-attribute\">position</span>: relative; <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100%</span>;<span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">800px</span>;  <span class=\"hljs-attribute\">background</span>: <span class=\"hljs-number\">#eaeaea</span>;}\n   <span class=\"hljs-selector-class\">.poi</span>{<span class=\"hljs-attribute\">position</span>:absolute; <span class=\"hljs-attribute\">margin-top</span>: <span class=\"hljs-number\">300px</span>; <span class=\"hljs-attribute\">width</span>: <span class=\"hljs-number\">100%</span>; <span class=\"hljs-attribute\">height</span>: <span class=\"hljs-number\">100px</span>; <span class=\"hljs-attribute\">background</span>: <span class=\"hljs-number\">#ef0</span>; <span class=\"hljs-attribute\">text-align</span>: right;}\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">style</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"wrap\"</span>&gt;</span>\n   <span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">div</span> <span class=\"hljs-attr\">class</span>=<span class=\"hljs-string\">\"poi\"</span>&gt;</span>poi<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n<span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">div</span>&gt;</span>\n</code></pre><p><img src=\"http://7xvbqa.com1.z0.glb.clouddn.com/qiniu/1472020258362.png\" width=\"358\"/></p>\n<h2 id=\"-\">不解释：</h2>\n<pre><code class=\"hljs lang-xml\"><span class=\"hljs-tag\">&lt;<span class=\"hljs-name\">script</span>&gt;</span><span class=\"javascript\">\n   $(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>)</span>{\n       <span class=\"hljs-keyword\">var</span> wh = $(<span class=\"hljs-built_in\">window</span>).height();\n       <span class=\"hljs-keyword\">var</span> dh = $(<span class=\"hljs-built_in\">document</span>).height();\n       <span class=\"hljs-keyword\">var</span> sh = $(<span class=\"hljs-built_in\">window</span>).scrollTop();\n       <span class=\"hljs-keyword\">var</span> bh = $(<span class=\"hljs-string\">\".poi\"</span>).offset().top;\n       <span class=\"hljs-keyword\">var</span> h = $(<span class=\"hljs-string\">\".poi\"</span>).height();\n       <span class=\"hljs-keyword\">var</span> to_btm = wh - bh + sh -h;\n       <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"浏览器视窗高度：\"</span>+wh);\n       <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"页面文档高度：\"</span>+dh);\n       <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"页面向上滚动高度：\"</span>+sh);\n       <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"元素距离页面顶部高度：\"</span>+bh);\n       <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"元素自身高度：\"</span>+h);\n       <span class=\"hljs-built_in\">console</span>.log(<span class=\"hljs-string\">\"元素底部距离浏览器的高度：\"</span>+to_btm);\n   });\n</span><span class=\"hljs-tag\">&lt;/<span class=\"hljs-name\">script</span>&gt;</span>\n</code></pre><p>解释如图：</p>\n<p><img src=\"http://7xvbqa.com1.z0.glb.clouddn.com/qiniu/1472023989995.png\" width=\"292\"/></p>\n<p>ps:</p>\n<p><img src=\"http://7xvbqa.com1.z0.glb.clouddn.com/qiniu/1472022072558.png\" width=\"744\"/></p>\n<p>$(&#39;html,body&#39;).animate({scrollTop:bh+100},500);</p>\n',1,'2016-08-24 04:06:34','2016-08-24 04:06:35',1,0,'\"{\\\"push_sites\\\":[]}\"'),(10559,22,0,3,'有感。','self_dapai','<p>大牌前端小记</p>\n<p>1.需求方面 － 开发过程中并没有按照需求文档的内容来完善。需求文档很多细节交互不清晰，后期一直在不断的更改需求/新加需求。\n页面布局确定之后又会做出调整。</p>\n<p>2.代码方面 － 代码的可维护性，写代码的时候需要考虑代码的强壮性，不要单纯的把代码从一个地方复制粘贴到另外一个地方，了解每个代码的含义以及可能的影响内容。另外使用smarty模版写页面的时候，可以统一foreach循环出来，否则相似内容写的很乱，并且操作事件时会有各种绑定事件，混杂并且不精简，不优雅。</p>\n<p>3.bug －bug出现之后，不要着急的想用一个很hack的方式去实现，而是需要考虑底层原因，为什么会出现这样的问题？浏览器兼容性问题还是代码逻辑问题？一上来就用一个很hack的方式去解决问题就会导致各种逻辑混杂在一起，第二天就只有上帝知道你代码逻辑了。</p>\n<p>4.心态 －问题一个一个来，并不是每一个需求都要改并不是每个任务都很紧急，对所做事件进行合理排期，不慌张效率才会高。</p>\n<p>另外，解别人代码bug一定要三思。改动较小则好，改动较大，建议提早重构。</p>\n','大牌前端小记\n\n1.需求方面 － 开发过程中并没有按照需求文档的内容来完善。需求文档很多细节交互不清晰，后期一直在不断的更改需求/新加需求。\n页面布局确定之后又会做出调整。\n\n2.代码方面 － 代码的可维护性，写代码的时候需要考虑代码的强壮性，不要单纯的把代码从一个地方复制粘贴到另外一个地方，了解每个代码的含义以及可能的影响内容。另外使用smarty模版写页面的时候，可以统一foreach循环出来，否则相似内容写的很乱，并且操作事件时会有各种绑定事件，混杂并且不精简，不优雅。\n\n3.bug －bug出现之后，不要着急的想用一个很hack的方式去实现，而是需要考虑底层原因，为什么会出现这样的问题？浏览器兼容性问题还是代码逻辑问题？一上来就用一个很hack的方式去解决问题就会导致各种逻辑混杂在一起，第二天就只有上帝知道你代码逻辑了。\n\n4.心态 －问题一个一个来，并不是每一个需求都要改并不是每个任务都很紧急，对所做事件进行合理排期，不慌张效率才会高。\n\n另外，解别人代码bug一定要三思。改动较小则好，改动较大，建议提早重构。\n\n','<p>大牌前端小记</p>\n<p>1.需求方面 － 开发过程中并没有按照需求文档的内容来完善。需求文档很多细节交互不清晰，后期一直在不断的更改需求/新加需求。\n页面布局确定之后又会做出调整。</p>\n<p>2.代码方面 － 代码的可维护性，写代码的时候需要考虑代码的强壮性，不要单纯的把代码从一个地方复制粘贴到另外一个地方，了解每个代码的含义以及可能的影响内容。另外使用smarty模版写页面的时候，可以统一foreach循环出来，否则相似内容写的很乱，并且操作事件时会有各种绑定事件，混杂并且不精简，不优雅。</p>\n<p>3.bug －bug出现之后，不要着急的想用一个很hack的方式去实现，而是需要考虑底层原因，为什么会出现这样的问题？浏览器兼容性问题还是代码逻辑问题？一上来就用一个很hack的方式去解决问题就会导致各种逻辑混杂在一起，第二天就只有上帝知道你代码逻辑了。</p>\n<p>4.心态 －问题一个一个来，并不是每一个需求都要改并不是每个任务都很紧急，对所做事件进行合理排期，不慌张效率才会高。</p>\n<p>另外，解别人代码bug一定要三思。改动较小则好，改动较大，建议提早重构。</p>\n',1,'2016-09-01 01:49:30','2016-09-01 13:50:21',1,0,'\"{\\\"push_sites\\\":[]}\"'),(10560,22,0,3,' javascript随机函数','js-sort','<p>随机取一个值：\n一般情况下代码逻辑放在后端处理，前端只负责展现。\n但是若是若是后端不愿意做，e...那么前端需要能够实现。</p>\n<p>需求：实现一个数组的打乱重拍。若是直接从数组中随机取一个值比较简单，直接<code>var item = items[Math.floor(Math.random()*items.length)]</code>得到一个随机值。下面看怎么对数组进行重新排序。</p>\n<p>so ... 遇到问题第一步，先查查网上有木有已经实现的比较好的方式～ <code>Fisher-Yates</code> binggo!</p>\n<p><strong>Fisher-Yates乱序算法</strong></p>\n<p>思路，假如你要洗牌，那么最随机的做法就是从牌堆里随便抽一张出来，然后放在一边，之后从剩下的牌里重复之前的操作，直到所有牌都被抽出来放到另外一堆中。</p>\n<p><strong>round 1</strong></p>\n<hr>\n<p>随机从数组里取出一个元素，保存到另一个数组，然后重复之，直到原数组中所有元素为空。 <a href=\"http://t.westpsk.com/fun/Fisher-Yates-Shuffle/sort1.html\">查看演示</a></p>\n<pre><code class=\"hljs lang-maxima\">function shuffle(<span class=\"hljs-built_in\">array</span>) {\n    <span class=\"hljs-built_in\">var</span> <span class=\"hljs-built_in\">copy</span> = [],\n        n = <span class=\"hljs-built_in\">array</span>.<span class=\"hljs-built_in\">length</span>,\n        i;\n    // 如果还剩有元素则继续。。。\n    <span class=\"hljs-keyword\">while</span> (n) {\n        // 随机抽取一个元素\n        i = Math.<span class=\"hljs-built_in\">floor</span>(Math.<span class=\"hljs-built_in\">random</span>() * <span class=\"hljs-built_in\">array</span>.<span class=\"hljs-built_in\">length</span>);\n        // 如果这个元素之前没有被选中过。。\n        <span class=\"hljs-keyword\">if</span> (i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">array</span>) {\n            <span class=\"hljs-built_in\">copy</span>.<span class=\"hljs-built_in\">push</span>(<span class=\"hljs-built_in\">array</span>[i]);\n            <span class=\"hljs-built_in\">delete</span> <span class=\"hljs-built_in\">array</span>[i];\n            n--;\n        }\n    }\n    <span class=\"hljs-built_in\">return</span> <span class=\"hljs-built_in\">copy</span>;\n}\n</code></pre><p>问题：我们新建一个数组，每次都会随机取一个0-len的随机值，随机值可能一样；另外一方面可能永远运行不完。</p>\n<p><em>注：</em> <code>Math.random()</code>产生[0,1)的小数\ndelete 操作只将数组元素的值删除，但不影响数组长度，删除后原来位置的值变为undefined</p>\n<p><strong>round 2</strong></p>\n<hr>\n<p>用Array的<code>splice()</code>方法将其从目标数组中移除同时也更新了目标数组的长度，如此一来下次遍历的时候是从新的长度开始，不会重复处理的情况了。 <a href=\"http://t.westpsk.com/fun/Fisher-Yates-Shuffle/sort2.html\">查看演示</a></p>\n<pre><code class=\"hljs lang-maxima\">function shuffle(<span class=\"hljs-built_in\">array</span>) {\n    <span class=\"hljs-built_in\">var</span> <span class=\"hljs-built_in\">copy</span> = [],\n        n = <span class=\"hljs-built_in\">array</span>.<span class=\"hljs-built_in\">length</span>,\n        i;\n    // 如果还剩有元素。。\n    <span class=\"hljs-keyword\">while</span> (n) {\n        // 随机选取一个元素\n        i = Math.<span class=\"hljs-built_in\">floor</span>(Math.<span class=\"hljs-built_in\">random</span>() * n--);\n        // 移动到新数组中\n        <span class=\"hljs-built_in\">copy</span>.<span class=\"hljs-built_in\">push</span>(<span class=\"hljs-built_in\">array</span>.<span class=\"hljs-built_in\">splice</span>(i, <span class=\"hljs-number\">1</span>)[<span class=\"hljs-number\">0</span>]);\n    }\n    <span class=\"hljs-built_in\">return</span> <span class=\"hljs-built_in\">copy</span>;\n}\n</code></pre><p><strong>round 3</strong></p>\n<hr>\n<p>因为调用<code>splice</code>来删除数组元素会导致删除位置之后的所有元素要做<code>shift</code>操作来向前补充，从而达到将数组长度减小的目的，当然这是在后台自动完成的，但这无疑增加了算法的复杂度。</p>\n<p>注意到我们要做的仅仅是将数组元素重新排序，已经取出来的元素和剩下的元素之和一定是等于数组原来的总元素个数的。所以可以考虑不创建新的数组来保存已经抽取的元素，可以这样，随机从数组中抽出一个元素，然后与最后个元素交换，相当于把这个随机抽取的元素放到了数组最后面去，表示它已经是被随机过了，同时被换走的那个元素跑到前面去了，会在后续的重复操作中被随机掉。一轮操作过后，下一轮我们只在剩下的n-1个元素也就是数组的前n-1个元素中进行相同的操作，直到进行到第一个。 <a href=\"http://t.westpsk.com/fun/Fisher-Yates-Shuffle/sort3.html\">查看演示</a></p>\n<pre><code class=\"hljs lang-php\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">shuffle</span><span class=\"hljs-params\">(array)</span> </span>{\n    <span class=\"hljs-keyword\">var</span> m = <span class=\"hljs-keyword\">array</span>.length,\n        t, i;\n    <span class=\"hljs-comment\">// 如果还剩有元素…</span>\n    <span class=\"hljs-keyword\">while</span> (m) {\n        <span class=\"hljs-comment\">// 随机选取一个元素…</span>\n        i = Math.floor(Math.random() * m--);\n        <span class=\"hljs-comment\">// 与当前元素进行交换</span>\n        t = <span class=\"hljs-keyword\">array</span>[m];\n        <span class=\"hljs-keyword\">array</span>[m] = <span class=\"hljs-keyword\">array</span>[i];\n        <span class=\"hljs-keyword\">array</span>[i] = t;\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">array</span>;\n}\n</code></pre><p>不急，还有一个，真是简洁。但是随机效果不好。</p>\n<p><strong>round 4</strong></p>\n<hr>\n<pre><code class=\"hljs lang-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">shuffle</span>(<span class=\"hljs-params\">array</span>) </span>{\n    <span class=\"hljs-keyword\">return</span> array.sort(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Math</span>.random() - <span class=\"hljs-number\">0.5</span>\n    });\n}\n</code></pre><p>⬆️ 这厮有bug！ 在IE 11上。sort方法的返回值应该是0，1，－1。这里返回true和false。\n所以，改进之后：</p>\n<pre><code class=\"hljs lang-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">shuffle</span>(<span class=\"hljs-params\">array</span>) </span>{\n    <span class=\"hljs-keyword\">return</span> array.sort(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Math</span>.random() &gt; <span class=\"hljs-number\">0.5</span> ? <span class=\"hljs-number\">1</span>: <span class=\"hljs-number\">-1</span>;\n    });\n}\n</code></pre><hr>\n<p>生成一个1-len的数组。</p>\n<ul>\n<li>Array.from(Array(len).keys());  //返回[0-length]的数组</li>\n<li>Math.pow(2, len).toString(2).split(&#39;&#39;).map((i,j) =&gt; j);</li>\n<li>Array(N).fill().map((_, i) =&gt; i + 1);</li>\n<li>Array.from(Array(5)).map((_, i) =&gt; i + 1);</li>\n</ul>\n','\n随机取一个值：\n一般情况下代码逻辑放在后端处理，前端只负责展现。\n但是若是若是后端不愿意做，e...那么前端需要能够实现。\n\n需求：实现一个数组的打乱重拍。若是直接从数组中随机取一个值比较简单，直接`var item = items[Math.floor(Math.random()*items.length)]`得到一个随机值。下面看怎么对数组进行重新排序。\n\nso ... 遇到问题第一步，先查查网上有木有已经实现的比较好的方式～ `Fisher-Yates` binggo!\n\n__Fisher-Yates乱序算法__\n\n思路，假如你要洗牌，那么最随机的做法就是从牌堆里随便抽一张出来，然后放在一边，之后从剩下的牌里重复之前的操作，直到所有牌都被抽出来放到另外一堆中。\n\n__round 1__\n*** \n\n随机从数组里取出一个元素，保存到另一个数组，然后重复之，直到原数组中所有元素为空。 [查看演示](http://t.westpsk.com/fun/Fisher-Yates-Shuffle/sort1.html)\n\n```\nfunction shuffle(array) {\n    var copy = [],\n        n = array.length,\n        i;\n    // 如果还剩有元素则继续。。。\n    while (n) {\n        // 随机抽取一个元素\n        i = Math.floor(Math.random() * array.length);\n        // 如果这个元素之前没有被选中过。。\n        if (i in array) {\n            copy.push(array[i]);\n            delete array[i];\n            n--;\n        }\n    }\n    return copy;\n}\n```\n\n问题：我们新建一个数组，每次都会随机取一个0-len的随机值，随机值可能一样；另外一方面可能永远运行不完。\n\n_注：_ `Math.random()`产生[0,1)的小数\ndelete 操作只将数组元素的值删除，但不影响数组长度，删除后原来位置的值变为undefined\n\n__round 2__\n***\n\n用Array的`splice()`方法将其从目标数组中移除同时也更新了目标数组的长度，如此一来下次遍历的时候是从新的长度开始，不会重复处理的情况了。 [查看演示](http://t.westpsk.com/fun/Fisher-Yates-Shuffle/sort2.html)\n\n```\nfunction shuffle(array) {\n    var copy = [],\n        n = array.length,\n        i;\n    // 如果还剩有元素。。\n    while (n) {\n        // 随机选取一个元素\n        i = Math.floor(Math.random() * n--);\n        // 移动到新数组中\n        copy.push(array.splice(i, 1)[0]);\n    }\n    return copy;\n}\n```\n\n__round 3__\n***\n\n因为调用`splice`来删除数组元素会导致删除位置之后的所有元素要做`shift`操作来向前补充，从而达到将数组长度减小的目的，当然这是在后台自动完成的，但这无疑增加了算法的复杂度。\n\n注意到我们要做的仅仅是将数组元素重新排序，已经取出来的元素和剩下的元素之和一定是等于数组原来的总元素个数的。所以可以考虑不创建新的数组来保存已经抽取的元素，可以这样，随机从数组中抽出一个元素，然后与最后个元素交换，相当于把这个随机抽取的元素放到了数组最后面去，表示它已经是被随机过了，同时被换走的那个元素跑到前面去了，会在后续的重复操作中被随机掉。一轮操作过后，下一轮我们只在剩下的n-1个元素也就是数组的前n-1个元素中进行相同的操作，直到进行到第一个。 [查看演示](http://t.westpsk.com/fun/Fisher-Yates-Shuffle/sort3.html)\n\n```\nfunction shuffle(array) {\n    var m = array.length,\n        t, i;\n    // 如果还剩有元素…\n    while (m) {\n        // 随机选取一个元素…\n        i = Math.floor(Math.random() * m--);\n        // 与当前元素进行交换\n        t = array[m];\n        array[m] = array[i];\n        array[i] = t;\n    }\n    return array;\n}\n```\n\n不急，还有一个，真是简洁。但是随机效果不好。\n\n__round 4__\n***\n\n```\nfunction shuffle(array) {\n    return array.sort(function() {\n        return Math.random() - 0.5\n    });\n}\n```\n\n⬆️ 这厮有bug！ 在IE 11上。sort方法的返回值应该是0，1，－1。这里返回true和false。\n所以，改进之后：\n\n```\nfunction shuffle(array) {\n    return array.sort(function() {\n        return Math.random() > 0.5 ? 1: -1;\n    });\n}\n```\n\n***\n\n生成一个1-len的数组。\n* Array.from(Array(len).keys());  //返回[0-length]的数组\n* Math.pow(2, len).toString(2).split(\'\').map((i,j) => j);\n* Array(N).fill().map((_, i) => i + 1);\n* Array.from(Array(5)).map((_, i) => i + 1);\n','<p>随机取一个值：\n一般情况下代码逻辑放在后端处理，前端只负责展现。\n但是若是若是后端不愿意做，e...那么前端需要能够实现。</p>\n<p>需求：实现一个数组的打乱重拍。若是直接从数组中随机取一个值比较简单，直接<code>var item = items[Math.floor(Math.random()*items.length)]</code>得到一个随机值。下面看怎么对数组进行重新排序。</p>\n<p>so ... 遇到问题第一步，先查查网上有木有已经实现的比较好的方式～ <code>Fisher-Yates</code> binggo!</p>\n<p><strong>Fisher-Yates乱序算法</strong></p>\n<p>思路，假如你要洗牌，那么最随机的做法就是从牌堆里随便抽一张出来，然后放在一边，之后从剩下的牌里重复之前的操作，直到所有牌都被抽出来放到另外一堆中。</p>\n<p><strong>round 1</strong></p>\n<hr>\n<p>随机从数组里取出一个元素，保存到另一个数组，然后重复之，直到原数组中所有元素为空。 <a href=\"http://t.westpsk.com/fun/Fisher-Yates-Shuffle/sort1.html\">查看演示</a></p>\n<pre><code class=\"hljs lang-maxima\">function shuffle(<span class=\"hljs-built_in\">array</span>) {\n    <span class=\"hljs-built_in\">var</span> <span class=\"hljs-built_in\">copy</span> = [],\n        n = <span class=\"hljs-built_in\">array</span>.<span class=\"hljs-built_in\">length</span>,\n        i;\n    // 如果还剩有元素则继续。。。\n    <span class=\"hljs-keyword\">while</span> (n) {\n        // 随机抽取一个元素\n        i = Math.<span class=\"hljs-built_in\">floor</span>(Math.<span class=\"hljs-built_in\">random</span>() * <span class=\"hljs-built_in\">array</span>.<span class=\"hljs-built_in\">length</span>);\n        // 如果这个元素之前没有被选中过。。\n        <span class=\"hljs-keyword\">if</span> (i <span class=\"hljs-keyword\">in</span> <span class=\"hljs-built_in\">array</span>) {\n            <span class=\"hljs-built_in\">copy</span>.<span class=\"hljs-built_in\">push</span>(<span class=\"hljs-built_in\">array</span>[i]);\n            <span class=\"hljs-built_in\">delete</span> <span class=\"hljs-built_in\">array</span>[i];\n            n--;\n        }\n    }\n    <span class=\"hljs-built_in\">return</span> <span class=\"hljs-built_in\">copy</span>;\n}\n</code></pre><p>问题：我们新建一个数组，每次都会随机取一个0-len的随机值，随机值可能一样；另外一方面可能永远运行不完。</p>\n<p><em>注：</em> <code>Math.random()</code>产生[0,1)的小数\ndelete 操作只将数组元素的值删除，但不影响数组长度，删除后原来位置的值变为undefined</p>\n<p><strong>round 2</strong></p>\n<hr>\n<p>用Array的<code>splice()</code>方法将其从目标数组中移除同时也更新了目标数组的长度，如此一来下次遍历的时候是从新的长度开始，不会重复处理的情况了。 <a href=\"http://t.westpsk.com/fun/Fisher-Yates-Shuffle/sort2.html\">查看演示</a></p>\n<pre><code class=\"hljs lang-maxima\">function shuffle(<span class=\"hljs-built_in\">array</span>) {\n    <span class=\"hljs-built_in\">var</span> <span class=\"hljs-built_in\">copy</span> = [],\n        n = <span class=\"hljs-built_in\">array</span>.<span class=\"hljs-built_in\">length</span>,\n        i;\n    // 如果还剩有元素。。\n    <span class=\"hljs-keyword\">while</span> (n) {\n        // 随机选取一个元素\n        i = Math.<span class=\"hljs-built_in\">floor</span>(Math.<span class=\"hljs-built_in\">random</span>() * n--);\n        // 移动到新数组中\n        <span class=\"hljs-built_in\">copy</span>.<span class=\"hljs-built_in\">push</span>(<span class=\"hljs-built_in\">array</span>.<span class=\"hljs-built_in\">splice</span>(i, <span class=\"hljs-number\">1</span>)[<span class=\"hljs-number\">0</span>]);\n    }\n    <span class=\"hljs-built_in\">return</span> <span class=\"hljs-built_in\">copy</span>;\n}\n</code></pre><p><strong>round 3</strong></p>\n<hr>\n<p>因为调用<code>splice</code>来删除数组元素会导致删除位置之后的所有元素要做<code>shift</code>操作来向前补充，从而达到将数组长度减小的目的，当然这是在后台自动完成的，但这无疑增加了算法的复杂度。</p>\n<p>注意到我们要做的仅仅是将数组元素重新排序，已经取出来的元素和剩下的元素之和一定是等于数组原来的总元素个数的。所以可以考虑不创建新的数组来保存已经抽取的元素，可以这样，随机从数组中抽出一个元素，然后与最后个元素交换，相当于把这个随机抽取的元素放到了数组最后面去，表示它已经是被随机过了，同时被换走的那个元素跑到前面去了，会在后续的重复操作中被随机掉。一轮操作过后，下一轮我们只在剩下的n-1个元素也就是数组的前n-1个元素中进行相同的操作，直到进行到第一个。 <a href=\"http://t.westpsk.com/fun/Fisher-Yates-Shuffle/sort3.html\">查看演示</a></p>\n<pre><code class=\"hljs lang-php\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">shuffle</span><span class=\"hljs-params\">(array)</span> </span>{\n    <span class=\"hljs-keyword\">var</span> m = <span class=\"hljs-keyword\">array</span>.length,\n        t, i;\n    <span class=\"hljs-comment\">// 如果还剩有元素…</span>\n    <span class=\"hljs-keyword\">while</span> (m) {\n        <span class=\"hljs-comment\">// 随机选取一个元素…</span>\n        i = Math.floor(Math.random() * m--);\n        <span class=\"hljs-comment\">// 与当前元素进行交换</span>\n        t = <span class=\"hljs-keyword\">array</span>[m];\n        <span class=\"hljs-keyword\">array</span>[m] = <span class=\"hljs-keyword\">array</span>[i];\n        <span class=\"hljs-keyword\">array</span>[i] = t;\n    }\n    <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">array</span>;\n}\n</code></pre><p>不急，还有一个，真是简洁。但是随机效果不好。</p>\n<p><strong>round 4</strong></p>\n<hr>\n<pre><code class=\"hljs lang-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">shuffle</span>(<span class=\"hljs-params\">array</span>) </span>{\n    <span class=\"hljs-keyword\">return</span> array.sort(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Math</span>.random() - <span class=\"hljs-number\">0.5</span>\n    });\n}\n</code></pre><p>⬆️ 这厮有bug！ 在IE 11上。sort方法的返回值应该是0，1，－1。这里返回true和false。\n所以，改进之后：</p>\n<pre><code class=\"hljs lang-javascript\"><span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span> <span class=\"hljs-title\">shuffle</span>(<span class=\"hljs-params\">array</span>) </span>{\n    <span class=\"hljs-keyword\">return</span> array.sort(<span class=\"hljs-function\"><span class=\"hljs-keyword\">function</span>(<span class=\"hljs-params\"></span>) </span>{\n        <span class=\"hljs-keyword\">return</span> <span class=\"hljs-built_in\">Math</span>.random() &gt; <span class=\"hljs-number\">0.5</span> ? <span class=\"hljs-number\">1</span>: <span class=\"hljs-number\">-1</span>;\n    });\n}\n</code></pre><hr>\n<p>生成一个1-len的数组。</p>\n<ul>\n<li>Array.from(Array(len).keys());  //返回[0-length]的数组</li>\n<li>Math.pow(2, len).toString(2).split(&#39;&#39;).map((i,j) =&gt; j);</li>\n<li>Array(N).fill().map((_, i) =&gt; i + 1);</li>\n<li>Array.from(Array(5)).map((_, i) =&gt; i + 1);</li>\n</ul>\n',1,'2016-09-08 14:21:31','2016-09-09 00:04:51',1,0,'\"{\\\"push_sites\\\":[]}\"'),(10561,22,0,3,'javascript随机－只是为了贴代码','js-random','<pre><code class=\"hljs lang-maxima\"><span class=\"hljs-comment\">/**\n * Randomize array element order in-place.\n * Using Durstenfeld shuffle algorithm.\n */</span>\nfunction shuffleArray(<span class=\"hljs-built_in\">array</span>) {\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">var</span> i = <span class=\"hljs-built_in\">array</span>.<span class=\"hljs-built_in\">length</span> - <span class=\"hljs-number\">1</span>; i &gt; <span class=\"hljs-number\">0</span>; i--) {\n        <span class=\"hljs-built_in\">var</span> j = Math.<span class=\"hljs-built_in\">floor</span>(Math.<span class=\"hljs-built_in\">random</span>() * (i + <span class=\"hljs-number\">1</span>));\n        <span class=\"hljs-built_in\">var</span> temp = <span class=\"hljs-built_in\">array</span>[i];\n        <span class=\"hljs-built_in\">array</span>[i] = <span class=\"hljs-built_in\">array</span>[j];\n        <span class=\"hljs-built_in\">array</span>[j] = temp;\n    }\n    <span class=\"hljs-built_in\">return</span> <span class=\"hljs-built_in\">array</span>;\n}\n</code></pre><pre><code class=\"hljs lang-kotlin\">Array.prototype.shuffle = function() {\n  <span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-keyword\">this</span>.length, j, temp;\n  <span class=\"hljs-keyword\">if</span> ( i == <span class=\"hljs-number\">0</span> ) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>;\n  <span class=\"hljs-keyword\">while</span> ( --i ) {\n     j = Math.floor( Math.random() * ( i + <span class=\"hljs-number\">1</span> ) );\n     temp = <span class=\"hljs-keyword\">this</span>[i];\n     <span class=\"hljs-keyword\">this</span>[i] = <span class=\"hljs-keyword\">this</span>[j];\n     <span class=\"hljs-keyword\">this</span>[j] = temp;\n  }\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>;\n}\n</code></pre>','\n```\n/**\n * Randomize array element order in-place.\n * Using Durstenfeld shuffle algorithm.\n */\nfunction shuffleArray(array) {\n    for (var i = array.length - 1; i > 0; i--) {\n        var j = Math.floor(Math.random() * (i + 1));\n        var temp = array[i];\n        array[i] = array[j];\n        array[j] = temp;\n    }\n    return array;\n}\n```\n\n\n```\nArray.prototype.shuffle = function() {\n  var i = this.length, j, temp;\n  if ( i == 0 ) return this;\n  while ( --i ) {\n     j = Math.floor( Math.random() * ( i + 1 ) );\n     temp = this[i];\n     this[i] = this[j];\n     this[j] = temp;\n  }\n  return this;\n}\n```\n','<pre><code class=\"hljs lang-maxima\"><span class=\"hljs-comment\">/**\n * Randomize array element order in-place.\n * Using Durstenfeld shuffle algorithm.\n */</span>\nfunction shuffleArray(<span class=\"hljs-built_in\">array</span>) {\n    <span class=\"hljs-keyword\">for</span> (<span class=\"hljs-built_in\">var</span> i = <span class=\"hljs-built_in\">array</span>.<span class=\"hljs-built_in\">length</span> - <span class=\"hljs-number\">1</span>; i &gt; <span class=\"hljs-number\">0</span>; i--) {\n        <span class=\"hljs-built_in\">var</span> j = Math.<span class=\"hljs-built_in\">floor</span>(Math.<span class=\"hljs-built_in\">random</span>() * (i + <span class=\"hljs-number\">1</span>));\n        <span class=\"hljs-built_in\">var</span> temp = <span class=\"hljs-built_in\">array</span>[i];\n        <span class=\"hljs-built_in\">array</span>[i] = <span class=\"hljs-built_in\">array</span>[j];\n        <span class=\"hljs-built_in\">array</span>[j] = temp;\n    }\n    <span class=\"hljs-built_in\">return</span> <span class=\"hljs-built_in\">array</span>;\n}\n</code></pre><pre><code class=\"hljs lang-kotlin\">Array.prototype.shuffle = function() {\n  <span class=\"hljs-keyword\">var</span> i = <span class=\"hljs-keyword\">this</span>.length, j, temp;\n  <span class=\"hljs-keyword\">if</span> ( i == <span class=\"hljs-number\">0</span> ) <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>;\n  <span class=\"hljs-keyword\">while</span> ( --i ) {\n     j = Math.floor( Math.random() * ( i + <span class=\"hljs-number\">1</span> ) );\n     temp = <span class=\"hljs-keyword\">this</span>[i];\n     <span class=\"hljs-keyword\">this</span>[i] = <span class=\"hljs-keyword\">this</span>[j];\n     <span class=\"hljs-keyword\">this</span>[j] = temp;\n  }\n  <span class=\"hljs-keyword\">return</span> <span class=\"hljs-keyword\">this</span>;\n}\n</code></pre>',1,'2016-09-09 00:03:28','2016-09-09 00:05:45',1,0,'\"{\\\"push_sites\\\":[]}\"');
/*!40000 ALTER TABLE `fk_post` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `fk_post_cate`
--

DROP TABLE IF EXISTS `fk_post_cate`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `fk_post_cate` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `post_id` int(11) NOT NULL,
  `cate_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `post_cate` (`post_id`,`cate_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `fk_post_cate`
--

LOCK TABLES `fk_post_cate` WRITE;
/*!40000 ALTER TABLE `fk_post_cate` DISABLE KEYS */;
/*!40000 ALTER TABLE `fk_post_cate` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `fk_post_history`
--

DROP TABLE IF EXISTS `fk_post_history`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `fk_post_history` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `post_id` int(11) DEFAULT NULL,
  `markdown_content` text,
  `update_user_id` int(11) DEFAULT NULL COMMENT '更新用户的 ID',
  PRIMARY KEY (`id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `fk_post_history`
--

LOCK TABLES `fk_post_history` WRITE;
/*!40000 ALTER TABLE `fk_post_history` DISABLE KEYS */;
/*!40000 ALTER TABLE `fk_post_history` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `fk_post_tag`
--

DROP TABLE IF EXISTS `fk_post_tag`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `fk_post_tag` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `post_id` int(11) NOT NULL,
  `tag_id` int(11) NOT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `post_tag` (`post_id`,`tag_id`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `fk_post_tag`
--

LOCK TABLES `fk_post_tag` WRITE;
/*!40000 ALTER TABLE `fk_post_tag` DISABLE KEYS */;
/*!40000 ALTER TABLE `fk_post_tag` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `fk_tag`
--

DROP TABLE IF EXISTS `fk_tag`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `fk_tag` (
  `id` int(11) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(255) DEFAULT NULL,
  `pathname` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`)
) ENGINE=InnoDB DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `fk_tag`
--

LOCK TABLES `fk_tag` WRITE;
/*!40000 ALTER TABLE `fk_tag` DISABLE KEYS */;
/*!40000 ALTER TABLE `fk_tag` ENABLE KEYS */;
UNLOCK TABLES;

--
-- Table structure for table `fk_user`
--

DROP TABLE IF EXISTS `fk_user`;
/*!40101 SET @saved_cs_client     = @@character_set_client */;
/*!40101 SET character_set_client = utf8 */;
CREATE TABLE `fk_user` (
  `id` int(10) unsigned NOT NULL AUTO_INCREMENT,
  `name` varchar(255) NOT NULL DEFAULT '',
  `display_name` varchar(255) DEFAULT NULL,
  `password` varchar(255) NOT NULL DEFAULT '',
  `type` tinyint(11) NOT NULL DEFAULT '1' COMMENT '1 为管理员  2 为编辑',
  `email` varchar(255) NOT NULL DEFAULT '',
  `status` tinyint(11) NOT NULL DEFAULT '1' COMMENT '1 为有效 2 为禁用',
  `create_time` datetime NOT NULL,
  `create_ip` varchar(20) NOT NULL DEFAULT '',
  `last_login_time` datetime NOT NULL,
  `last_login_ip` varchar(20) NOT NULL DEFAULT '',
  `app_key` varchar(255) DEFAULT NULL,
  `app_secret` varchar(255) DEFAULT NULL,
  PRIMARY KEY (`id`),
  UNIQUE KEY `name` (`name`),
  UNIQUE KEY `email` (`email`)
) ENGINE=InnoDB AUTO_INCREMENT=23 DEFAULT CHARSET=utf8;
/*!40101 SET character_set_client = @saved_cs_client */;

--
-- Dumping data for table `fk_user`
--

LOCK TABLES `fk_user` WRITE;
/*!40000 ALTER TABLE `fk_user` DISABLE KEYS */;
INSERT INTO `fk_user` VALUES (21,'admin','','$2a$08$A.UC4MCES5LZm.BQnUZZdOq.a0Gy4VrUd4BImz0gld3Y7ZJhFtuM6',1,'admin@firekylin.org',2,'2016-03-18 09:04:47','127.0.0.1','2016-07-29 07:07:42','218.30.116.183',NULL,NULL),(22,'ivan','','$2a$08$wwxFuziguakWdxCcgSauZOWhzIBQUwEPHIkaXoBzv/0wmxlw0JCa2',1,'pansongkui@126.com',1,'2016-07-13 00:15:21','218.30.116.3','2016-07-13 00:15:21','218.30.116.3',NULL,NULL);
/*!40000 ALTER TABLE `fk_user` ENABLE KEYS */;
UNLOCK TABLES;
/*!40103 SET TIME_ZONE=@OLD_TIME_ZONE */;

/*!40101 SET SQL_MODE=@OLD_SQL_MODE */;
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;
/*!40014 SET UNIQUE_CHECKS=@OLD_UNIQUE_CHECKS */;
/*!40101 SET CHARACTER_SET_CLIENT=@OLD_CHARACTER_SET_CLIENT */;
/*!40101 SET CHARACTER_SET_RESULTS=@OLD_CHARACTER_SET_RESULTS */;
/*!40101 SET COLLATION_CONNECTION=@OLD_COLLATION_CONNECTION */;
/*!40111 SET SQL_NOTES=@OLD_SQL_NOTES */;

-- Dump completed on 2016-09-18  4:12:17
